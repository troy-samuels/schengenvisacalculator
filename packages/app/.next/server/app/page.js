/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/page";
exports.ids = ["app/page"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlobalError: () => (/* reexport default from dynamic */ next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_25___default.a),\n/* harmony export */   __next_app__: () => (/* binding */ __next_app__),\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   pages: () => (/* binding */ pages),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   tree: () => (/* binding */ tree)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-page/module.compiled */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/module.compiled.js?ca56\");\n/* harmony import */ var next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/app-render/interop-default */ \"(rsc)/../../node_modules/next/dist/server/app-render/interop-default.js\");\n/* harmony import */ var next_dist_server_app_render_strip_flight_headers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/app-render/strip-flight-headers */ \"(rsc)/../../node_modules/next/dist/server/app-render/strip-flight-headers.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/lib/experimental/ppr */ \"(rsc)/../../node_modules/next/dist/server/lib/experimental/ppr.js\");\n/* harmony import */ var next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/request/fallback-params */ \"(rsc)/../../node_modules/next/dist/server/request/fallback-params.js\");\n/* harmony import */ var next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/app-render/encryption-utils */ \"(rsc)/../../node_modules/next/dist/server/app-render/encryption-utils.js\");\n/* harmony import */ var next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/streaming-metadata */ \"(rsc)/../../node_modules/next/dist/server/lib/streaming-metadata.js\");\n/* harmony import */ var next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/server/app-render/action-utils */ \"(rsc)/../../node_modules/next/dist/server/app-render/action-utils.js\");\n/* harmony import */ var next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/lib/server-action-request-meta */ \"(rsc)/../../node_modules/next/dist/server/lib/server-action-request-meta.js\");\n/* harmony import */ var next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! next/dist/client/components/app-router-headers */ \"(rsc)/../../node_modules/next/dist/client/components/app-router-headers.js\");\n/* harmony import */ var next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/is-bot */ \"next/dist/shared/lib/router/utils/is-bot\");\n/* harmony import */ var next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! next/dist/lib/fallback */ \"(rsc)/../../node_modules/next/dist/lib/fallback.js\");\n/* harmony import */ var next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! next/dist/server/render-result */ \"(rsc)/../../node_modules/next/dist/server/render-result.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var next_dist_server_stream_utils_encoded_tags__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! next/dist/server/stream-utils/encoded-tags */ \"(rsc)/../../node_modules/next/dist/server/stream-utils/encoded-tags.js\");\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! next/dist/server/send-payload */ \"(rsc)/../../node_modules/next/dist/server/send-payload.js\");\n/* harmony import */ var next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! next/dist/client/components/builtin/global-error.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/global-error.js\");\n/* harmony import */ var next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! next/dist/server/app-render/entry-base */ \"(rsc)/../../node_modules/next/dist/server/app-render/entry-base.js\");\n/* harmony import */ var next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! next/dist/client/components/redirect-status-code */ \"(rsc)/../../node_modules/next/dist/client/components/redirect-status-code.js\");\n/* harmony import */ var next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_27__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26__) if([\"default\",\"tree\",\"pages\",\"GlobalError\",\"__next_app__\",\"routeModule\",\"handler\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nconst module0 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/layout.js */ \"(rsc)/./src/app/layout.js\"));\nconst module1 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/global-error.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/global-error.js\", 23));\nconst module2 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/not-found.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/not-found.js\", 23));\nconst module3 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/forbidden.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/forbidden.js\", 23));\nconst module4 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! next/dist/client/components/builtin/unauthorized.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/unauthorized.js\", 23));\nconst page5 = () => Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\"));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: ['__PAGE__', {}, {\n          page: [page5, \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\"],\n          \n        }]\n      },\n        {\n        'layout': [module0, \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/layout.js\"],\n'global-error': [module1, \"next/dist/client/components/builtin/global-error.js\"],\n'not-found': [module2, \"next/dist/client/components/builtin/not-found.js\"],\n'forbidden': [module3, \"next/dist/client/components/builtin/forbidden.js\"],\n'unauthorized': [module4, \"next/dist/client/components/builtin/unauthorized.js\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\"];\n\n\n\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nconst __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\n\n\n\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppPageRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n        page: \"/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: '',\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    var _this;\n    let srcPage = \"/page\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const initialPostponed = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'postponed');\n    // TODO: replace with more specific flags\n    const minimalMode = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'minimalMode');\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, query, params, parsedUrl, pageIsDynamic, buildManifest, nextFontManifest, reactLoadableManifest, serverActionsManifest, clientReferenceManifest, subresourceIntegrityManifest, prerenderManifest, isDraftMode, resolvedPathname, revalidateOnlyGenerated, routerServerContext, nextConfig, interceptionRoutePatterns } = prepareResult;\n    const pathname = parsedUrl.pathname || '/';\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_14__.normalizeAppPath)(srcPage);\n    let { isOnDemandRevalidate } = prepareResult;\n    const prerenderInfo = routeModule.match(pathname, prerenderManifest);\n    const isPrerendered = !!prerenderManifest.routes[resolvedPathname];\n    let isSSG = Boolean(prerenderInfo || isPrerendered || prerenderManifest.routes[normalizedSrcPage]);\n    const userAgent = req.headers['user-agent'] || '';\n    const botType = (0,next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_17__.getBotType)(userAgent);\n    const isHtmlBot = (0,next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_12__.isHtmlBotRequest)(req);\n    /**\n   * If true, this indicates that the request being made is for an app\n   * prefetch request.\n   */ const isPrefetchRSCRequest = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'isPrefetchRSCRequest') ?? req.headers[next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.NEXT_ROUTER_PREFETCH_HEADER] === '1' // exclude runtime prefetches, which use '2'\n    ;\n    // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n    const isRSCRequest = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'isRSCRequest') ?? Boolean(req.headers[next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.RSC_HEADER]);\n    const isPossibleServerAction = (0,next_dist_server_lib_server_action_request_meta__WEBPACK_IMPORTED_MODULE_15__.getIsPossibleServerAction)(req);\n    /**\n   * If the route being rendered is an app page, and the ppr feature has been\n   * enabled, then the given route _could_ support PPR.\n   */ const couldSupportPPR = (0,next_dist_server_lib_experimental_ppr__WEBPACK_IMPORTED_MODULE_9__.checkIsAppPPREnabled)(nextConfig.experimental.ppr);\n    // When enabled, this will allow the use of the `?__nextppronly` query to\n    // enable debugging of the static shell.\n    const hasDebugStaticShellQuery =  false && 0;\n    // When enabled, this will allow the use of the `?__nextppronly` query\n    // to enable debugging of the fallback shell.\n    const hasDebugFallbackShellQuery = hasDebugStaticShellQuery && query.__nextppronly === 'fallback';\n    // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n    // prerender manifest and this is an app page.\n    const isRoutePPREnabled = couldSupportPPR && (((_this = prerenderManifest.routes[normalizedSrcPage] ?? prerenderManifest.dynamicRoutes[normalizedSrcPage]) == null ? void 0 : _this.renderingMode) === 'PARTIALLY_STATIC' || // Ideally we'd want to check the appConfig to see if this page has PPR\n    // enabled or not, but that would require plumbing the appConfig through\n    // to the server during development. We assume that the page supports it\n    // but only during development.\n    hasDebugStaticShellQuery && (routeModule.isDev === true || (routerServerContext == null ? void 0 : routerServerContext.experimentalTestProxy) === true));\n    const isDebugStaticShell = hasDebugStaticShellQuery && isRoutePPREnabled;\n    // We should enable debugging dynamic accesses when the static shell\n    // debugging has been enabled and we're also in development mode.\n    const isDebugDynamicAccesses = isDebugStaticShell && routeModule.isDev === true;\n    const isDebugFallbackShell = hasDebugFallbackShellQuery && isRoutePPREnabled;\n    // If we're in minimal mode, then try to get the postponed information from\n    // the request metadata. If available, use it for resuming the postponed\n    // render.\n    const minimalPostponed = isRoutePPREnabled ? initialPostponed : undefined;\n    // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n    // we can use this fact to only generate the flight data for the request\n    // because we can't cache the HTML (as it's also dynamic).\n    const isDynamicRSCRequest = isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest;\n    // Need to read this before it's stripped by stripFlightHeaders. We don't\n    // need to transfer it to the request meta because it's only read\n    // within this function; the static segment data should have already been\n    // generated, so we will always either return a static response or a 404.\n    const segmentPrefetchHeader = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'segmentPrefetchRSCRequest');\n    // TODO: investigate existing bug with shouldServeStreamingMetadata always\n    // being true for a revalidate due to modifying the base-server this.renderOpts\n    // when fixing this to correct logic it causes hydration issue since we set\n    // serveStreamingMetadata to true during export\n    let serveStreamingMetadata = !userAgent ? true : (0,next_dist_server_lib_streaming_metadata__WEBPACK_IMPORTED_MODULE_12__.shouldServeStreamingMetadata)(userAgent, nextConfig.htmlLimitedBots);\n    if (isHtmlBot && isRoutePPREnabled) {\n        isSSG = false;\n        serveStreamingMetadata = false;\n    }\n    // In development, we always want to generate dynamic HTML.\n    let supportsDynamicResponse = // If we're in development, we always support dynamic HTML, unless it's\n    // a data request, in which case we only produce static HTML.\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isSSG || // If this request has provided postponed data, it supports dynamic\n    // HTML.\n    typeof initialPostponed === 'string' || // If this is a dynamic RSC request, then this render supports dynamic\n    // HTML (it's dynamic).\n    isDynamicRSCRequest;\n    // When html bots request PPR page, perform the full dynamic rendering.\n    const shouldWaitOnAllReady = isHtmlBot && isRoutePPREnabled;\n    let ssgCacheKey = null;\n    if (!isDraftMode && isSSG && !supportsDynamicResponse && !isPossibleServerAction && !minimalPostponed && !isDynamicRSCRequest) {\n        ssgCacheKey = resolvedPathname;\n    }\n    // the staticPathKey differs from ssgCacheKey since\n    // ssgCacheKey is null in dev since we're always in \"dynamic\"\n    // mode in dev to bypass the cache, but we still need to honor\n    // dynamicParams = false in dev mode\n    let staticPathKey = ssgCacheKey;\n    if (!staticPathKey && routeModule.isDev) {\n        staticPathKey = resolvedPathname;\n    }\n    // If this is a request for an app path that should be statically generated\n    // and we aren't in the edge runtime, strip the flight headers so it will\n    // generate the static response.\n    if (!routeModule.isDev && !isDraftMode && isSSG && isRSCRequest && !isDynamicRSCRequest) {\n        (0,next_dist_server_app_render_strip_flight_headers__WEBPACK_IMPORTED_MODULE_7__.stripFlightHeaders)(req.headers);\n    }\n    const ComponentMod = {\n        ...next_dist_server_app_render_entry_base__WEBPACK_IMPORTED_MODULE_26__,\n        tree,\n        pages,\n        GlobalError: (next_dist_client_components_builtin_global_error_js__WEBPACK_IMPORTED_MODULE_25___default()),\n        handler,\n        routeModule,\n        __next_app__\n    };\n    // Before rendering (which initializes component tree modules), we have to\n    // set the reference manifests to our global store so Server Action's\n    // encryption util can access to them at the top level of the page module.\n    if (serverActionsManifest && clientReferenceManifest) {\n        (0,next_dist_server_app_render_encryption_utils__WEBPACK_IMPORTED_MODULE_11__.setReferenceManifestsSingleton)({\n            page: srcPage,\n            clientReferenceManifest,\n            serverActionsManifest,\n            serverModuleMap: (0,next_dist_server_app_render_action_utils__WEBPACK_IMPORTED_MODULE_13__.createServerModuleMap)({\n                serverActionsManifest\n            })\n        });\n    }\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    try {\n        const varyHeader = routeModule.getVaryHeader(resolvedPathname, interceptionRoutePatterns);\n        res.setHeader('Vary', varyHeader);\n        const invokeRouteModule = async (span, context)=>{\n            const nextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_8__.NodeNextRequest(req);\n            const nextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_8__.NodeNextResponse(res);\n            // TODO: adapt for putting the RDC inside the postponed data\n            // If we're in dev, and this isn't a prefetch or a server action,\n            // we should seed the resume data cache.\n            if (true) {\n                if (nextConfig.experimental.cacheComponents && !isPrefetchRSCRequest && !context.renderOpts.isPossibleServerAction) {\n                    const warmup = await routeModule.warmup(nextReq, nextRes, context);\n                    // If the warmup is successful, we should use the resume data\n                    // cache from the warmup.\n                    if (warmup.metadata.renderResumeDataCache) {\n                        context.renderOpts.renderResumeDataCache = warmup.metadata.renderResumeDataCache;\n                    }\n                }\n            }\n            return routeModule.render(nextReq, nextRes, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const doRender = async ({ span, postponed, fallbackRouteParams })=>{\n            const context = {\n                query,\n                params,\n                page: normalizedSrcPage,\n                sharedContext: {\n                    buildId\n                },\n                serverComponentsHmrCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'serverComponentsHmrCache'),\n                fallbackRouteParams,\n                renderOpts: {\n                    App: ()=>null,\n                    Document: ()=>null,\n                    pageConfig: {},\n                    ComponentMod,\n                    Component: (0,next_dist_server_app_render_interop_default__WEBPACK_IMPORTED_MODULE_6__.interopDefault)(ComponentMod),\n                    params,\n                    routeModule,\n                    page: srcPage,\n                    postponed,\n                    shouldWaitOnAllReady,\n                    serveStreamingMetadata,\n                    supportsDynamicResponse: typeof postponed === 'string' || supportsDynamicResponse,\n                    buildManifest,\n                    nextFontManifest,\n                    reactLoadableManifest,\n                    subresourceIntegrityManifest,\n                    serverActionsManifest,\n                    clientReferenceManifest,\n                    setIsrStatus: routerServerContext == null ? void 0 : routerServerContext.setIsrStatus,\n                    dir:  true ? (__webpack_require__(/*! path */ \"path\").join)(/* turbopackIgnore: true */ process.cwd(), routeModule.relativeProjectDir) : 0,\n                    isDraftMode,\n                    isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n                    botType,\n                    isOnDemandRevalidate,\n                    isPossibleServerAction,\n                    assetPrefix: nextConfig.assetPrefix,\n                    nextConfigOutput: nextConfig.output,\n                    crossOrigin: nextConfig.crossOrigin,\n                    trailingSlash: nextConfig.trailingSlash,\n                    previewProps: prerenderManifest.preview,\n                    deploymentId: nextConfig.deploymentId,\n                    enableTainting: nextConfig.experimental.taint,\n                    htmlLimitedBots: nextConfig.htmlLimitedBots,\n                    devtoolSegmentExplorer: nextConfig.experimental.devtoolSegmentExplorer,\n                    reactMaxHeadersLength: nextConfig.reactMaxHeadersLength,\n                    multiZoneDraftMode,\n                    incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'incrementalCache'),\n                    cacheLifeProfiles: nextConfig.experimental.cacheLife,\n                    basePath: nextConfig.basePath,\n                    serverActions: nextConfig.experimental.serverActions,\n                    ...isDebugStaticShell || isDebugDynamicAccesses ? {\n                        nextExport: true,\n                        supportsDynamicResponse: false,\n                        isStaticGeneration: true,\n                        isRevalidate: true,\n                        isDebugDynamicAccesses: isDebugDynamicAccesses\n                    } : {},\n                    experimental: {\n                        isRoutePPREnabled,\n                        expireTime: nextConfig.expireTime,\n                        staleTimes: nextConfig.experimental.staleTimes,\n                        cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                        clientSegmentCache: Boolean(nextConfig.experimental.clientSegmentCache),\n                        clientParamParsing: Boolean(nextConfig.experimental.clientParamParsing),\n                        dynamicOnHover: Boolean(nextConfig.experimental.dynamicOnHover),\n                        inlineCss: Boolean(nextConfig.experimental.inlineCss),\n                        authInterrupts: Boolean(nextConfig.experimental.authInterrupts),\n                        clientTraceMetadata: nextConfig.experimental.clientTraceMetadata || []\n                    },\n                    waitUntil: ctx.waitUntil,\n                    onClose: (cb)=>{\n                        res.on('close', cb);\n                    },\n                    onAfterTaskError: ()=>{},\n                    onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext),\n                    err: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'invokeError'),\n                    dev: routeModule.isDev\n                }\n            };\n            const result = await invokeRouteModule(span, context);\n            const { metadata } = result;\n            const { cacheControl, headers = {}, // Add any fetch tags that were on the page to the response headers.\n            fetchTags: cacheTags } = metadata;\n            if (cacheTags) {\n                headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n            }\n            // Pull any fetch metrics from the render onto the request.\n            ;\n            req.fetchMetrics = metadata.fetchMetrics;\n            // we don't throw static to dynamic errors in dev as isSSG\n            // is a best guess in dev since we don't have the prerender pass\n            // to know whether the path is actually static or not\n            if (isSSG && (cacheControl == null ? void 0 : cacheControl.revalidate) === 0 && !routeModule.isDev && !isRoutePPREnabled) {\n                const staticBailoutInfo = metadata.staticBailoutInfo;\n                const err = Object.defineProperty(new Error(`Page changed from static to dynamic at runtime ${resolvedPathname}${(staticBailoutInfo == null ? void 0 : staticBailoutInfo.description) ? `, reason: ${staticBailoutInfo.description}` : ``}` + `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E132\",\n                    enumerable: false,\n                    configurable: true\n                });\n                if (staticBailoutInfo == null ? void 0 : staticBailoutInfo.stack) {\n                    const stack = staticBailoutInfo.stack;\n                    err.stack = err.message + stack.substring(stack.indexOf('\\n'));\n                }\n                throw err;\n            }\n            return {\n                value: {\n                    kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__.CachedRouteKind.APP_PAGE,\n                    html: result,\n                    headers,\n                    rscData: metadata.flightData,\n                    postponed: metadata.postponed,\n                    status: metadata.statusCode,\n                    segmentData: metadata.segmentData\n                },\n                cacheControl\n            };\n        };\n        const responseGenerator = async ({ hasResolved, previousCacheEntry, isRevalidating, span })=>{\n            const isProduction = routeModule.isDev === false;\n            const didRespond = hasResolved || res.writableEnded;\n            // skip on-demand revalidate if cache is not present and\n            // revalidate-if-generated is set\n            if (isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry && !minimalMode) {\n                if (routerServerContext == null ? void 0 : routerServerContext.render404) {\n                    await routerServerContext.render404(req, res);\n                } else {\n                    res.statusCode = 404;\n                    res.end('This page could not be found');\n                }\n                return null;\n            }\n            let fallbackMode;\n            if (prerenderInfo) {\n                fallbackMode = (0,next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.parseFallbackField)(prerenderInfo.fallback);\n            }\n            // When serving a HTML bot request, we want to serve a blocking render and\n            // not the prerendered page. This ensures that the correct content is served\n            // to the bot in the head.\n            if (fallbackMode === next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.PRERENDER && (0,next_dist_shared_lib_router_utils_is_bot__WEBPACK_IMPORTED_MODULE_17__.isBot)(userAgent)) {\n                if (!isRoutePPREnabled || isHtmlBot) {\n                    fallbackMode = next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.BLOCKING_STATIC_RENDER;\n                }\n            }\n            if ((previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) === -1) {\n                isOnDemandRevalidate = true;\n            }\n            // TODO: adapt for PPR\n            // only allow on-demand revalidate for fallback: true/blocking\n            // or for prerendered fallback: false paths\n            if (isOnDemandRevalidate && (fallbackMode !== next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.NOT_FOUND || previousCacheEntry)) {\n                fallbackMode = next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.BLOCKING_STATIC_RENDER;\n            }\n            if (!minimalMode && fallbackMode !== next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.BLOCKING_STATIC_RENDER && staticPathKey && !didRespond && !isDraftMode && pageIsDynamic && (isProduction || !isPrerendered)) {\n                // if the page has dynamicParams: false and this pathname wasn't\n                // prerendered trigger the no fallback handling\n                if (// In development, fall through to render to handle missing\n                // getStaticPaths.\n                (isProduction || prerenderInfo) && // When fallback isn't present, abort this render so we 404\n                fallbackMode === next_dist_lib_fallback__WEBPACK_IMPORTED_MODULE_19__.FallbackMode.NOT_FOUND) {\n                    throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_24__.NoFallbackError();\n                }\n                let fallbackResponse;\n                if (isRoutePPREnabled && !isRSCRequest) {\n                    const cacheKey = typeof (prerenderInfo == null ? void 0 : prerenderInfo.fallback) === 'string' ? prerenderInfo.fallback : isProduction ? normalizedSrcPage : null;\n                    // We use the response cache here to handle the revalidation and\n                    // management of the fallback shell.\n                    fallbackResponse = await routeModule.handleResponse({\n                        cacheKey,\n                        req,\n                        nextConfig,\n                        routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n                        isFallback: true,\n                        prerenderManifest,\n                        isRoutePPREnabled,\n                        responseGenerator: async ()=>doRender({\n                                span,\n                                // We pass `undefined` as rendering a fallback isn't resumed\n                                // here.\n                                postponed: undefined,\n                                fallbackRouteParams: // If we're in production or we're debugging the fallback\n                                // shell then we should postpone when dynamic params are\n                                // accessed.\n                                isProduction || isDebugFallbackShell ? (0,next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_10__.getFallbackRouteParams)(normalizedSrcPage) : null\n                            }),\n                        waitUntil: ctx.waitUntil\n                    });\n                    // If the fallback response was set to null, then we should return null.\n                    if (fallbackResponse === null) return null;\n                    // Otherwise, if we did get a fallback response, we should return it.\n                    if (fallbackResponse) {\n                        // Remove the cache control from the response to prevent it from being\n                        // used in the surrounding cache.\n                        delete fallbackResponse.cacheControl;\n                        return fallbackResponse;\n                    }\n                }\n            }\n            // Only requests that aren't revalidating can be resumed. If we have the\n            // minimal postponed data, then we should resume the render with it.\n            const postponed = !isOnDemandRevalidate && !isRevalidating && minimalPostponed ? minimalPostponed : undefined;\n            // When we're in minimal mode, if we're trying to debug the static shell,\n            // we should just return nothing instead of resuming the dynamic render.\n            if ((isDebugStaticShell || isDebugDynamicAccesses) && typeof postponed !== 'undefined') {\n                return {\n                    cacheControl: {\n                        revalidate: 1,\n                        expire: undefined\n                    },\n                    value: {\n                        kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__.CachedRouteKind.PAGES,\n                        html: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_20__[\"default\"].EMPTY,\n                        pageData: {},\n                        headers: undefined,\n                        status: undefined\n                    }\n                };\n            }\n            // If this is a dynamic route with PPR enabled and the default route\n            // matches were set, then we should pass the fallback route params to\n            // the renderer as this is a fallback revalidation request.\n            const fallbackRouteParams = pageIsDynamic && isRoutePPREnabled && ((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'renderFallbackShell') || isDebugFallbackShell) ? (0,next_dist_server_request_fallback_params__WEBPACK_IMPORTED_MODULE_10__.getFallbackRouteParams)(pathname) : null;\n            // Perform the render.\n            return doRender({\n                span,\n                postponed,\n                fallbackRouteParams\n            });\n        };\n        const handleResponse = async (span)=>{\n            var _cacheEntry_value, _cachedData_headers;\n            const cacheEntry = await routeModule.handleResponse({\n                cacheKey: ssgCacheKey,\n                responseGenerator: (c)=>responseGenerator({\n                        span,\n                        ...c\n                    }),\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_PAGE,\n                isOnDemandRevalidate,\n                isRoutePPREnabled,\n                req,\n                nextConfig,\n                prerenderManifest,\n                waitUntil: ctx.waitUntil\n            });\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            // In dev, we should not cache pages for any reason.\n            if (routeModule.isDev) {\n                res.setHeader('Cache-Control', 'no-store, must-revalidate');\n            }\n            if (!cacheEntry) {\n                if (ssgCacheKey) {\n                    // A cache entry might not be generated if a response is written\n                    // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n                    // have a cache key. If we do have a cache key but we don't end up\n                    // with a cache entry, then either Next.js or the application has a\n                    // bug that needs fixing.\n                    throw Object.defineProperty(new Error('invariant: cache entry required but not generated'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E62\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                return null;\n            }\n            if (((_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__.CachedRouteKind.APP_PAGE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant app-page handler received invalid cache entry ${(_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E707\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const didPostpone = typeof cacheEntry.value.postponed === 'string';\n            if (isSSG && // We don't want to send a cache header for requests that contain dynamic\n            // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n            // request, then we should set the cache header.\n            !isDynamicRSCRequest && (!didPostpone || isPrefetchRSCRequest)) {\n                if (!minimalMode) {\n                    // set x-nextjs-cache header to match the header\n                    // we set for the image-optimizer\n                    res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n                }\n                // Set a header used by the client router to signal the response is static\n                // and should respect the `static` cache staleTime value.\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.NEXT_IS_PRERENDER_HEADER, '1');\n            }\n            const { value: cachedData } = cacheEntry;\n            // Coerce the cache control parameter from the render.\n            let cacheControl;\n            // If this is a resume request in minimal mode it is streamed with dynamic\n            // content and should not be cached.\n            if (minimalPostponed) {\n                cacheControl = {\n                    revalidate: 0,\n                    expire: undefined\n                };\n            } else if (minimalMode && isRSCRequest && !isPrefetchRSCRequest && isRoutePPREnabled) {\n                cacheControl = {\n                    revalidate: 0,\n                    expire: undefined\n                };\n            } else if (!routeModule.isDev) {\n                // If this is a preview mode request, we shouldn't cache it\n                if (isDraftMode) {\n                    cacheControl = {\n                        revalidate: 0,\n                        expire: undefined\n                    };\n                } else if (!isSSG) {\n                    if (!res.getHeader('Cache-Control')) {\n                        cacheControl = {\n                            revalidate: 0,\n                            expire: undefined\n                        };\n                    }\n                } else if (cacheEntry.cacheControl) {\n                    // If the cache entry has a cache control with a revalidate value that's\n                    // a number, use it.\n                    if (typeof cacheEntry.cacheControl.revalidate === 'number') {\n                        var _cacheEntry_cacheControl;\n                        if (cacheEntry.cacheControl.revalidate < 1) {\n                            throw Object.defineProperty(new Error(`Invalid revalidate configuration provided: ${cacheEntry.cacheControl.revalidate} < 1`), \"__NEXT_ERROR_CODE\", {\n                                value: \"E22\",\n                                enumerable: false,\n                                configurable: true\n                            });\n                        }\n                        cacheControl = {\n                            revalidate: cacheEntry.cacheControl.revalidate,\n                            expire: ((_cacheEntry_cacheControl = cacheEntry.cacheControl) == null ? void 0 : _cacheEntry_cacheControl.expire) ?? nextConfig.expireTime\n                        };\n                    } else {\n                        cacheControl = {\n                            revalidate: next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.CACHE_ONE_YEAR,\n                            expire: undefined\n                        };\n                    }\n                }\n            }\n            cacheEntry.cacheControl = cacheControl;\n            if (typeof segmentPrefetchHeader === 'string' && (cachedData == null ? void 0 : cachedData.kind) === next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__.CachedRouteKind.APP_PAGE && cachedData.segmentData) {\n                var _cachedData_headers1;\n                // This is a prefetch request issued by the client Segment Cache. These\n                // should never reach the application layer (lambda). We should either\n                // respond from the cache (HIT) or respond with 204 No Content (MISS).\n                // Set a header to indicate that PPR is enabled for this route. This\n                // lets the client distinguish between a regular cache miss and a cache\n                // miss due to PPR being disabled. In other contexts this header is used\n                // to indicate that the response contains dynamic data, but here we're\n                // only using it to indicate that the feature is enabled — the segment\n                // response itself contains whether the data is dynamic.\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.NEXT_DID_POSTPONE_HEADER, '2');\n                // Add the cache tags header to the response if it exists and we're in\n                // minimal mode while rendering a static page.\n                const tags = (_cachedData_headers1 = cachedData.headers) == null ? void 0 : _cachedData_headers1[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER];\n                if (minimalMode && isSSG && tags && typeof tags === 'string') {\n                    res.setHeader(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER, tags);\n                }\n                const matchedSegment = cachedData.segmentData.get(segmentPrefetchHeader);\n                if (matchedSegment !== undefined) {\n                    // Cache hit\n                    return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                        req,\n                        res,\n                        generateEtags: nextConfig.generateEtags,\n                        poweredByHeader: nextConfig.poweredByHeader,\n                        result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_20__[\"default\"].fromStatic(matchedSegment, next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.RSC_CONTENT_TYPE_HEADER),\n                        cacheControl: cacheEntry.cacheControl\n                    });\n                }\n                // Cache miss. Either a cache entry for this route has not been generated\n                // (which technically should not be possible when PPR is enabled, because\n                // at a minimum there should always be a fallback entry) or there's no\n                // match for the requested segment. Respond with a 204 No Content. We\n                // don't bother to respond with 404, because these requests are only\n                // issued as part of a prefetch.\n                res.statusCode = 204;\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                    req,\n                    res,\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_20__[\"default\"].EMPTY,\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // If there's a callback for `onCacheEntry`, call it with the cache entry\n            // and the revalidate options.\n            const onCacheEntry = (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'onCacheEntry');\n            if (onCacheEntry) {\n                const finished = await onCacheEntry({\n                    ...cacheEntry,\n                    // TODO: remove this when upstream doesn't\n                    // always expect this value to be \"PAGE\"\n                    value: {\n                        ...cacheEntry.value,\n                        kind: 'PAGE'\n                    }\n                }, {\n                    url: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_4__.getRequestMeta)(req, 'initURL')\n                });\n                if (finished) {\n                    // TODO: maybe we have to end the request?\n                    return null;\n                }\n            }\n            // If the request has a postponed state and it's a resume request we\n            // should error.\n            if (didPostpone && minimalPostponed) {\n                throw Object.defineProperty(new Error('Invariant: postponed state should not be present on a resume request'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E396\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (cachedData.headers) {\n                const headers = {\n                    ...cachedData.headers\n                };\n                if (!minimalMode || !isSSG) {\n                    delete headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER];\n                }\n                for (let [key, value] of Object.entries(headers)){\n                    if (typeof value === 'undefined') continue;\n                    if (Array.isArray(value)) {\n                        for (const v of value){\n                            res.appendHeader(key, v);\n                        }\n                    } else if (typeof value === 'number') {\n                        value = value.toString();\n                        res.appendHeader(key, value);\n                    } else {\n                        res.appendHeader(key, value);\n                    }\n                }\n            }\n            // Add the cache tags header to the response if it exists and we're in\n            // minimal mode while rendering a static page.\n            const tags = (_cachedData_headers = cachedData.headers) == null ? void 0 : _cachedData_headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER];\n            if (minimalMode && isSSG && tags && typeof tags === 'string') {\n                res.setHeader(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_21__.NEXT_CACHE_TAGS_HEADER, tags);\n            }\n            // If the request is a data request, then we shouldn't set the status code\n            // from the response because it should always be 200. This should be gated\n            // behind the experimental PPR flag.\n            if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n                res.statusCode = cachedData.status;\n            }\n            // Redirect information is encoded in RSC payload, so we don't need to use redirect status codes\n            if (!minimalMode && cachedData.status && next_dist_client_components_redirect_status_code__WEBPACK_IMPORTED_MODULE_27__.RedirectStatusCode[cachedData.status] && isRSCRequest) {\n                res.statusCode = 200;\n            }\n            // Mark that the request did postpone.\n            if (didPostpone) {\n                res.setHeader(next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.NEXT_DID_POSTPONE_HEADER, '1');\n            }\n            // we don't go through this block when preview mode is true\n            // as preview mode is a dynamic request (bypasses cache) and doesn't\n            // generate both HTML and payloads in the same request so continue to just\n            // return the generated payload\n            if (isRSCRequest && !isDraftMode) {\n                // If this is a dynamic RSC request, then stream the response.\n                if (typeof cachedData.rscData === 'undefined') {\n                    if (cachedData.postponed) {\n                        throw Object.defineProperty(new Error('Invariant: Expected postponed to be undefined'), \"__NEXT_ERROR_CODE\", {\n                            value: \"E372\",\n                            enumerable: false,\n                            configurable: true\n                        });\n                    }\n                    return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                        req,\n                        res,\n                        generateEtags: nextConfig.generateEtags,\n                        poweredByHeader: nextConfig.poweredByHeader,\n                        result: cachedData.html,\n                        // Dynamic RSC responses cannot be cached, even if they're\n                        // configured with `force-static` because we have no way of\n                        // distinguishing between `force-static` and pages that have no\n                        // postponed state.\n                        // TODO: distinguish `force-static` from pages with no postponed state (static)\n                        cacheControl: isDynamicRSCRequest ? {\n                            revalidate: 0,\n                            expire: undefined\n                        } : cacheEntry.cacheControl\n                    });\n                }\n                // As this isn't a prefetch request, we should serve the static flight\n                // data.\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                    req,\n                    res,\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: next_dist_server_render_result__WEBPACK_IMPORTED_MODULE_20__[\"default\"].fromStatic(cachedData.rscData, next_dist_client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_16__.RSC_CONTENT_TYPE_HEADER),\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // This is a request for HTML data.\n            let body = cachedData.html;\n            // If there's no postponed state, we should just serve the HTML. This\n            // should also be the case for a resume request because it's completed\n            // as a server render (rather than a static render).\n            if (!didPostpone || minimalMode || isRSCRequest) {\n                // If we're in test mode, we should add a sentinel chunk to the response\n                // that's between the static and dynamic parts so we can compare the\n                // chunks and add assertions.\n                if (false) {}\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                    req,\n                    res,\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: body,\n                    cacheControl: cacheEntry.cacheControl\n                });\n            }\n            // If we're debugging the static shell or the dynamic API accesses, we\n            // should just serve the HTML without resuming the render. The returned\n            // HTML will be the static shell so all the Dynamic API's will be used\n            // during static generation.\n            if (isDebugStaticShell || isDebugDynamicAccesses) {\n                // Since we're not resuming the render, we need to at least add the\n                // closing body and html tags to create valid HTML.\n                body.push(new ReadableStream({\n                    start (controller) {\n                        controller.enqueue(next_dist_server_stream_utils_encoded_tags__WEBPACK_IMPORTED_MODULE_22__.ENCODED_TAGS.CLOSED.BODY_AND_HTML);\n                        controller.close();\n                    }\n                }));\n                return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                    req,\n                    res,\n                    generateEtags: nextConfig.generateEtags,\n                    poweredByHeader: nextConfig.poweredByHeader,\n                    result: body,\n                    cacheControl: {\n                        revalidate: 0,\n                        expire: undefined\n                    }\n                });\n            }\n            // If we're in test mode, we should add a sentinel chunk to the response\n            // that's between the static and dynamic parts so we can compare the\n            // chunks and add assertions.\n            if (false) {}\n            // This request has postponed, so let's create a new transformer that the\n            // dynamic data can pipe to that will attach the dynamic data to the end\n            // of the response.\n            const transformer = new TransformStream();\n            body.push(transformer.readable);\n            // Perform the render again, but this time, provide the postponed state.\n            // We don't await because we want the result to start streaming now, and\n            // we've already chained the transformer's readable to the render result.\n            doRender({\n                span,\n                postponed: cachedData.postponed,\n                // This is a resume render, not a fallback render, so we don't need to\n                // set this.\n                fallbackRouteParams: null\n            }).then(async (result)=>{\n                var _result_value;\n                if (!result) {\n                    throw Object.defineProperty(new Error('Invariant: expected a result to be returned'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E463\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (((_result_value = result.value) == null ? void 0 : _result_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_18__.CachedRouteKind.APP_PAGE) {\n                    var _result_value1;\n                    throw Object.defineProperty(new Error(`Invariant: expected a page response, got ${(_result_value1 = result.value) == null ? void 0 : _result_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E305\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // Pipe the resume result to the transformer.\n                await result.value.html.pipeTo(transformer.writable);\n            }).catch((err)=>{\n                // An error occurred during piping or preparing the render, abort\n                // the transformers writer so we can terminate the stream.\n                transformer.writable.abort(err).catch((e)=>{\n                    console.error(\"couldn't abort transformer\", e);\n                });\n            });\n            return (0,next_dist_server_send_payload__WEBPACK_IMPORTED_MODULE_23__.sendRenderResult)({\n                req,\n                res,\n                generateEtags: nextConfig.generateEtags,\n                poweredByHeader: nextConfig.poweredByHeader,\n                result: body,\n                // We don't want to cache the response if it has postponed data because\n                // the response being sent to the client it's dynamic parts are streamed\n                // to the client on the same request.\n                cacheControl: {\n                    revalidate: 0,\n                    expire: undefined\n                }\n            });\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            return await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_5__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_3__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_24__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: srcPage,\n                routeType: 'render',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_2__.getRevalidateReason)({\n                    isRevalidate: isSSG,\n                    isOnDemandRevalidate\n                })\n            }, routerServerContext);\n        }\n        // rethrow so that we can handle serving error page\n        throw err;\n    }\n}\n// TODO: omit this from production builds, only test builds should include it\n/**\n * Creates a readable stream that emits a PPR boundary sentinel.\n *\n * @returns A readable stream that emits a PPR boundary sentinel.\n */ function createPPRBoundarySentinel() {\n    return new ReadableStream({\n        start (controller) {\n            controller.enqueue(new TextEncoder().encode('<!-- PPR_BOUNDARY_SENTINEL -->'));\n            controller.close();\n        }\n    });\n}\n\n//# sourceMappingURL=app-page.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/builtin/global-error.js */ \"(rsc)/../../node_modules/next/dist/client/components/builtin/global-error.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/client-page.js */ \"(rsc)/../../node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/client-segment.js */ \"(rsc)/../../node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(rsc)/../../node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/layout-router.js */ \"(rsc)/../../node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(rsc)/../../node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/render-from-template-context.js */ \"(rsc)/../../node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/lib/framework/boundary-components.js */ \"(rsc)/../../node_modules/next/dist/lib/framework/boundary-components.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/lib/metadata/generate/icon-mark.js */ \"(rsc)/../../node_modules/next/dist/lib/metadata/generate/icon-mark.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js */ \"(rsc)/../../node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZidWlsdGluJTJGZ2xvYmFsLWVycm9yLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmNsaWVudC1wYWdlLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmNsaWVudC1zZWdtZW50LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmh0dHAtYWNjZXNzLWZhbGxiYWNrJTJGZXJyb3ItYm91bmRhcnkuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ0cm95c2FtdWVscyUyRlNDSEVOR0VOJTIwVklTQSUyMENBTENVTEFUT1IlMkZzY2hlbmdlbnZpc2FjYWxjdWxhdG9yJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGbGF5b3V0LXJvdXRlci5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRmFzeW5jLW1ldGFkYXRhLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRnJlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ0cm95c2FtdWVscyUyRlNDSEVOR0VOJTIwVklTQSUyMENBTENVTEFUT1IlMkZzY2hlbmdlbnZpc2FjYWxjdWxhdG9yJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZsaWIlMkZmcmFtZXdvcmslMkZib3VuZGFyeS1jb21wb25lbnRzLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGbGliJTJGbWV0YWRhdGElMkZnZW5lcmF0ZSUyRmljb24tbWFyay5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRm5leHQtZGV2dG9vbHMlMkZ1c2Vyc3BhY2UlMkZhcHAlMkZzZWdtZW50LWV4cGxvcmVyLW5vZGUuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPXRydWUhIiwibWFwcGluZ3MiOiJBQUFBLDhQQUF3SztBQUN4SztBQUNBLDRPQUErSjtBQUMvSjtBQUNBLGtQQUFrSztBQUNsSztBQUNBLDRSQUF1TDtBQUN2TDtBQUNBLGdQQUFpSztBQUNqSztBQUNBLG9RQUEySztBQUMzSztBQUNBLDhRQUFnTDtBQUNoTDtBQUNBLG9QQUFtSztBQUNuSztBQUNBLGdQQUFpSztBQUNqSztBQUNBLG9SQUFtTCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvYnVpbHRpbi9nbG9iYWwtZXJyb3IuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2NsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9jbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaHR0cC1hY2Nlc3MtZmFsbGJhY2svZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2xheW91dC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL21ldGFkYXRhL2FzeW5jLW1ldGFkYXRhLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvZnJhbWV3b3JrL2JvdW5kYXJ5LWNvbXBvbmVudHMuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9tZXRhZGF0YS9nZW5lcmF0ZS9pY29uLW1hcmsuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtZGV2dG9vbHMvdXNlcnNwYWNlL2FwcC9zZWdtZW50LWV4cGxvcmVyLW5vZGUuanNcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(rsc)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZwYWNrYWdlcyUyRmFwcCUyRnNyYyUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxnSkFBcUkiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9wYWNrYWdlcy9hcHAvc3JjL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/layout.js":
/*!***************************!*\
  !*** ./src/app/layout.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RootLayout),\n/* harmony export */   metadata: () => (/* binding */ metadata)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\nconst metadata = {\n    title: 'Next.js',\n    description: 'Generated by Next.js'\n};\nfunction RootLayout({ children }) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"html\", {\n        lang: \"en\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"body\", {\n            children: children\n        }, void 0, false, {\n            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/layout.js\",\n            lineNumber: 9,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/layout.js\",\n        lineNumber: 8,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2xheW91dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLE1BQU1BLFdBQVc7SUFDdEJDLE9BQU87SUFDUEMsYUFBYTtBQUNmLEVBQUM7QUFFYyxTQUFTQyxXQUFXLEVBQUVDLFFBQVEsRUFBRTtJQUM3QyxxQkFDRSw4REFBQ0M7UUFBS0MsTUFBSztrQkFDVCw0RUFBQ0M7c0JBQU1IOzs7Ozs7Ozs7OztBQUdiIiwic291cmNlcyI6WyIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3IvcGFja2FnZXMvYXBwL3NyYy9hcHAvbGF5b3V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBtZXRhZGF0YSA9IHtcbiAgdGl0bGU6ICdOZXh0LmpzJyxcbiAgZGVzY3JpcHRpb246ICdHZW5lcmF0ZWQgYnkgTmV4dC5qcycsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvb3RMYXlvdXQoeyBjaGlsZHJlbiB9KSB7XG4gIHJldHVybiAoXG4gICAgPGh0bWwgbGFuZz1cImVuXCI+XG4gICAgICA8Ym9keT57Y2hpbGRyZW59PC9ib2R5PlxuICAgIDwvaHRtbD5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIm1ldGFkYXRhIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIlJvb3RMYXlvdXQiLCJjaGlsZHJlbiIsImh0bWwiLCJsYW5nIiwiYm9keSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/layout.js\n");

/***/ }),

/***/ "(rsc)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-server-dom-webpack/server */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-page/vendored/rsc/react-server-dom-webpack-server.js\");\n/* harmony import */ var react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__);\n// This file is generated by the Webpack next-flight-loader.\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,react_server_dom_webpack_server__WEBPACK_IMPORTED_MODULE_0__.registerClientReference)(\nfunction() { throw new Error(\"Attempted to call the default export of \\\"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\\\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n\"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n\"default\",\n));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL3BhZ2UudHN4IiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBIiwic291cmNlcyI6WyJfTl9FLy4vc3JjL2FwcC9wYWdlLnRzeC9fX25leHRqcy1pbnRlcm5hbC1wcm94eS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSB0aGUgV2VicGFjayBuZXh0LWZsaWdodC1sb2FkZXIuXG5pbXBvcnQgeyByZWdpc3RlckNsaWVudFJlZmVyZW5jZSB9IGZyb20gXCJyZWFjdC1zZXJ2ZXItZG9tLXdlYnBhY2svc2VydmVyXCI7XG5leHBvcnQgZGVmYXVsdCByZWdpc3RlckNsaWVudFJlZmVyZW5jZShcbmZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJBdHRlbXB0ZWQgdG8gY2FsbCB0aGUgZGVmYXVsdCBleHBvcnQgb2YgXFxcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9wYWNrYWdlcy9hcHAvc3JjL2FwcC9wYWdlLnRzeFxcXCIgZnJvbSB0aGUgc2VydmVyLCBidXQgaXQncyBvbiB0aGUgY2xpZW50LiBJdCdzIG5vdCBwb3NzaWJsZSB0byBpbnZva2UgYSBjbGllbnQgZnVuY3Rpb24gZnJvbSB0aGUgc2VydmVyLCBpdCBjYW4gb25seSBiZSByZW5kZXJlZCBhcyBhIENvbXBvbmVudCBvciBwYXNzZWQgdG8gcHJvcHMgb2YgYSBDbGllbnQgQ29tcG9uZW50LlwiKTsgfSxcblwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL3BhY2thZ2VzL2FwcC9zcmMvYXBwL3BhZ2UudHN4XCIsXG5cImRlZmF1bHRcIixcbik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/page.tsx\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!

/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/builtin/global-error.js */ \"(ssr)/../../node_modules/next/dist/client/components/builtin/global-error.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/client-page.js */ \"(ssr)/../../node_modules/next/dist/client/components/client-page.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/client-segment.js */ \"(ssr)/../../node_modules/next/dist/client/components/client-segment.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/http-access-fallback/error-boundary.js */ \"(ssr)/../../node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/layout-router.js */ \"(ssr)/../../node_modules/next/dist/client/components/layout-router.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/metadata/async-metadata.js */ \"(ssr)/../../node_modules/next/dist/client/components/metadata/async-metadata.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/client/components/render-from-template-context.js */ \"(ssr)/../../node_modules/next/dist/client/components/render-from-template-context.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/lib/framework/boundary-components.js */ \"(ssr)/../../node_modules/next/dist/lib/framework/boundary-components.js\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ../../node_modules/next/dist/lib/metadata/generate/icon-mark.js */ \"(ssr)/../../node_modules/next/dist/lib/metadata/generate/icon-mark.js\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../../node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js */ \"(ssr)/../../node_modules/next/dist/next-devtools/userspace/app/segment-explorer-node.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZidWlsdGluJTJGZ2xvYmFsLWVycm9yLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmNsaWVudC1wYWdlLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmNsaWVudC1zZWdtZW50LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRmh0dHAtYWNjZXNzLWZhbGxiYWNrJTJGZXJyb3ItYm91bmRhcnkuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ0cm95c2FtdWVscyUyRlNDSEVOR0VOJTIwVklTQSUyMENBTENVTEFUT1IlMkZzY2hlbmdlbnZpc2FjYWxjdWxhdG9yJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZjb21wb25lbnRzJTJGbGF5b3V0LXJvdXRlci5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRmNsaWVudCUyRmNvbXBvbmVudHMlMkZtZXRhZGF0YSUyRmFzeW5jLW1ldGFkYXRhLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGY29tcG9uZW50cyUyRnJlbmRlci1mcm9tLXRlbXBsYXRlLWNvbnRleHQuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0QmbW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ0cm95c2FtdWVscyUyRlNDSEVOR0VOJTIwVklTQSUyMENBTENVTEFUT1IlMkZzY2hlbmdlbnZpc2FjYWxjdWxhdG9yJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZsaWIlMkZmcmFtZXdvcmslMkZib3VuZGFyeS1jb21wb25lbnRzLmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGdHJveXNhbXVlbHMlMkZTQ0hFTkdFTiUyMFZJU0ElMjBDQUxDVUxBVE9SJTJGc2NoZW5nZW52aXNhY2FsY3VsYXRvciUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGbGliJTJGbWV0YWRhdGElMkZnZW5lcmF0ZSUyRmljb24tbWFyay5qcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZub2RlX21vZHVsZXMlMkZuZXh0JTJGZGlzdCUyRm5leHQtZGV2dG9vbHMlMkZ1c2Vyc3BhY2UlMkZhcHAlMkZzZWdtZW50LWV4cGxvcmVyLW5vZGUuanMlMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPXRydWUhIiwibWFwcGluZ3MiOiJBQUFBLDhQQUF3SztBQUN4SztBQUNBLDRPQUErSjtBQUMvSjtBQUNBLGtQQUFrSztBQUNsSztBQUNBLDRSQUF1TDtBQUN2TDtBQUNBLGdQQUFpSztBQUNqSztBQUNBLG9RQUEySztBQUMzSztBQUNBLDhRQUFnTDtBQUNoTDtBQUNBLG9QQUFtSztBQUNuSztBQUNBLDBPQUFpSztBQUNqSztBQUNBLG9SQUFtTCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvYnVpbHRpbi9nbG9iYWwtZXJyb3IuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2NsaWVudC1wYWdlLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9jbGllbnQtc2VnbWVudC5qc1wiKTtcbjtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaHR0cC1hY2Nlc3MtZmFsbGJhY2svZXJyb3ItYm91bmRhcnkuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2xheW91dC1yb3V0ZXIuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL21ldGFkYXRhL2FzeW5jLW1ldGFkYXRhLmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZW5kZXItZnJvbS10ZW1wbGF0ZS1jb250ZXh0LmpzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvdHJveXNhbXVlbHMvU0NIRU5HRU4gVklTQSBDQUxDVUxBVE9SL3NjaGVuZ2VudmlzYWNhbGN1bGF0b3Ivbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvZnJhbWV3b3JrL2JvdW5kYXJ5LWNvbXBvbmVudHMuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9tZXRhZGF0YS9nZW5lcmF0ZS9pY29uLW1hcmsuanNcIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L25leHQtZGV2dG9vbHMvdXNlcnNwYWNlL2FwcC9zZWdtZW50LWV4cGxvcmVyLW5vZGUuanNcIik7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fbuiltin%2Fglobal-error.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-page.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fclient-segment.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fhttp-access-fallback%2Ferror-boundary.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Flayout-router.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Fmetadata%2Fasync-metadata.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fcomponents%2Frender-from-template-context.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fframework%2Fboundary-components.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Flib%2Fmetadata%2Fgenerate%2Ficon-mark.js%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fnode_modules%2Fnext%2Fdist%2Fnext-devtools%2Fuserspace%2Fapp%2Fsegment-explorer-node.js%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(ssr)/./src/app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1mbGlnaHQtY2xpZW50LWVudHJ5LWxvYWRlci5qcz9tb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRnRyb3lzYW11ZWxzJTJGU0NIRU5HRU4lMjBWSVNBJTIwQ0FMQ1VMQVRPUiUyRnNjaGVuZ2VudmlzYWNhbGN1bGF0b3IlMkZwYWNrYWdlcyUyRmFwcCUyRnNyYyUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj10cnVlISIsIm1hcHBpbmdzIjoiQUFBQSxnSkFBcUkiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9wYWNrYWdlcy9hcHAvc3JjL2FwcC9wYWdlLnRzeFwiKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=true!\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/../calculator/dist/index.esm.js":
/*!***************************************!*\
  !*** ../calculator/dist/index.esm.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DateOverlapValidator: () => (/* binding */ DateOverlapValidator),\n/* harmony export */   RobustSchengenCalculator: () => (/* binding */ RobustSchengenCalculator),\n/* harmony export */   SCHENGEN_COUNTRIES: () => (/* binding */ SCHENGEN_COUNTRIES),\n/* harmony export */   SCHENGEN_COUNTRIES_COUNT: () => (/* binding */ SCHENGEN_COUNTRIES_COUNT),\n/* harmony export */   getCountriesForSelect: () => (/* binding */ getCountriesForSelect),\n/* harmony export */   getCountryByCode: () => (/* binding */ getCountryByCode),\n/* harmony export */   getCountryByName: () => (/* binding */ getCountryByName),\n/* harmony export */   getEUMemberCountries: () => (/* binding */ getEUMemberCountries),\n/* harmony export */   getNonEUSchengenCountries: () => (/* binding */ getNonEUSchengenCountries)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isValid.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/subDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/format.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/differenceInDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isLeapYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,areIntervalsOverlapping,differenceInDays,endOfDay,format,isLeapYear,isValid,startOfDay,subDays!=!date-fns */ \"(ssr)/../../node_modules/date-fns/areIntervalsOverlapping.mjs\");\n\n/**\n * Robust Schengen Calculator implementing exact 180-day rolling window rules\n * \n * Key Schengen Rules:\n * 1. Maximum 90 days in any 180-day period\n * 2. The 180-day period is ROLLING - calculated from any given date backward\n * 3. Entry and exit days both count as stay days\n * 4. Days must be calculated for EVERY day, not just trip endpoints\n */ class RobustSchengenCalculator {\n    /**\n   * Calculate compliance using exact rolling window algorithm\n   * This checks compliance for EVERY day in the period, not just trip endpoints\n   * Enhanced with edge case handling for leap years, timezones, and boundary conditions\n   */ static calculateExactCompliance(trips, referenceDate = new Date()) {\n        try {\n            // Enhanced input validation\n            if (!Array.isArray(trips)) {\n                throw new Error('Trips must be an array');\n            }\n            if (!referenceDate || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(referenceDate)) {\n                throw new Error('Reference date must be a valid Date object');\n            }\n            // Validate reference date is not in extreme future/past\n            const now = new Date();\n            const tenYearsAgo = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(now, 365 * 10);\n            const fiveYearsFromNow = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(now, 365 * 5);\n            if (referenceDate < tenYearsAgo || referenceDate > fiveYearsFromNow) {\n                console.warn(`Reference date ${(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(referenceDate, 'yyyy-MM-dd')} is outside reasonable range`);\n            }\n            // Normalize reference date to start of day (UTC-agnostic)\n            const normalizedRefDate = this.normalizeToStartOfDay(referenceDate);\n            const periodStart = this.calculatePeriodStart(normalizedRefDate);\n            // Validate and normalize all trips\n            const validTrips = this.validateAndNormalizeTrips(trips);\n            // Handle empty trips case\n            if (validTrips.length === 0) {\n                return {\n                    totalDaysUsed: 0,\n                    daysRemaining: this.MAX_DAYS_IN_PERIOD,\n                    isCompliant: true,\n                    overstayDays: 0,\n                    referenceDate: normalizedRefDate,\n                    periodStart,\n                    periodEnd: normalizedRefDate,\n                    detailedBreakdown: []\n                };\n            }\n            // Create a map of all days with stays\n            const dailyStays = this.createDailyStayMap(validTrips, periodStart, normalizedRefDate);\n            // Calculate rolling compliance for each day\n            const rollingChecks = this.calculateRollingComplianceForAllDays(dailyStays, periodStart, normalizedRefDate);\n            // Validate rolling checks\n            if (rollingChecks.length === 0) {\n                throw new Error('Failed to generate rolling compliance checks');\n            }\n            // Find the maximum violation and current status\n            const maxViolation = Math.max(...rollingChecks.map((check)=>check.overstayDays));\n            const currentCompliance = rollingChecks[rollingChecks.length - 1];\n            if (!currentCompliance) {\n                throw new Error('Failed to get current compliance status');\n            }\n            // Generate detailed breakdown\n            const detailedBreakdown = this.generateDetailedBreakdown(dailyStays, rollingChecks, periodStart, normalizedRefDate);\n            const result = {\n                totalDaysUsed: currentCompliance.daysInWindow,\n                daysRemaining: Math.max(0, this.MAX_DAYS_IN_PERIOD - currentCompliance.daysInWindow),\n                isCompliant: maxViolation === 0,\n                overstayDays: maxViolation,\n                referenceDate: normalizedRefDate,\n                periodStart,\n                periodEnd: normalizedRefDate,\n                detailedBreakdown\n            };\n            // Final validation of result\n            if (result.totalDaysUsed < 0 || result.daysRemaining < 0) {\n                console.error('Invalid calculation result:', result);\n                throw new Error('Calculation produced invalid negative values');\n            }\n            return result;\n        } catch (error) {\n            console.error('Error in calculateExactCompliance:', error);\n            // Return safe fallback\n            const normalizedRefDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(referenceDate);\n            return {\n                totalDaysUsed: 0,\n                daysRemaining: this.MAX_DAYS_IN_PERIOD,\n                isCompliant: true,\n                overstayDays: 0,\n                referenceDate: normalizedRefDate,\n                periodStart: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(normalizedRefDate, this.ROLLING_PERIOD_DAYS - 1),\n                periodEnd: normalizedRefDate,\n                detailedBreakdown: []\n            };\n        }\n    }\n    /**\n   * Calculate the exact number of days used in any 180-day window ending on a specific date\n   */ static calculateDaysInWindow(trips, endDate) {\n        if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(endDate)) {\n            throw new Error('End date must be valid');\n        }\n        const normalizedEndDate = this.normalizeToStartOfDay(endDate);\n        const windowStart = this.calculatePeriodStart(normalizedEndDate);\n        let totalDays = 0;\n        for (const trip of trips){\n            if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.startDate) || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.endDate)) {\n                console.warn(`Skipping trip ${trip.id} with invalid dates`);\n                continue;\n            }\n            const tripStart = this.normalizeToStartOfDay(trip.startDate);\n            const tripEnd = this.normalizeToStartOfDay(trip.endDate);\n            // Calculate overlap with the window (inclusive of both start and end)\n            const overlapStart = tripStart > windowStart ? tripStart : windowStart;\n            const overlapEnd = tripEnd < normalizedEndDate ? tripEnd : normalizedEndDate;\n            if (overlapStart <= overlapEnd) {\n                // Both start and end days count, so we add 1\n                const daysInOverlap = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(overlapEnd, overlapStart) + 1;\n                // Validate the calculated days\n                if (daysInOverlap < 0) {\n                    console.error(`Negative days calculated for trip ${trip.id}`);\n                    continue;\n                }\n                totalDays += daysInOverlap;\n            }\n        }\n        return totalDays;\n    }\n    /**\n   * Check if a planned trip would violate the 90/180 rule\n   */ static validatePlannedTrip(existingTrips, plannedTrip) {\n        const allTrips = [\n            ...existingTrips,\n            plannedTrip\n        ];\n        // Check compliance for every day of the planned trip\n        let currentDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(plannedTrip.startDate);\n        const endDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(plannedTrip.endDate);\n        let maxViolation = 0;\n        let violationDate = null;\n        while(currentDate <= endDate){\n            const daysInWindow = this.calculateDaysInWindow(allTrips, currentDate);\n            const overstay = Math.max(0, daysInWindow - this.MAX_DAYS_IN_PERIOD);\n            if (overstay > maxViolation) {\n                maxViolation = overstay;\n                violationDate = new Date(currentDate);\n            }\n            currentDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n        }\n        return {\n            isValid: maxViolation === 0,\n            violationDays: maxViolation,\n            violationDate\n        };\n    }\n    /**\n   * Find the latest date when a trip of specified length could start without violation\n   */ static findLatestValidStartDate(existingTrips, tripLength, earliestStart, latestStart) {\n        let testDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(latestStart);\n        const minDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(earliestStart);\n        while(testDate >= minDate){\n            const testTrip = {\n                id: 'test',\n                country: 'TEST',\n                startDate: testDate,\n                endDate: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(testDate, tripLength - 1),\n                days: tripLength\n            };\n            const validation = this.validatePlannedTrip(existingTrips, testTrip);\n            if (validation.isValid) {\n                return testDate;\n            }\n            testDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(testDate, 1);\n        }\n        return null;\n    }\n    /**\n   * Calculate maximum consecutive days available from a start date\n   */ static calculateMaxConsecutiveDays(existingTrips, startDate) {\n        let maxDays = 0;\n        let testLength = 1;\n        const maxTestLength = 100 // Safety limit\n        ;\n        while(testLength <= maxTestLength){\n            const testTrip = {\n                id: 'test',\n                country: 'TEST',\n                startDate: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(startDate),\n                endDate: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)((0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(startDate), testLength - 1),\n                days: testLength\n            };\n            const validation = this.validatePlannedTrip(existingTrips, testTrip);\n            if (validation.isValid) {\n                maxDays = testLength;\n                testLength++;\n            } else {\n                break;\n            }\n        }\n        return Math.min(maxDays, this.MAX_DAYS_IN_PERIOD);\n    }\n    /**\n   * Comprehensive trip validation\n   */ static validateTrips(trips) {\n        const errors = [];\n        const warnings = [];\n        const seenIds = new Set();\n        trips.forEach((trip, index)=>{\n            // Check for duplicate IDs\n            if (seenIds.has(trip.id)) {\n                errors.push({\n                    field: 'id',\n                    message: `Duplicate trip ID: ${trip.id}`,\n                    severity: 'ERROR',\n                    tripId: trip.id\n                });\n            }\n            seenIds.add(trip.id);\n            // Required fields\n            if (!trip.id || trip.id.trim() === '') {\n                errors.push({\n                    field: 'id',\n                    message: `Trip at index ${index} is missing an ID`,\n                    severity: 'ERROR'\n                });\n            }\n            if (!trip.country || trip.country.trim() === '') {\n                errors.push({\n                    field: 'country',\n                    message: 'Country is required',\n                    severity: 'ERROR',\n                    tripId: trip.id\n                });\n            }\n            if (!trip.startDate) {\n                errors.push({\n                    field: 'startDate',\n                    message: 'Start date is required',\n                    severity: 'ERROR',\n                    tripId: trip.id\n                });\n            }\n            if (!trip.endDate) {\n                errors.push({\n                    field: 'endDate',\n                    message: 'End date is required',\n                    severity: 'ERROR',\n                    tripId: trip.id\n                });\n            }\n            // Date validation\n            if (trip.startDate && trip.endDate) {\n                if (trip.startDate > trip.endDate) {\n                    errors.push({\n                        field: 'dates',\n                        message: 'Start date must be before or equal to end date',\n                        severity: 'ERROR',\n                        tripId: trip.id\n                    });\n                }\n                const duration = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(trip.endDate, trip.startDate) + 1;\n                if (duration > this.MAX_DAYS_IN_PERIOD) {\n                    errors.push({\n                        field: 'duration',\n                        message: `Trip duration (${duration} days) exceeds maximum allowed consecutive stay (${this.MAX_DAYS_IN_PERIOD} days)`,\n                        severity: 'ERROR',\n                        tripId: trip.id\n                    });\n                }\n                if (duration < 1) {\n                    errors.push({\n                        field: 'duration',\n                        message: 'Trip must be at least 1 day long',\n                        severity: 'ERROR',\n                        tripId: trip.id\n                    });\n                }\n                // Check for unreasonable dates\n                const now = new Date();\n                const tenYearsAgo = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(now, 365 * 10);\n                const fiveYearsFromNow = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(now, 365 * 5);\n                if (trip.startDate < tenYearsAgo) {\n                    warnings.push({\n                        field: 'startDate',\n                        message: 'Start date seems unreasonably far in the past',\n                        severity: 'WARNING',\n                        tripId: trip.id\n                    });\n                }\n                if (trip.endDate > fiveYearsFromNow) {\n                    warnings.push({\n                        field: 'endDate',\n                        message: 'End date seems unreasonably far in the future',\n                        severity: 'WARNING',\n                        tripId: trip.id\n                    });\n                }\n                // Check for consistency with days field\n                if (trip.days && Math.abs(trip.days - duration) > 0) {\n                    warnings.push({\n                        field: 'days',\n                        message: `Days field (${trip.days}) doesn't match calculated duration (${duration})`,\n                        severity: 'WARNING',\n                        tripId: trip.id\n                    });\n                }\n            }\n        });\n        // Check for overlapping trips (same dates)\n        for(let i = 0; i < trips.length; i++){\n            for(let j = i + 1; j < trips.length; j++){\n                const trip1 = trips[i];\n                const trip2 = trips[j];\n                if (!trip1.startDate || !trip1.endDate || !trip2.startDate || !trip2.endDate) continue;\n                // Check if trips overlap\n                const overlap = !(trip1.endDate < trip2.startDate || trip2.endDate < trip1.startDate);\n                if (overlap) {\n                    warnings.push({\n                        field: 'dates',\n                        message: `Trip ${trip1.id} overlaps with trip ${trip2.id}. This may be intentional for same-day travel between countries.`,\n                        severity: 'WARNING',\n                        tripId: trip1.id\n                    });\n                }\n            }\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n   * Get next date when days will \"roll off\" the window\n   */ static getNextResetDate(trips, referenceDate = new Date()) {\n        const normalizedRefDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(referenceDate);\n        const currentWindow = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(normalizedRefDate, this.ROLLING_PERIOD_DAYS - 1);\n        // Find the earliest trip day that affects the current window\n        let earliestRelevantDate = null;\n        for (const trip of trips){\n            let checkDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.startDate);\n            const endDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.endDate);\n            while(checkDate <= endDate){\n                if (checkDate >= currentWindow && checkDate <= normalizedRefDate) {\n                    if (!earliestRelevantDate || checkDate < earliestRelevantDate) {\n                        earliestRelevantDate = checkDate;\n                    }\n                }\n                checkDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(checkDate, 1);\n            }\n        }\n        if (!earliestRelevantDate) return null;\n        // The reset date is 180 days after the earliest relevant date\n        return (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(earliestRelevantDate, this.ROLLING_PERIOD_DAYS);\n    }\n    /**\n   * Debug function to visualize rolling window calculations\n   */ static debugRollingWindow(trips, referenceDate) {\n        const result = this.calculateExactCompliance(trips, referenceDate);\n        return {\n            summary: {\n                totalDaysUsed: result.totalDaysUsed,\n                daysRemaining: result.daysRemaining,\n                isCompliant: result.isCompliant,\n                overstayDays: result.overstayDays,\n                periodStart: result.periodStart,\n                periodEnd: result.periodEnd\n            },\n            tripsInPeriod: trips.filter((trip)=>trip.endDate >= result.periodStart && trip.startDate <= result.periodEnd),\n            dailyBreakdown: result.detailedBreakdown.filter((day)=>day.daysUsedOnDate > 0),\n            violations: result.detailedBreakdown.filter((day)=>day.isViolation),\n            nextResetDate: this.getNextResetDate(trips, referenceDate)\n        };\n    }\n    /**\n   * Validate and normalize trip data with error handling\n   */ static validateAndNormalizeTrips(trips) {\n        // Run validation but proceed with filtering\n        const validationResult = this.validateTrips(trips);\n        const criticalErrors = validationResult.errors;\n        if (criticalErrors.length > 0) {\n            console.warn('Critical validation errors found:', criticalErrors);\n        }\n        return trips.filter((trip)=>{\n            // Only include trips that pass basic validation\n            if (!trip.startDate || !trip.endDate || !trip.country) return false;\n            // Enhanced date validation\n            if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.startDate) || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.endDate)) {\n                console.warn(`Trip ${trip.id} has invalid dates`);\n                return false;\n            }\n            if (trip.startDate > trip.endDate) return false;\n            // Filter out trips with excessive duration\n            const duration = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(trip.endDate, trip.startDate) + 1;\n            if (duration > this.MAX_DAYS_IN_PERIOD) return false;\n            // Filter out trips with unreasonable dates\n            const now = new Date();\n            const veryOld = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(now, 365 * 20) // 20 years ago\n            ;\n            const veryFuture = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(now, 365 * 10) // 10 years in future\n            ;\n            if (trip.endDate < veryOld || trip.startDate > veryFuture) {\n                console.warn(`Trip ${trip.id} has unreasonable dates`);\n                return false;\n            }\n            return true;\n        }).map((trip)=>{\n            try {\n                const normalizedTrip = {\n                    ...trip,\n                    startDate: this.normalizeToStartOfDay(trip.startDate),\n                    endDate: this.normalizeToStartOfDay(trip.endDate),\n                    days: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(trip.endDate, trip.startDate) + 1\n                };\n                // Validate normalized dates\n                if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(normalizedTrip.startDate) || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(normalizedTrip.endDate)) {\n                    console.error(`Invalid dates after normalization for trip ${trip.id}`);\n                    return null;\n                }\n                // Check for leap year edge cases in trip duration\n                const hasLeapDay = this.tripCrossesLeapDay(normalizedTrip.startDate, normalizedTrip.endDate);\n                if (hasLeapDay) {\n                    console.debug(`Trip ${trip.id} crosses leap day`);\n                }\n                return normalizedTrip;\n            } catch (error) {\n                console.error(`Error normalizing trip ${trip.id}:`, error);\n                return null;\n            }\n        }).filter((trip)=>trip !== null).sort((a, b)=>a.startDate.getTime() - b.startDate.getTime());\n    }\n    /**\n   * Create a map of daily stays for efficient lookup\n   */ static createDailyStayMap(trips, periodStart, periodEnd) {\n        const dailyStays = new Map();\n        for (const trip of trips){\n            // Only consider trips that overlap with our period\n            if (trip.endDate < periodStart || trip.startDate > periodEnd) continue;\n            // Calculate the actual overlap\n            const overlapStart = trip.startDate > periodStart ? trip.startDate : periodStart;\n            const overlapEnd = trip.endDate < periodEnd ? trip.endDate : periodEnd;\n            // Add each day of the trip\n            let currentDate = new Date(overlapStart);\n            while(currentDate <= overlapEnd){\n                const dateKey = currentDate.toISOString().split('T')[0];\n                if (!dailyStays.has(dateKey)) {\n                    dailyStays.set(dateKey, []);\n                }\n                dailyStays.get(dateKey).push(trip.id);\n                currentDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n            }\n        }\n        return dailyStays;\n    }\n    /**\n   * Calculate rolling compliance check for every day in the period\n   */ static calculateRollingComplianceForAllDays(dailyStays, periodStart, periodEnd) {\n        const checks = [];\n        let currentDate = new Date(periodStart);\n        while(currentDate <= periodEnd){\n            const windowStart = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(currentDate, this.ROLLING_PERIOD_DAYS - 1);\n            const windowEnd = new Date(currentDate);\n            // Count days in this 180-day window\n            let daysInWindow = 0;\n            let checkDate = new Date(windowStart);\n            while(checkDate <= windowEnd){\n                const dateKey = checkDate.toISOString().split('T')[0];\n                if (dailyStays.has(dateKey)) {\n                    daysInWindow++;\n                }\n                checkDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(checkDate, 1);\n            }\n            const overstayDays = Math.max(0, daysInWindow - this.MAX_DAYS_IN_PERIOD);\n            checks.push({\n                date: new Date(currentDate),\n                windowStart: new Date(windowStart),\n                windowEnd: new Date(windowEnd),\n                daysInWindow,\n                isCompliant: overstayDays === 0,\n                overstayDays\n            });\n            currentDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n        }\n        return checks;\n    }\n    /**\n   * Generate detailed day-by-day breakdown\n   */ static generateDetailedBreakdown(dailyStays, rollingChecks, periodStart, periodEnd) {\n        const breakdown = [];\n        let currentDate = new Date(periodStart);\n        let checkIndex = 0;\n        while(currentDate <= periodEnd){\n            const dateKey = currentDate.toISOString().split('T')[0];\n            const staysOnDate = dailyStays.get(dateKey) || [];\n            const daysUsedOnDate = staysOnDate.length > 0 ? 1 : 0;\n            const rollingCheck = rollingChecks[checkIndex];\n            breakdown.push({\n                date: new Date(currentDate),\n                daysUsedOnDate,\n                cumulativeDaysInWindow: rollingCheck.daysInWindow,\n                isViolation: !rollingCheck.isCompliant,\n                contributingTrips: staysOnDate\n            });\n            currentDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_2__.addDays)(currentDate, 1);\n            checkIndex++;\n        }\n        return breakdown;\n    }\n    /**\n   * Enhanced date normalization with timezone-agnostic handling\n   */ static normalizeToStartOfDay(date) {\n        // Use startOfDay but ensure we're working with local time consistently\n        const normalized = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(date);\n        // Additional validation for edge cases\n        if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(normalized)) {\n            throw new Error(`Failed to normalize date: ${date}`);\n        }\n        return normalized;\n    }\n    /**\n   * Calculate period start with leap year awareness\n   */ static calculatePeriodStart(referenceDate) {\n        // Standard 180-day window calculation\n        const periodStart = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_1__.subDays)(referenceDate, this.ROLLING_PERIOD_DAYS - 1);\n        // Validate the calculated period start\n        if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(periodStart)) {\n            throw new Error(`Invalid period start calculated from reference date: ${(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(referenceDate, 'yyyy-MM-dd')}`);\n        }\n        // Check if we're crossing leap year boundaries and log for awareness\n        const refYear = referenceDate.getFullYear();\n        const startYear = periodStart.getFullYear();\n        if (refYear !== startYear) {\n            const crossesLeapYear = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_6__.isLeapYear)(refYear) || (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_6__.isLeapYear)(startYear);\n            if (crossesLeapYear) {\n                console.debug(`180-day window crosses leap year boundary: ${startYear}-${refYear}`);\n            }\n        }\n        return periodStart;\n    }\n    /**\n   * Check if a trip crosses February 29th in a leap year\n   */ static tripCrossesLeapDay(startDate, endDate) {\n        const startYear = startDate.getFullYear();\n        const endYear = endDate.getFullYear();\n        // Check each year the trip spans\n        for(let year = startYear; year <= endYear; year++){\n            if ((0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_6__.isLeapYear)(year)) {\n                const leapDay = new Date(year, 1, 29) // February 29th\n                ;\n                if (leapDay >= startDate && leapDay <= endDate) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\nRobustSchengenCalculator.MAX_DAYS_IN_PERIOD = 90;\nRobustSchengenCalculator.ROLLING_PERIOD_DAYS = 180;\n/**\n * Date Overlap Validator - Prevents selection of already occupied dates\n * \n * Core Features:\n * 1. Detects date conflicts between new and existing trips\n * 2. Provides visual indicators for occupied dates (grey + strikethrough)\n * 3. Returns specific conflict details for user feedback\n * 4. Handles edge cases: same-day travel, border transitions\n * 5. Mobile-optimized with larger touch targets\n */ class DateOverlapValidator {\n    /**\n   * Validate if a date range conflicts with existing trips\n   */ validateDateRange(newRange, existingTrips) {\n        // Input validation\n        if (!this.isValidDateRange(newRange)) {\n            return {\n                isValid: false,\n                conflicts: [],\n                message: 'Invalid date range provided',\n                occupiedDates: []\n            };\n        }\n        // Normalize dates to start/end of day for consistent comparison\n        const normalizedNewRange = {\n            start: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(newRange.start),\n            end: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_7__.endOfDay)(newRange.end)\n        };\n        const conflicts = [];\n        const occupiedDates = [];\n        // Check each existing trip for conflicts\n        for (const trip of existingTrips){\n            if (!this.isValidTrip(trip)) continue;\n            const tripRange = {\n                start: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.startDate),\n                end: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_7__.endOfDay)(trip.endDate)\n            };\n            // Check for overlap\n            const hasOverlap = this.rangesOverlap(normalizedNewRange, tripRange);\n            if (hasOverlap) {\n                const conflictDetail = this.calculateConflictDetail(normalizedNewRange, tripRange, trip);\n                // Apply configuration rules\n                if (this.shouldReportConflict(conflictDetail, normalizedNewRange, tripRange)) {\n                    conflicts.push(conflictDetail);\n                }\n                // Add occupied dates for visual indicators\n                this.addOccupiedDatesFromTrip(trip, occupiedDates);\n            }\n        }\n        // Get all occupied dates for calendar marking (regardless of conflicts)\n        const allOccupiedDates = this.getAllOccupiedDates(existingTrips);\n        return {\n            isValid: conflicts.length === 0,\n            conflicts,\n            message: this.generateValidationMessage(conflicts),\n            occupiedDates: allOccupiedDates\n        };\n    }\n    /**\n   * Get all occupied dates from existing trips for calendar display\n   */ getAllOccupiedDates(trips) {\n        const occupiedDates = [];\n        for (const trip of trips){\n            if (!this.isValidTrip(trip)) continue;\n            this.addOccupiedDatesFromTrip(trip, occupiedDates);\n        }\n        // Remove duplicates and sort\n        return [\n            ...new Set(occupiedDates.map((d)=>d.getTime()))\n        ].map((time)=>new Date(time)).sort((a, b)=>a.getTime() - b.getTime());\n    }\n    /**\n   * Check if a specific date is occupied by existing trips\n   */ isDateOccupied(date, existingTrips) {\n        const normalizedDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(date);\n        return existingTrips.some((trip)=>{\n            if (!this.isValidTrip(trip)) return false;\n            const tripStart = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.startDate);\n            const tripEnd = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.endDate);\n            return normalizedDate >= tripStart && normalizedDate <= tripEnd;\n        });\n    }\n    /**\n   * Get trips that occupy a specific date\n   */ getTripsOnDate(date, existingTrips) {\n        const normalizedDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(date);\n        return existingTrips.filter((trip)=>{\n            if (!this.isValidTrip(trip)) return false;\n            const tripStart = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.startDate);\n            const tripEnd = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.endDate);\n            return normalizedDate >= tripStart && normalizedDate <= tripEnd;\n        });\n    }\n    /**\n   * Find next available date range of specified length\n   */ findNextAvailableDateRange(preferredStart, lengthInDays, existingTrips, searchLimit = 365) {\n        let testDate = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(preferredStart);\n        const maxSearchDate = new Date(testDate.getTime() + searchLimit * 24 * 60 * 60 * 1000);\n        while(testDate <= maxSearchDate){\n            const testRange = {\n                start: testDate,\n                end: new Date(testDate.getTime() + (lengthInDays - 1) * 24 * 60 * 60 * 1000)\n            };\n            const validation = this.validateDateRange(testRange, existingTrips);\n            if (validation.isValid) {\n                return testRange;\n            }\n            // Move to next day\n            testDate = new Date(testDate.getTime() + 24 * 60 * 60 * 1000);\n        }\n        return null;\n    }\n    /**\n   * Suggest alternative dates when conflicts exist\n   */ suggestAlternativeDates(conflictedRange, lengthInDays, existingTrips) {\n        const suggestions = [];\n        const duration = lengthInDays || (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(conflictedRange.end, conflictedRange.start) + 1;\n        // Try earlier dates\n        const earlierDate = new Date(conflictedRange.start.getTime() - 30 * 24 * 60 * 60 * 1000);\n        const earlierRange = this.findNextAvailableDateRange(earlierDate, duration, existingTrips, 60);\n        if (earlierRange && earlierRange.start < conflictedRange.start) {\n            suggestions.push(earlierRange);\n        }\n        // Try later dates\n        const laterDate = new Date(conflictedRange.end.getTime() + 24 * 60 * 60 * 1000);\n        const laterRange = this.findNextAvailableDateRange(laterDate, duration, existingTrips, 60);\n        if (laterRange) {\n            suggestions.push(laterRange);\n        }\n        return suggestions.slice(0, 3) // Return max 3 suggestions\n        ;\n    }\n    /**\n   * Batch validation for multiple date ranges\n   */ validateMultipleDateRanges(newRanges, existingTrips) {\n        const results = {};\n        // Create a combined list of existing trips plus validated new trips\n        let combinedTrips = [\n            ...existingTrips\n        ];\n        newRanges.forEach((range, index)=>{\n            // Validate against existing trips and previously validated new trips\n            const result = this.validateDateRange(range, combinedTrips);\n            results[index] = result;\n            // If valid, add to combined trips for next validations\n            if (result.isValid) {\n                combinedTrips.push({\n                    id: `temp-${index}`,\n                    country: 'TEMP',\n                    startDate: range.start,\n                    endDate: range.end,\n                    days: (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(range.end, range.start) + 1\n                });\n            }\n        });\n        return results;\n    }\n    /**\n   * Private: Check if two date ranges overlap\n   */ rangesOverlap(range1, range2) {\n        return (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_8__.areIntervalsOverlapping)({\n            start: range1.start,\n            end: range1.end\n        }, {\n            start: range2.start,\n            end: range2.end\n        });\n    }\n    /**\n   * Private: Calculate detailed conflict information\n   */ calculateConflictDetail(newRange, tripRange, trip) {\n        // Calculate the actual overlap period\n        const conflictStart = newRange.start > tripRange.start ? newRange.start : tripRange.start;\n        const conflictEnd = newRange.end < tripRange.end ? newRange.end : tripRange.end;\n        const overlapDays = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_5__.differenceInDays)(conflictEnd, conflictStart) + 1;\n        return {\n            tripId: trip.id,\n            tripCountry: trip.country,\n            conflictStart,\n            conflictEnd,\n            overlapDays: Math.max(0, overlapDays)\n        };\n    }\n    /**\n   * Private: Determine if conflict should be reported based on configuration\n   */ shouldReportConflict(conflict, newRange, tripRange) {\n        // In strict mode, report all conflicts\n        if (this.config.strictMode) return true;\n        // Same-day travel exception\n        if (this.config.allowSameDayTravel) {\n            const isSameDayTransition = newRange.start.getTime() === tripRange.end.getTime() || newRange.end.getTime() === tripRange.start.getTime();\n            if (isSameDayTransition) return false;\n        }\n        // Border transition exception\n        if (this.config.allowBorderTransitions && conflict.overlapDays <= 1) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Private: Add occupied dates from a trip to the occupied dates array\n   */ addOccupiedDatesFromTrip(trip, occupiedDates) {\n        const start = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.startDate);\n        const end = (0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfDay)(trip.endDate);\n        let currentDate = new Date(start);\n        while(currentDate <= end){\n            occupiedDates.push(new Date(currentDate));\n            currentDate = new Date(currentDate.getTime() + 24 * 60 * 60 * 1000);\n        }\n    }\n    /**\n   * Private: Generate human-readable validation message\n   */ generateValidationMessage(conflicts) {\n        if (conflicts.length === 0) {\n            return 'Dates are available';\n        }\n        if (conflicts.length === 1) {\n            const conflict = conflicts[0];\n            return `Dates overlap with existing trip to ${conflict.tripCountry} (${conflict.overlapDays} day${conflict.overlapDays !== 1 ? 's' : ''})`;\n        }\n        return `Dates conflict with ${conflicts.length} existing trips`;\n    }\n    /**\n   * Private: Validate date range input\n   */ isValidDateRange(range) {\n        if (!range || !range.start || !range.end) return false;\n        if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(range.start) || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(range.end)) return false;\n        if (range.start > range.end) return false;\n        return true;\n    }\n    /**\n   * Private: Validate trip data\n   */ isValidTrip(trip) {\n        if (!trip || !trip.startDate || !trip.endDate) return false;\n        if (!(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.startDate) || !(0,_barrel_optimize_names_addDays_areIntervalsOverlapping_differenceInDays_endOfDay_format_isLeapYear_isValid_startOfDay_subDays_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(trip.endDate)) return false;\n        if (trip.startDate > trip.endDate) return false;\n        return true;\n    }\n    /**\n   * Update configuration\n   */ updateConfig(newConfig) {\n        this.config = {\n            ...this.config,\n            ...newConfig\n        };\n    }\n    /**\n   * Get current configuration\n   */ getConfig() {\n        return {\n            ...this.config\n        };\n    }\n    constructor(config = {}){\n        this.config = {\n            allowSameDayTravel: true,\n            allowBorderTransitions: true,\n            strictMode: false,\n            ...config\n        };\n    }\n}\n/**\n * Schengen Area Countries Data\n * Complete list of all 27 Schengen countries with flags and metadata\n * Updated as of 2024 - includes all current member states\n */ const SCHENGEN_COUNTRIES = [\n    {\n        code: 'AT',\n        name: 'Austria',\n        flag: '🇦🇹',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Vienna',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'BE',\n        name: 'Belgium',\n        flag: '🇧🇪',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Brussels',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'BG',\n        name: 'Bulgaria',\n        flag: '🇧🇬',\n        joinedSchengen: '2024',\n        isEUMember: true,\n        capital: 'Sofia',\n        timezone: 'EET',\n        currency: 'BGN'\n    },\n    {\n        code: 'HR',\n        name: 'Croatia',\n        flag: '🇭🇷',\n        joinedSchengen: '2023',\n        isEUMember: true,\n        capital: 'Zagreb',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'CZ',\n        name: 'Czech Republic',\n        flag: '🇨🇿',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Prague',\n        timezone: 'CET',\n        currency: 'CZK'\n    },\n    {\n        code: 'DK',\n        name: 'Denmark',\n        flag: '🇩🇰',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Copenhagen',\n        timezone: 'CET',\n        currency: 'DKK'\n    },\n    {\n        code: 'EE',\n        name: 'Estonia',\n        flag: '🇪🇪',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Tallinn',\n        timezone: 'EET',\n        currency: 'EUR'\n    },\n    {\n        code: 'FI',\n        name: 'Finland',\n        flag: '🇫🇮',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Helsinki',\n        timezone: 'EET',\n        currency: 'EUR'\n    },\n    {\n        code: 'FR',\n        name: 'France',\n        flag: '🇫🇷',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Paris',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'DE',\n        name: 'Germany',\n        flag: '🇩🇪',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Berlin',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'GR',\n        name: 'Greece',\n        flag: '🇬🇷',\n        joinedSchengen: '2000',\n        isEUMember: true,\n        capital: 'Athens',\n        timezone: 'EET',\n        currency: 'EUR'\n    },\n    {\n        code: 'HU',\n        name: 'Hungary',\n        flag: '🇭🇺',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Budapest',\n        timezone: 'CET',\n        currency: 'HUF'\n    },\n    {\n        code: 'IS',\n        name: 'Iceland',\n        flag: '🇮🇸',\n        joinedSchengen: '1996',\n        isEUMember: false,\n        capital: 'Reykjavik',\n        timezone: 'GMT',\n        currency: 'ISK'\n    },\n    {\n        code: 'IT',\n        name: 'Italy',\n        flag: '🇮🇹',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Rome',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'LV',\n        name: 'Latvia',\n        flag: '🇱🇻',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Riga',\n        timezone: 'EET',\n        currency: 'EUR'\n    },\n    {\n        code: 'LI',\n        name: 'Liechtenstein',\n        flag: '🇱🇮',\n        joinedSchengen: '2011',\n        isEUMember: false,\n        capital: 'Vaduz',\n        timezone: 'CET',\n        currency: 'CHF'\n    },\n    {\n        code: 'LT',\n        name: 'Lithuania',\n        flag: '🇱🇹',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Vilnius',\n        timezone: 'EET',\n        currency: 'EUR'\n    },\n    {\n        code: 'LU',\n        name: 'Luxembourg',\n        flag: '🇱🇺',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Luxembourg',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'MT',\n        name: 'Malta',\n        flag: '🇲🇹',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Valletta',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'NL',\n        name: 'Netherlands',\n        flag: '🇳🇱',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Amsterdam',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'NO',\n        name: 'Norway',\n        flag: '🇳🇴',\n        joinedSchengen: '1996',\n        isEUMember: false,\n        capital: 'Oslo',\n        timezone: 'CET',\n        currency: 'NOK'\n    },\n    {\n        code: 'PL',\n        name: 'Poland',\n        flag: '🇵🇱',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Warsaw',\n        timezone: 'CET',\n        currency: 'PLN'\n    },\n    {\n        code: 'PT',\n        name: 'Portugal',\n        flag: '🇵🇹',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Lisbon',\n        timezone: 'WET',\n        currency: 'EUR'\n    },\n    {\n        code: 'RO',\n        name: 'Romania',\n        flag: '🇷🇴',\n        joinedSchengen: '2024',\n        isEUMember: true,\n        capital: 'Bucharest',\n        timezone: 'EET',\n        currency: 'RON'\n    },\n    {\n        code: 'SK',\n        name: 'Slovakia',\n        flag: '🇸🇰',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Bratislava',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'SI',\n        name: 'Slovenia',\n        flag: '🇸🇮',\n        joinedSchengen: '2007',\n        isEUMember: true,\n        capital: 'Ljubljana',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'ES',\n        name: 'Spain',\n        flag: '🇪🇸',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Madrid',\n        timezone: 'CET',\n        currency: 'EUR'\n    },\n    {\n        code: 'SE',\n        name: 'Sweden',\n        flag: '🇸🇪',\n        joinedSchengen: '1995',\n        isEUMember: true,\n        capital: 'Stockholm',\n        timezone: 'CET',\n        currency: 'SEK'\n    },\n    {\n        code: 'CH',\n        name: 'Switzerland',\n        flag: '🇨🇭',\n        joinedSchengen: '2008',\n        isEUMember: false,\n        capital: 'Bern',\n        timezone: 'CET',\n        currency: 'CHF'\n    }\n];\n// Utility functions for working with countries\nconst getCountryByCode = (code)=>{\n    return SCHENGEN_COUNTRIES.find((country)=>country.code === code);\n};\nconst getCountryByName = (name)=>{\n    return SCHENGEN_COUNTRIES.find((country)=>country.name.toLowerCase() === name.toLowerCase());\n};\nconst getCountriesForSelect = ()=>{\n    return SCHENGEN_COUNTRIES.map((country)=>({\n            value: country.code,\n            label: `${country.flag} ${country.name}`,\n            country\n        })).sort((a, b)=>a.country.name.localeCompare(b.country.name));\n};\nconst getEUMemberCountries = ()=>{\n    return SCHENGEN_COUNTRIES.filter((country)=>country.isEUMember);\n};\nconst getNonEUSchengenCountries = ()=>{\n    return SCHENGEN_COUNTRIES.filter((country)=>!country.isEUMember);\n};\n// Export count for validation\nconst SCHENGEN_COUNTRIES_COUNT = SCHENGEN_COUNTRIES.length;\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vY2FsY3VsYXRvci9kaXN0L2luZGV4LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7Ozs7Ozs7O0NBUUMsR0FDTSxNQUFNQSx3QkFBQUEsQ0FBQUE7SUFJWDs7OztHQUlDLEdBQ0QsT0FBT0Msd0JBQUFBLENBQXlCQyxLQUFhLEVBQUVDLGFBQUFBLEdBQXNCLElBQUlDLE1BQU0sRUFBb0I7UUFDakcsSUFBSTs7WUFFRixJQUFJLENBQUNDLEtBQUFBLENBQU1DLE9BQU8sQ0FBQ0osS0FBQUEsQ0FBQUEsRUFBUTtnQkFDekIsTUFBTSxJQUFJSyxLQUFBQSxDQUFNO1lBQ2xCO1lBRUEsSUFBSSxDQUFDSixhQUFBQSxJQUFpQixDQUFDSywrS0FBQUEsQ0FBUUwsYUFBQUEsQ0FBQUEsRUFBZ0I7Z0JBQzdDLE1BQU0sSUFBSUksS0FBQUEsQ0FBTTtZQUNsQjs7WUFHQSxNQUFNRSxNQUFNLElBQUlMLElBQUFBLEVBQUFBO1lBQ2hCLE1BQU1NLFdBQUFBLEdBQWNDLCtLQUFBQSxDQUFRRixHQUFBQSxFQUFLLE1BQU07WUFDdkMsTUFBTUcsZ0JBQUFBLEdBQW1CQywrS0FBQUEsQ0FBUUosR0FBQUEsRUFBSyxNQUFNO1lBRTVDLElBQUlOLGFBQUFBLEdBQWdCTyxXQUFBQSxJQUFlUCxhQUFBQSxHQUFnQlMsZ0JBQUFBLEVBQWtCO2dCQUNuRUUsT0FBQUEsQ0FBUUMsSUFBSSxDQUFDLENBQUMsZUFBZSxFQUFFQyw4S0FBQUEsQ0FBT2IsYUFBQUEsRUFBZSxjQUFjLDRCQUE0QixDQUFDO1lBQ2xHOztZQUdBLE1BQU1jLGlCQUFBQSxHQUFvQixJQUFJLENBQUNDLHFCQUFxQixDQUFDZixhQUFBQSxDQUFBQTtZQUNyRCxNQUFNZ0IsV0FBQUEsR0FBYyxJQUFJLENBQUNDLG9CQUFvQixDQUFDSCxpQkFBQUEsQ0FBQUE7O1lBRzlDLE1BQU1JLFVBQUFBLEdBQWEsSUFBSSxDQUFDQyx5QkFBeUIsQ0FBQ3BCLEtBQUFBLENBQUFBOztZQUdsRCxJQUFJbUIsVUFBQUEsQ0FBV0UsTUFBTSxLQUFLLEdBQUc7Z0JBQzNCLE9BQU87b0JBQ0xDLGFBQUFBLEVBQWU7b0JBQ2ZDLGFBQUFBLEVBQWUsSUFBSSxDQUFDQyxrQkFBa0I7b0JBQ3RDQyxXQUFBQSxFQUFhO29CQUNiQyxZQUFBQSxFQUFjO29CQUNkekIsYUFBQUEsRUFBZWMsaUJBQUFBO29CQUNmRSxXQUFBQTtvQkFDQVUsU0FBQUEsRUFBV1osaUJBQUFBO29CQUNYYSxpQkFBQUEsRUFBbUI7Z0JBQ3JCO1lBQ0Y7O1lBR0EsTUFBTUMsYUFBYSxJQUFJLENBQUNDLGtCQUFrQixDQUFDWCxZQUFZRixXQUFBQSxFQUFhRixpQkFBQUEsQ0FBQUE7O1lBR3BFLE1BQU1nQixnQkFBZ0IsSUFBSSxDQUFDQyxvQ0FBb0MsQ0FDN0RILFlBQ0FaLFdBQUFBLEVBQ0FGLGlCQUFBQSxDQUFBQTs7WUFJRixJQUFJZ0IsYUFBQUEsQ0FBY1YsTUFBTSxLQUFLLEdBQUc7Z0JBQzlCLE1BQU0sSUFBSWhCLEtBQUFBLENBQU07WUFDbEI7O1lBR0EsTUFBTTRCLFlBQUFBLEdBQWVDLElBQUFBLENBQUtDLEdBQUcsSUFBSUosYUFBQUEsQ0FBY0ssR0FBRyxDQUFDQyxDQUFBQSxLQUFBQSxHQUFTQSxLQUFBQSxDQUFNWCxZQUFZO1lBQzlFLE1BQU1ZLG9CQUFvQlAsYUFBYSxDQUFDQSxhQUFBQSxDQUFjVixNQUFNLEdBQUcsRUFBRTtZQUVqRSxJQUFJLENBQUNpQixpQkFBQUEsRUFBbUI7Z0JBQ3RCLE1BQU0sSUFBSWpDLEtBQUFBLENBQU07WUFDbEI7O1lBR0EsTUFBTXVCLG9CQUFvQixJQUFJLENBQUNXLHlCQUF5QixDQUN0RFYsVUFBQUEsRUFDQUUsZUFDQWQsV0FBQUEsRUFDQUYsaUJBQUFBLENBQUFBO1lBR0YsTUFBTXlCLE1BQUFBLEdBQVM7Z0JBQ2JsQixhQUFBQSxFQUFlZ0Isa0JBQWtCRyxZQUFZO2dCQUM3Q2xCLGFBQUFBLEVBQWVXLElBQUFBLENBQUtDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQ1gsa0JBQWtCLEdBQUdjLGlCQUFBQSxDQUFrQkcsWUFBWTtnQkFDbkZoQixXQUFBQSxFQUFhUSxZQUFBQSxLQUFpQjtnQkFDOUJQLFlBQUFBLEVBQWNPLFlBQUFBO2dCQUNkaEMsYUFBQUEsRUFBZWMsaUJBQUFBO2dCQUNmRSxXQUFBQTtnQkFDQVUsU0FBQUEsRUFBV1osaUJBQUFBO2dCQUNYYTtZQUNGOztZQUdBLElBQUlZLE9BQU9sQixhQUFhLEdBQUcsS0FBS2tCLE1BQUFBLENBQU9qQixhQUFhLEdBQUcsR0FBRztnQkFDeERYLE9BQUFBLENBQVE4QixLQUFLLENBQUMsK0JBQStCRixNQUFBQSxDQUFBQTtnQkFDN0MsTUFBTSxJQUFJbkMsS0FBQUEsQ0FBTTtZQUNsQjtZQUVBLE9BQU9tQyxNQUFBQTtRQUNULEVBQUUsT0FBT0UsS0FBQUEsRUFBTztZQUNkOUIsT0FBQUEsQ0FBUThCLEtBQUssQ0FBQyxzQ0FBc0NBLEtBQUFBLENBQUFBOztZQUdwRCxNQUFNM0Isb0JBQW9CNEIsa0xBQUFBLENBQVcxQyxhQUFBQSxDQUFBQTtZQUNyQyxPQUFPO2dCQUNMcUIsYUFBQUEsRUFBZTtnQkFDZkMsYUFBQUEsRUFBZSxJQUFJLENBQUNDLGtCQUFrQjtnQkFDdENDLFdBQUFBLEVBQWE7Z0JBQ2JDLFlBQUFBLEVBQWM7Z0JBQ2R6QixhQUFBQSxFQUFlYyxpQkFBQUE7Z0JBQ2ZFLFdBQUFBLEVBQWFSLCtLQUFBQSxDQUFRTSxpQkFBQUEsRUFBbUIsSUFBSSxDQUFDNkIsbUJBQW1CLEdBQUc7Z0JBQ25FakIsU0FBQUEsRUFBV1osaUJBQUFBO2dCQUNYYSxpQkFBQUEsRUFBbUI7WUFDckI7UUFDRjtJQUNGO0lBRUE7O0dBRUMsR0FDRCxPQUFPaUIscUJBQUFBLENBQXNCN0MsS0FBYSxFQUFFOEMsT0FBYSxFQUFVO1FBQ2pFLElBQUksQ0FBQ3hDLCtLQUFPQSxDQUFDd0MsT0FBQUEsQ0FBQUEsRUFBVTtZQUNyQixNQUFNLElBQUl6QyxLQUFBQSxDQUFNO1FBQ2xCO1FBRUEsTUFBTTBDLGlCQUFBQSxHQUFvQixJQUFJLENBQUMvQixxQkFBcUIsQ0FBQzhCLE9BQUFBLENBQUFBO1FBQ3JELE1BQU1FLFdBQUFBLEdBQWMsSUFBSSxDQUFDOUIsb0JBQW9CLENBQUM2QixpQkFBQUEsQ0FBQUE7UUFFOUMsSUFBSUUsU0FBQUEsR0FBWTtRQUVoQixLQUFLLE1BQU1DLFFBQVFsRCxLQUFBQSxDQUFPO1lBQ3hCLElBQUksQ0FBQ00sK0tBQU9BLENBQUM0QyxJQUFBQSxDQUFLQyxTQUFTLEtBQUssQ0FBQzdDLCtLQUFBQSxDQUFRNEMsSUFBQUEsQ0FBS0osT0FBTyxHQUFHO2dCQUN0RGxDLE9BQUFBLENBQVFDLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRXFDLElBQUFBLENBQUtFLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDMUQ7WUFDRjtZQUVBLE1BQU1DLFlBQVksSUFBSSxDQUFDckMscUJBQXFCLENBQUNrQyxLQUFLQyxTQUFTO1lBQzNELE1BQU1HLFVBQVUsSUFBSSxDQUFDdEMscUJBQXFCLENBQUNrQyxLQUFLSixPQUFPOztZQUd2RCxNQUFNUyxZQUFBQSxHQUFlRixTQUFBQSxHQUFZTCxXQUFBQSxHQUFjSyxTQUFBQSxHQUFZTCxXQUFBQTtZQUMzRCxNQUFNUSxVQUFBQSxHQUFhRixPQUFBQSxHQUFVUCxpQkFBQUEsR0FBb0JPLE9BQUFBLEdBQVVQLGlCQUFBQTtZQUUzRCxJQUFJUSxnQkFBZ0JDLFVBQUFBLEVBQVk7O2dCQUU5QixNQUFNQyxhQUFBQSxHQUFnQkMsd0xBQUFBLENBQWlCRixVQUFBQSxFQUFZRCxZQUFBQSxDQUFBQSxHQUFnQjs7Z0JBR25FLElBQUlFLGdCQUFnQixHQUFHO29CQUNyQjdDLE9BQUFBLENBQVE4QixLQUFLLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRVEsSUFBQUEsQ0FBS0UsRUFBRSxFQUFFO29CQUM1RDtnQkFDRjtnQkFFQUgsU0FBQUEsSUFBYVEsYUFBQUE7WUFDZjtRQUNGO1FBRUEsT0FBT1IsU0FBQUE7SUFDVDtJQUVBOztHQUVDLEdBQ0QsT0FBT1UsbUJBQUFBLENBQ0xDLGFBQXFCLEVBQ3JCQyxXQUFpQixFQUNNO1FBQ3ZCLE1BQU1DLFFBQUFBLEdBQVc7ZUFBSUYsYUFBQUE7WUFBZUM7U0FBWTs7UUFHaEQsSUFBSUUsV0FBQUEsR0FBY3BCLGtMQUFBQSxDQUFXa0IsV0FBQUEsQ0FBWVYsU0FBUztRQUNsRCxNQUFNTCxPQUFBQSxHQUFVSCxrTEFBQUEsQ0FBV2tCLFdBQUFBLENBQVlmLE9BQU87UUFFOUMsSUFBSWIsWUFBQUEsR0FBZTtRQUNuQixJQUFJK0IsYUFBQUEsR0FBNkI7UUFFakMsTUFBT0QsZUFBZWpCLE9BQUFBLENBQVM7WUFDN0IsTUFBTUwsWUFBQUEsR0FBZSxJQUFJLENBQUNJLHFCQUFxQixDQUFDaUIsUUFBQUEsRUFBVUMsV0FBQUEsQ0FBQUE7WUFDMUQsTUFBTUUsUUFBQUEsR0FBVy9CLEtBQUtDLEdBQUcsQ0FBQyxHQUFHTSxZQUFBQSxHQUFlLElBQUksQ0FBQ2pCLGtCQUFrQjtZQUVuRSxJQUFJeUMsV0FBV2hDLFlBQUFBLEVBQWM7Z0JBQzNCQSxZQUFBQSxHQUFlZ0MsUUFBQUE7Z0JBQ2ZELGFBQUFBLEdBQWdCLElBQUk5RCxJQUFBQSxDQUFLNkQsV0FBQUEsQ0FBQUE7WUFDM0I7WUFFQUEsV0FBQUEsR0FBY3BELCtLQUFPQSxDQUFDb0QsV0FBQUEsRUFBYTtRQUNyQztRQUVBLE9BQU87WUFDTHpELE9BQUFBLEVBQVMyQixZQUFBQSxLQUFpQjtZQUMxQmlDLGFBQUFBLEVBQWVqQyxZQUFBQTtZQUNmK0I7UUFDRjtJQUNGO0lBRUE7O01BR0EsT0FBT0cseUJBQ0xQLGFBQXFCLEVBQ3JCUSxVQUFrQixFQUNsQkMsYUFBbUIsRUFDbkJDLFdBQWlCLEVBQ0o7UUFDYixJQUFJQyxXQUFXNUIsa0xBQUFBLENBQVcyQixXQUFBQSxDQUFBQTtRQUMxQixNQUFNRSxVQUFVN0Isa0xBQUFBLENBQVcwQixhQUFBQSxDQUFBQTtRQUUzQixNQUFPRSxZQUFZQyxPQUFBQSxDQUFTO1lBQzFCLE1BQU1DLFFBQUFBLEdBQWlCO2dCQUNyQnJCLEVBQUFBLEVBQUk7Z0JBQ0pzQixPQUFBQSxFQUFTO2dCQUNUdkIsU0FBQUEsRUFBV29CLFFBQUFBO2dCQUNYekIsT0FBQUEsRUFBU25DLCtLQUFBQSxDQUFRNEQsVUFBVUgsVUFBQUEsR0FBYTtnQkFDeENPLElBQUFBLEVBQU1QO1lBQ1I7WUFFQSxNQUFNUSxVQUFBQSxHQUFhLElBQUksQ0FBQ2pCLG1CQUFtQixDQUFDQyxhQUFBQSxFQUFlYSxRQUFBQSxDQUFBQTtZQUMzRCxJQUFJRyxVQUFBQSxDQUFXdEUsT0FBTyxFQUFFO2dCQUN0QixPQUFPaUUsUUFBQUE7WUFDVDtZQUVBQSxRQUFBQSxHQUFXOUQsK0tBQU9BLENBQUM4RCxRQUFBQSxFQUFVO1FBQy9CO1FBRUEsT0FBTztJQUNUO0lBRUE7O0dBRUMsR0FDRCxPQUFPTSwyQkFBQUEsQ0FBNEJqQixhQUFxQixFQUFFVCxTQUFlLEVBQVU7UUFDakYsSUFBSTJCLE9BQUFBLEdBQVU7UUFDZCxJQUFJQyxVQUFBQSxHQUFhO1FBQ2pCLE1BQU1DLGFBQUFBLEdBQWdCOztRQUV0QixNQUFPRCxjQUFjQyxhQUFBQSxDQUFlO1lBQ2xDLE1BQU1QLFFBQUFBLEdBQWlCO2dCQUNyQnJCLEVBQUFBLEVBQUk7Z0JBQ0pzQixPQUFBQSxFQUFTO2dCQUNUdkIsU0FBQUEsRUFBV1Isa0xBQUFBLENBQVdRLFNBQUFBLENBQUFBO2dCQUN0QkwsT0FBQUEsRUFBU25DLCtLQUFBQSxDQUFRZ0Msa0xBQUFBLENBQVdRLFNBQUFBLENBQUFBLEVBQVk0QixVQUFBQSxHQUFhO2dCQUNyREosSUFBQUEsRUFBTUk7WUFDUjtZQUVBLE1BQU1ILFVBQUFBLEdBQWEsSUFBSSxDQUFDakIsbUJBQW1CLENBQUNDLGFBQUFBLEVBQWVhLFFBQUFBLENBQUFBO1lBQzNELElBQUlHLFVBQUFBLENBQVd0RSxPQUFPLEVBQUU7Z0JBQ3RCd0UsT0FBQUEsR0FBVUMsVUFBQUE7Z0JBQ1ZBLFVBQUFBLEVBQUFBO1lBQ0YsT0FBTztnQkFDTDtZQUNGO1FBQ0Y7UUFFQSxPQUFPN0MsS0FBSytDLEdBQUcsQ0FBQ0gsT0FBQUEsRUFBUyxJQUFJLENBQUN0RCxrQkFBa0I7SUFDbEQ7SUFFQTs7TUFHQSxPQUFPMEQsYUFBQUEsQ0FBY2xGLEtBQWEsRUFBd0I7UUFDeEQsTUFBTW1GLFNBQTRCLEVBQUU7UUFDcEMsTUFBTUMsV0FBOEIsRUFBRTtRQUN0QyxNQUFNQyxVQUFVLElBQUlDLEdBQUFBLEVBQUFBO1FBRXBCdEYsS0FBQUEsQ0FBTXVGLE9BQU8sQ0FBQyxDQUFDckMsSUFBQUEsRUFBTXNDLEtBQUFBLEdBQUFBOztZQUVuQixJQUFJSCxPQUFBQSxDQUFRSSxHQUFHLENBQUN2QyxJQUFBQSxDQUFLRSxFQUFFLEdBQUc7Z0JBQ3hCK0IsTUFBQUEsQ0FBT08sSUFBSSxDQUFDO29CQUNWQyxLQUFBQSxFQUFPO29CQUNQQyxPQUFBQSxFQUFTLENBQUMsbUJBQW1CLEVBQUUxQyxJQUFBQSxDQUFLRSxFQUFFLEVBQUU7b0JBQ3hDeUMsUUFBQUEsRUFBVTtvQkFDVkMsTUFBQUEsRUFBUTVDLEtBQUtFLEVBQUFBO2dCQUNmO1lBQ0Y7WUFDQWlDLE9BQUFBLENBQVFVLEdBQUcsQ0FBQzdDLElBQUFBLENBQUtFLEVBQUU7O1lBR25CLElBQUksQ0FBQ0YsS0FBS0UsRUFBRSxJQUFJRixLQUFLRSxFQUFFLENBQUM0QyxJQUFJLE9BQU8sSUFBSTtnQkFDckNiLE1BQUFBLENBQU9PLElBQUksQ0FBQztvQkFDVkMsS0FBQUEsRUFBTztvQkFDUEMsT0FBQUEsRUFBUyxDQUFDLGNBQWMsRUFBRUosS0FBQUEsQ0FBTSxpQkFBaUIsQ0FBQztvQkFDbERLLFFBQUFBLEVBQVU7Z0JBQ1o7WUFDRjtZQUVBLElBQUksQ0FBQzNDLEtBQUt3QixPQUFPLElBQUl4QixLQUFLd0IsT0FBTyxDQUFDc0IsSUFBSSxPQUFPLElBQUk7Z0JBQy9DYixNQUFBQSxDQUFPTyxJQUFJLENBQUM7b0JBQ1ZDLEtBQUFBLEVBQU87b0JBQ1BDLE9BQUFBLEVBQVM7b0JBQ1RDLFFBQUFBLEVBQVU7b0JBQ1ZDLE1BQUFBLEVBQVE1QyxLQUFLRSxFQUFBQTtnQkFDZjtZQUNGO1lBRUEsSUFBSSxDQUFDRixJQUFBQSxDQUFLQyxTQUFTLEVBQUU7Z0JBQ25CZ0MsTUFBQUEsQ0FBT08sSUFBSSxDQUFDO29CQUNWQyxLQUFBQSxFQUFPO29CQUNQQyxPQUFBQSxFQUFTO29CQUNUQyxRQUFBQSxFQUFVO29CQUNWQyxNQUFBQSxFQUFRNUMsS0FBS0UsRUFBQUE7Z0JBQ2Y7WUFDRjtZQUVBLElBQUksQ0FBQ0YsSUFBQUEsQ0FBS0osT0FBTyxFQUFFO2dCQUNqQnFDLE1BQUFBLENBQU9PLElBQUksQ0FBQztvQkFDVkMsS0FBQUEsRUFBTztvQkFDUEMsT0FBQUEsRUFBUztvQkFDVEMsUUFBQUEsRUFBVTtvQkFDVkMsTUFBQUEsRUFBUTVDLEtBQUtFLEVBQUFBO2dCQUNmO1lBQ0Y7O1lBR0EsSUFBSUYsSUFBQUEsQ0FBS0MsU0FBUyxJQUFJRCxJQUFBQSxDQUFLSixPQUFPLEVBQUU7Z0JBQ2xDLElBQUlJLElBQUFBLENBQUtDLFNBQVMsR0FBR0QsSUFBQUEsQ0FBS0osT0FBTyxFQUFFO29CQUNqQ3FDLE1BQUFBLENBQU9PLElBQUksQ0FBQzt3QkFDVkMsS0FBQUEsRUFBTzt3QkFDUEMsT0FBQUEsRUFBUzt3QkFDVEMsUUFBQUEsRUFBVTt3QkFDVkMsTUFBQUEsRUFBUTVDLEtBQUtFLEVBQUFBO29CQUNmO2dCQUNGO2dCQUVBLE1BQU02QyxXQUFXdkMsd0xBQUFBLENBQWlCUixJQUFBQSxDQUFLSixPQUFPLEVBQUVJLElBQUFBLENBQUtDLFNBQVMsSUFBSTtnQkFFbEUsSUFBSThDLFFBQUFBLEdBQVcsSUFBSSxDQUFDekUsa0JBQWtCLEVBQUU7b0JBQ3RDMkQsTUFBQUEsQ0FBT08sSUFBSSxDQUFDO3dCQUNWQyxLQUFBQSxFQUFPO3dCQUNQQyxPQUFBQSxFQUFTLENBQUMsZUFBZSxFQUFFSyxRQUFBQSxDQUFTLGlEQUFpRCxFQUFFLElBQUksQ0FBQ3pFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQzt3QkFDdEhxRSxRQUFBQSxFQUFVO3dCQUNWQyxNQUFBQSxFQUFRNUMsS0FBS0UsRUFBQUE7b0JBQ2Y7Z0JBQ0Y7Z0JBRUEsSUFBSTZDLFdBQVcsR0FBRztvQkFDaEJkLE1BQUFBLENBQU9PLElBQUksQ0FBQzt3QkFDVkMsS0FBQUEsRUFBTzt3QkFDUEMsT0FBQUEsRUFBUzt3QkFDVEMsUUFBQUEsRUFBVTt3QkFDVkMsTUFBQUEsRUFBUTVDLEtBQUtFLEVBQUFBO29CQUNmO2dCQUNGOztnQkFHQSxNQUFNN0MsTUFBTSxJQUFJTCxJQUFBQSxFQUFBQTtnQkFDaEIsTUFBTU0sV0FBQUEsR0FBY0MsK0tBQUFBLENBQVFGLEdBQUFBLEVBQUssTUFBTTtnQkFDdkMsTUFBTUcsZ0JBQUFBLEdBQW1CQywrS0FBQUEsQ0FBUUosR0FBQUEsRUFBSyxNQUFNO2dCQUU1QyxJQUFJMkMsSUFBQUEsQ0FBS0MsU0FBUyxHQUFHM0MsV0FBQUEsRUFBYTtvQkFDaEM0RSxRQUFBQSxDQUFTTSxJQUFJLENBQUM7d0JBQ1pDLEtBQUFBLEVBQU87d0JBQ1BDLE9BQUFBLEVBQVM7d0JBQ1RDLFFBQUFBLEVBQVU7d0JBQ1ZDLE1BQUFBLEVBQVE1QyxLQUFLRSxFQUFBQTtvQkFDZjtnQkFDRjtnQkFFQSxJQUFJRixJQUFBQSxDQUFLSixPQUFPLEdBQUdwQyxnQkFBQUEsRUFBa0I7b0JBQ25DMEUsUUFBQUEsQ0FBU00sSUFBSSxDQUFDO3dCQUNaQyxLQUFBQSxFQUFPO3dCQUNQQyxPQUFBQSxFQUFTO3dCQUNUQyxRQUFBQSxFQUFVO3dCQUNWQyxNQUFBQSxFQUFRNUMsS0FBS0UsRUFBQUE7b0JBQ2Y7Z0JBQ0Y7O2dCQUdBLElBQUlGLElBQUFBLENBQUt5QixJQUFJLElBQUl6QyxJQUFBQSxDQUFLZ0UsR0FBRyxDQUFDaEQsSUFBQUEsQ0FBS3lCLElBQUksR0FBR3NCLFFBQUFBLENBQUFBLEdBQVksR0FBRztvQkFDbkRiLFFBQUFBLENBQVNNLElBQUksQ0FBQzt3QkFDWkMsS0FBQUEsRUFBTzt3QkFDUEMsT0FBQUEsRUFBUyxDQUFDLFlBQVksRUFBRTFDLElBQUFBLENBQUt5QixJQUFJLENBQUMscUNBQXFDLEVBQUVzQixRQUFBQSxDQUFTLENBQUMsQ0FBQzt3QkFDcEZKLFFBQUFBLEVBQVU7d0JBQ1ZDLE1BQUFBLEVBQVE1QyxLQUFLRSxFQUFBQTtvQkFDZjtnQkFDRjtZQUNGO1FBQ0Y7O1FBR0EsSUFBSyxJQUFJK0MsQ0FBQUEsR0FBSSxHQUFHQSxJQUFJbkcsS0FBQUEsQ0FBTXFCLE1BQU0sRUFBRThFLENBQUFBLEVBQUFBLENBQUs7WUFDckMsSUFBSyxJQUFJQyxJQUFJRCxDQUFBQSxHQUFJLEdBQUdDLElBQUlwRyxLQUFBQSxDQUFNcUIsTUFBTSxFQUFFK0UsQ0FBQUEsRUFBQUEsQ0FBSztnQkFDekMsTUFBTUMsS0FBQUEsR0FBUXJHLEtBQUssQ0FBQ21HLENBQUFBLENBQUU7Z0JBQ3RCLE1BQU1HLEtBQUFBLEdBQVF0RyxLQUFLLENBQUNvRyxDQUFBQSxDQUFFO2dCQUV0QixJQUFJLENBQUNDLEtBQUFBLENBQU1sRCxTQUFTLElBQUksQ0FBQ2tELEtBQUFBLENBQU12RCxPQUFPLElBQUksQ0FBQ3dELE1BQU1uRCxTQUFTLElBQUksQ0FBQ21ELEtBQUFBLENBQU14RCxPQUFPLEVBQUU7O2dCQUc5RSxNQUFNeUQsT0FBQUEsR0FBVSxFQUFFRixLQUFBQSxDQUFNdkQsT0FBTyxHQUFHd0QsS0FBQUEsQ0FBTW5ELFNBQVMsSUFBSW1ELEtBQUFBLENBQU14RCxPQUFPLEdBQUd1RCxLQUFBQSxDQUFNbEQsU0FBQUEsQ0FBUTtnQkFFbkYsSUFBSW9ELE9BQUFBLEVBQVM7b0JBQ1huQixRQUFBQSxDQUFTTSxJQUFJLENBQUM7d0JBQ1pDLEtBQUFBLEVBQU87d0JBQ1BDLE9BQUFBLEVBQVMsQ0FBQyxLQUFLLEVBQUVTLEtBQUFBLENBQU1qRCxFQUFFLENBQUMsb0JBQW9CLEVBQUVrRCxLQUFBQSxDQUFNbEQsRUFBRSxDQUFDLGdFQUFnRSxDQUFDO3dCQUMxSHlDLFFBQUFBLEVBQVU7d0JBQ1ZDLE1BQUFBLEVBQVFPLE1BQU1qRCxFQUFBQTtvQkFDaEI7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsT0FBTztZQUNMOUMsT0FBQUEsRUFBUzZFLE1BQUFBLENBQU85RCxNQUFNLEtBQUs7WUFDM0I4RCxNQUFBQTtZQUNBQztRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE9BQU9vQixnQkFBQUEsQ0FBaUJ4RyxLQUFhLEVBQUVDLGFBQUFBLEdBQXNCLElBQUlDLE1BQU0sRUFBZTtRQUNwRixNQUFNYSxvQkFBb0I0QixrTEFBQUEsQ0FBVzFDLGFBQUFBLENBQUFBO1FBQ3JDLE1BQU13RyxnQkFBZ0JoRywrS0FBQUEsQ0FBUU0saUJBQUFBLEVBQW1CLElBQUksQ0FBQzZCLG1CQUFtQixHQUFHOztRQUc1RSxJQUFJOEQsb0JBQUFBLEdBQW9DO1FBRXhDLEtBQUssTUFBTXhELFFBQVFsRCxLQUFBQSxDQUFPO1lBQ3hCLElBQUkyRyxTQUFBQSxHQUFZaEUsa0xBQUFBLENBQVdPLElBQUFBLENBQUtDLFNBQVM7WUFDekMsTUFBTUwsT0FBQUEsR0FBVUgsa0xBQUFBLENBQVdPLElBQUFBLENBQUtKLE9BQU87WUFFdkMsTUFBTzZELGFBQWE3RCxPQUFBQSxDQUFTO2dCQUMzQixJQUFJNkQsU0FBQUEsSUFBYUYsYUFBQUEsSUFBaUJFLFNBQUFBLElBQWE1RixpQkFBQUEsRUFBbUI7b0JBQ2hFLElBQUksQ0FBQzJGLG9CQUFBQSxJQUF3QkMsU0FBQUEsR0FBWUQsb0JBQUFBLEVBQXNCO3dCQUM3REEsb0JBQUFBLEdBQXVCQyxTQUFBQTtvQkFDekI7Z0JBQ0Y7Z0JBQ0FBLFNBQUFBLEdBQVloRywrS0FBT0EsQ0FBQ2dHLFNBQUFBLEVBQVc7WUFDakM7UUFDRjtRQUVBLElBQUksQ0FBQ0Qsc0JBQXNCLE9BQU87O1FBR2xDLE9BQU8vRiwrS0FBQUEsQ0FBUStGLG9CQUFBQSxFQUFzQixJQUFJLENBQUM5RCxtQkFBbUI7SUFDL0Q7SUFFQTs7R0FFQyxHQUNELE9BQU9nRSxrQkFBQUEsQ0FBbUI1RyxLQUFhLEVBQUVDLGFBQW1CLEVBQU87UUFDakUsTUFBTXVDLE1BQUFBLEdBQVMsSUFBSSxDQUFDekMsd0JBQXdCLENBQUNDLEtBQUFBLEVBQU9DLGFBQUFBLENBQUFBO1FBRXBELE9BQU87WUFDTDRHLE9BQUFBLEVBQVM7Z0JBQ1B2RixhQUFBQSxFQUFla0IsT0FBT2xCLGFBQWE7Z0JBQ25DQyxhQUFBQSxFQUFlaUIsT0FBT2pCLGFBQWE7Z0JBQ25DRSxXQUFBQSxFQUFhZSxPQUFPZixXQUFXO2dCQUMvQkMsWUFBQUEsRUFBY2MsT0FBT2QsWUFBWTtnQkFDakNULFdBQUFBLEVBQWF1QixPQUFPdkIsV0FBVztnQkFDL0JVLFNBQUFBLEVBQVdhLE9BQU9iLFNBQUFBO1lBQ3BCO1lBQ0FtRixhQUFBQSxFQUFlOUcsS0FBQUEsQ0FBTStHLE1BQU0sQ0FBQzdELENBQUFBLE9BQzFCQSxJQUFBQSxDQUFLSixPQUFPLElBQUlOLE1BQUFBLENBQU92QixXQUFXLElBQUlpQyxJQUFBQSxDQUFLQyxTQUFTLElBQUlYLE9BQU9iLFNBQVM7WUFFMUVxRixjQUFBQSxFQUFnQnhFLE1BQUFBLENBQU9aLGlCQUFpQixDQUFDbUYsTUFBTSxDQUFDRSxDQUFBQSxHQUFBQSxHQUFPQSxHQUFBQSxDQUFJQyxjQUFjLEdBQUc7WUFDNUVDLFVBQUFBLEVBQVkzRSxNQUFBQSxDQUFPWixpQkFBaUIsQ0FBQ21GLE1BQU0sQ0FBQ0UsQ0FBQUEsR0FBQUEsR0FBT0EsSUFBSUcsV0FBVztZQUNsRUMsYUFBQUEsRUFBZSxJQUFJLENBQUNiLGdCQUFnQixDQUFDeEcsS0FBQUEsRUFBT0MsYUFBQUE7UUFDOUM7SUFDRjtJQUVBOztNQUdBLE9BQWVtQix5QkFBQUEsQ0FBMEJwQixLQUFhLEVBQVU7O1FBRTlELE1BQU1zSCxnQkFBQUEsR0FBbUIsSUFBSSxDQUFDcEMsYUFBYSxDQUFDbEYsS0FBQUEsQ0FBQUE7UUFDNUMsTUFBTXVILGNBQUFBLEdBQWlCRCxpQkFBaUJuQyxNQUFNO1FBRTlDLElBQUlvQyxjQUFBQSxDQUFlbEcsTUFBTSxHQUFHLEdBQUc7WUFDN0JULE9BQUFBLENBQVFDLElBQUksQ0FBQyxxQ0FBcUMwRyxjQUFBQSxDQUFBQTtRQUNwRDtRQUVBLE9BQU92SCxLQUFBQSxDQUNKK0csTUFBTSxDQUFDN0QsQ0FBQUEsSUFBQUEsR0FBQUE7O1lBRU4sSUFBSSxDQUFDQSxJQUFBQSxDQUFLQyxTQUFTLElBQUksQ0FBQ0QsSUFBQUEsQ0FBS0osT0FBTyxJQUFJLENBQUNJLElBQUFBLENBQUt3QixPQUFPLEVBQUUsT0FBTzs7WUFHOUQsSUFBSSxDQUFDcEUsK0tBQU9BLENBQUM0QyxJQUFBQSxDQUFLQyxTQUFTLEtBQUssQ0FBQzdDLCtLQUFBQSxDQUFRNEMsSUFBQUEsQ0FBS0osT0FBTyxHQUFHO2dCQUN0RGxDLE9BQUFBLENBQVFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRXFDLElBQUFBLENBQUtFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDaEQsT0FBTztZQUNUO1lBRUEsSUFBSUYsS0FBS0MsU0FBUyxHQUFHRCxJQUFBQSxDQUFLSixPQUFPLEVBQUUsT0FBTzs7WUFHMUMsTUFBTW1ELFdBQVd2Qyx3TEFBQUEsQ0FBaUJSLElBQUFBLENBQUtKLE9BQU8sRUFBRUksSUFBQUEsQ0FBS0MsU0FBUyxJQUFJO1lBQ2xFLElBQUk4QyxRQUFBQSxHQUFXLElBQUksQ0FBQ3pFLGtCQUFrQixFQUFFLE9BQU87O1lBRy9DLE1BQU1qQixNQUFNLElBQUlMLElBQUFBLEVBQUFBO1lBQ2hCLE1BQU1zSCxPQUFBQSxHQUFVL0csK0tBQUFBLENBQVFGLEdBQUFBLEVBQUssTUFBTTs7WUFDbkMsTUFBTWtILFVBQUFBLEdBQWE5RywrS0FBQUEsQ0FBUUosR0FBQUEsRUFBSyxNQUFNOztZQUV0QyxJQUFJMkMsS0FBS0osT0FBTyxHQUFHMEUsV0FBV3RFLElBQUFBLENBQUtDLFNBQVMsR0FBR3NFLFVBQUFBLEVBQVk7Z0JBQ3pEN0csT0FBQUEsQ0FBUUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFcUMsSUFBQUEsQ0FBS0UsRUFBRSxDQUFDLHVCQUF1QixDQUFDO2dCQUNyRCxPQUFPO1lBQ1Q7WUFFQSxPQUFPO1FBQ1QsR0FDQ2hCLEdBQUcsQ0FBQ2MsQ0FBQUEsSUFBQUEsR0FBQUE7WUFDSCxJQUFJO2dCQUNGLE1BQU13RSxjQUFBQSxHQUFpQjtvQkFDckIsR0FBR3hFLElBQUk7b0JBQ1BDLFNBQUFBLEVBQVcsSUFBSSxDQUFDbkMscUJBQXFCLENBQUNrQyxLQUFLQyxTQUFTO29CQUNwREwsT0FBQUEsRUFBUyxJQUFJLENBQUM5QixxQkFBcUIsQ0FBQ2tDLEtBQUtKLE9BQU87b0JBQ2hENkIsSUFBQUEsRUFBTWpCLHdMQUFnQkEsQ0FBQ1IsSUFBQUEsQ0FBS0osT0FBTyxFQUFFSSxJQUFBQSxDQUFLQyxTQUFTLElBQUk7Z0JBQ3pEOztnQkFHQSxJQUFJLENBQUM3QywrS0FBT0EsQ0FBQ29ILGNBQUFBLENBQWV2RSxTQUFTLEtBQUssQ0FBQzdDLCtLQUFBQSxDQUFRb0gsY0FBQUEsQ0FBZTVFLE9BQU8sR0FBRztvQkFDMUVsQyxPQUFBQSxDQUFROEIsS0FBSyxDQUFDLENBQUMsMkNBQTJDLEVBQUVRLElBQUFBLENBQUtFLEVBQUUsRUFBRTtvQkFDckUsT0FBTztnQkFDVDs7Z0JBR0EsTUFBTXVFLFVBQUFBLEdBQWEsSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0YsY0FBQUEsQ0FBZXZFLFNBQVMsRUFBRXVFLGNBQUFBLENBQWU1RSxPQUFPO2dCQUMzRixJQUFJNkUsVUFBQUEsRUFBWTtvQkFDZC9HLE9BQUFBLENBQVFpSCxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUzRSxJQUFBQSxDQUFLRSxFQUFFLENBQUMsaUJBQWlCLENBQUM7Z0JBQ2xEO2dCQUVBLE9BQU9zRSxjQUFBQTtZQUNULEVBQUUsT0FBT2hGLEtBQUFBLEVBQU87Z0JBQ2Q5QixPQUFBQSxDQUFROEIsS0FBSyxDQUFDLENBQUMsdUJBQXVCLEVBQUVRLEtBQUtFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRVYsS0FBQUEsQ0FBQUE7Z0JBQ3BELE9BQU87WUFDVDtRQUNGLEdBQ0NxRSxNQUFNLENBQUMsQ0FBQzdELE9BQXVCQSxJQUFBQSxLQUFTLE1BQ3hDNEUsSUFBSSxDQUFDLENBQUNDLEdBQUdDLENBQUFBLEdBQU1ELENBQUFBLENBQUU1RSxTQUFTLENBQUM4RSxPQUFPLEtBQUtELENBQUFBLENBQUU3RSxTQUFTLENBQUM4RSxPQUFPO0lBQy9EO0lBRUE7O0dBRUMsR0FDRCxPQUFlbkcsa0JBQUFBLENBQ2I5QixLQUFhLEVBQ2JpQixXQUFpQixFQUNqQlUsU0FBZSxFQUNRO1FBQ3ZCLE1BQU1FLGFBQWEsSUFBSXFHLEdBQUFBLEVBQUFBO1FBRXZCLEtBQUssTUFBTWhGLFFBQVFsRCxLQUFBQSxDQUFPOztZQUV4QixJQUFJa0QsS0FBS0osT0FBTyxHQUFHN0IsZUFBZWlDLElBQUFBLENBQUtDLFNBQVMsR0FBR3hCLFNBQUFBLEVBQVc7O1lBRzlELE1BQU00QixlQUFlTCxJQUFBQSxDQUFLQyxTQUFTLEdBQUdsQyxXQUFBQSxHQUFjaUMsSUFBQUEsQ0FBS0MsU0FBUyxHQUFHbEMsV0FBQUE7WUFDckUsTUFBTXVDLGFBQWFOLElBQUFBLENBQUtKLE9BQU8sR0FBR25CLFNBQUFBLEdBQVl1QixJQUFBQSxDQUFLSixPQUFPLEdBQUduQixTQUFBQTs7WUFHN0QsSUFBSW9DLFdBQUFBLEdBQWMsSUFBSTdELElBQUFBLENBQUtxRCxZQUFBQSxDQUFBQTtZQUMzQixNQUFPUSxlQUFlUCxVQUFBQSxDQUFZO2dCQUNoQyxNQUFNMkUsT0FBQUEsR0FBVXBFLFlBQVlxRSxXQUFXLEdBQUdDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFFdkQsSUFBSSxDQUFDeEcsVUFBQUEsQ0FBVzRELEdBQUcsQ0FBQzBDLE9BQUFBLENBQUFBLEVBQVU7b0JBQzVCdEcsVUFBQUEsQ0FBV3lHLEdBQUcsQ0FBQ0gsT0FBQUEsRUFBUyxFQUFFO2dCQUM1QjtnQkFDQXRHLFVBQUFBLENBQVcwRyxHQUFHLENBQUNKLE9BQUFBLENBQUFBLENBQVV6QyxJQUFJLENBQUN4QyxLQUFLRSxFQUFFO2dCQUVyQ1csV0FBQUEsR0FBY3BELCtLQUFPQSxDQUFDb0QsV0FBQUEsRUFBYTtZQUNyQztRQUNGO1FBRUEsT0FBT2xDLFVBQUFBO0lBQ1Q7SUFFQTs7R0FFQyxHQUNELE9BQWVHLG9DQUFBQSxDQUNiSCxVQUFpQyxFQUNqQ1osV0FBaUIsRUFDakJVLFNBQWUsRUFDTztRQUN0QixNQUFNNkcsU0FBK0IsRUFBRTtRQUV2QyxJQUFJekUsV0FBQUEsR0FBYyxJQUFJN0QsSUFBQUEsQ0FBS2UsV0FBQUEsQ0FBQUE7UUFDM0IsTUFBTzhDLGVBQWVwQyxTQUFBQSxDQUFXO1lBQy9CLE1BQU1xQixjQUFjdkMsK0tBQUFBLENBQVFzRCxXQUFBQSxFQUFhLElBQUksQ0FBQ25CLG1CQUFtQixHQUFHO1lBQ3BFLE1BQU02RixTQUFBQSxHQUFZLElBQUl2SSxJQUFBQSxDQUFLNkQsV0FBQUEsQ0FBQUE7O1lBRzNCLElBQUl0QixZQUFBQSxHQUFlO1lBQ25CLElBQUlrRSxTQUFBQSxHQUFZLElBQUl6RyxJQUFBQSxDQUFLOEMsV0FBQUEsQ0FBQUE7WUFFekIsTUFBTzJELGFBQWE4QixTQUFBQSxDQUFXO2dCQUM3QixNQUFNTixPQUFBQSxHQUFVeEIsVUFBVXlCLFdBQVcsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyRCxJQUFJeEcsVUFBQUEsQ0FBVzRELEdBQUcsQ0FBQzBDLE9BQUFBLENBQUFBLEVBQVU7b0JBQzNCMUYsWUFBQUEsRUFBQUE7Z0JBQ0Y7Z0JBQ0FrRSxTQUFBQSxHQUFZaEcsK0tBQU9BLENBQUNnRyxTQUFBQSxFQUFXO1lBQ2pDO1lBRUEsTUFBTWpGLFlBQUFBLEdBQWVRLEtBQUtDLEdBQUcsQ0FBQyxHQUFHTSxZQUFBQSxHQUFlLElBQUksQ0FBQ2pCLGtCQUFrQjtZQUV2RWdILE1BQUFBLENBQU85QyxJQUFJLENBQUM7Z0JBQ1ZnRCxJQUFBQSxFQUFNLElBQUl4SSxJQUFBQSxDQUFLNkQsV0FBQUEsQ0FBQUE7Z0JBQ2ZmLFdBQUFBLEVBQWEsSUFBSTlDLElBQUFBLENBQUs4QyxXQUFBQSxDQUFBQTtnQkFDdEJ5RixTQUFBQSxFQUFXLElBQUl2SSxJQUFBQSxDQUFLdUksU0FBQUEsQ0FBQUE7Z0JBQ3BCaEcsWUFBQUE7Z0JBQ0FoQixXQUFBQSxFQUFhQyxZQUFBQSxLQUFpQjtnQkFDOUJBO1lBQ0Y7WUFFQXFDLFdBQUFBLEdBQWNwRCwrS0FBT0EsQ0FBQ29ELFdBQUFBLEVBQWE7UUFDckM7UUFFQSxPQUFPeUUsTUFBQUE7SUFDVDtJQUVBOztNQUdBLE9BQWVqRywwQkFDYlYsVUFBaUMsRUFDakNFLGFBQW1DLEVBQ25DZCxXQUFpQixFQUNqQlUsU0FBZSxFQUNDO1FBQ2hCLE1BQU1nSCxZQUE0QixFQUFFO1FBRXBDLElBQUk1RSxXQUFBQSxHQUFjLElBQUk3RCxJQUFBQSxDQUFLZSxXQUFBQSxDQUFBQTtRQUMzQixJQUFJMkgsVUFBQUEsR0FBYTtRQUVqQixNQUFPN0UsZUFBZXBDLFNBQUFBLENBQVc7WUFDL0IsTUFBTXdHLE9BQUFBLEdBQVVwRSxZQUFZcUUsV0FBVyxHQUFHQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkQsTUFBTVEsV0FBQUEsR0FBY2hILFVBQUFBLENBQVcwRyxHQUFHLENBQUNKLFlBQVksRUFBRTtZQUNqRCxNQUFNakIsY0FBQUEsR0FBaUIyQixXQUFBQSxDQUFZeEgsTUFBTSxHQUFHLElBQUksSUFBSTtZQUVwRCxNQUFNeUgsWUFBQUEsR0FBZS9HLGFBQWEsQ0FBQzZHLFVBQUFBLENBQVc7WUFFOUNELFNBQUFBLENBQVVqRCxJQUFJLENBQUM7Z0JBQ2JnRCxJQUFBQSxFQUFNLElBQUl4SSxJQUFBQSxDQUFLNkQsV0FBQUEsQ0FBQUE7Z0JBQ2ZtRCxjQUFBQTtnQkFDQTZCLHNCQUFBQSxFQUF3QkQsYUFBYXJHLFlBQVk7Z0JBQ2pEMkUsV0FBQUEsRUFBYSxDQUFDMEIsYUFBYXJILFdBQVc7Z0JBQ3RDdUgsaUJBQUFBLEVBQW1CSDtZQUNyQjtZQUVBOUUsV0FBQUEsR0FBY3BELCtLQUFPQSxDQUFDb0QsV0FBQUEsRUFBYTtZQUNuQzZFLFVBQUFBLEVBQUFBO1FBQ0Y7UUFFQSxPQUFPRCxTQUFBQTtJQUNUO0lBRUE7O01BR0EsT0FBZTNILHFCQUFBQSxDQUFzQjBILElBQVUsRUFBUTs7UUFFckQsTUFBTU8sYUFBYXRHLGtMQUFBQSxDQUFXK0YsSUFBQUEsQ0FBQUE7O1FBRzlCLElBQUksQ0FBQ3BJLCtLQUFPQSxDQUFDMkksVUFBQUEsQ0FBQUEsRUFBYTtZQUN4QixNQUFNLElBQUk1SSxLQUFBQSxDQUFNLENBQUMsMEJBQTBCLEVBQUVxSSxJQUFBQSxDQUFBQSxDQUFNO1FBQ3JEO1FBRUEsT0FBT08sVUFBQUE7SUFDVDtJQUVBOztNQUdBLE9BQWUvSCxvQkFBQUEsQ0FBcUJqQixhQUFtQixFQUFROztRQUU3RCxNQUFNZ0IsY0FBY1IsK0tBQUFBLENBQVFSLGFBQUFBLEVBQWUsSUFBSSxDQUFDMkMsbUJBQW1CLEdBQUc7O1FBR3RFLElBQUksQ0FBQ3RDLCtLQUFPQSxDQUFDVyxXQUFBQSxDQUFBQSxFQUFjO1lBQ3pCLE1BQU0sSUFBSVosS0FBQUEsQ0FBTSxDQUFDLHFEQUFxRCxFQUFFUyw4S0FBQUEsQ0FBT2IsZUFBZSxlQUFlO1FBQy9HOztRQUdBLE1BQU1pSixPQUFBQSxHQUFVakosY0FBY2tKLFdBQVc7UUFDekMsTUFBTUMsU0FBQUEsR0FBWW5JLFlBQVlrSSxXQUFXO1FBRXpDLElBQUlELFlBQVlFLFNBQUFBLEVBQVc7WUFDekIsTUFBTUMsZUFBQUEsR0FBa0JDLGtMQUFBQSxDQUFXSixPQUFBQSxDQUFBQSxJQUFZSSxrTEFBQUEsQ0FBV0YsU0FBQUEsQ0FBQUE7WUFDMUQsSUFBSUMsZUFBQUEsRUFBaUI7Z0JBQ25CekksT0FBQUEsQ0FBUWlILEtBQUssQ0FBQyxDQUFDLDJDQUEyQyxFQUFFdUIsU0FBQUEsQ0FBVSxDQUFDLEVBQUVGLE9BQUFBLENBQUFBLENBQVM7WUFDcEY7UUFDRjtRQUVBLE9BQU9qSSxXQUFBQTtJQUNUO0lBRUE7O0dBRUMsR0FDRCxPQUFlMkcsa0JBQUFBLENBQW1CekUsU0FBZSxFQUFFTCxPQUFhLEVBQVc7UUFDekUsTUFBTXNHLFNBQUFBLEdBQVlqRyxVQUFVZ0csV0FBVztRQUN2QyxNQUFNSSxPQUFBQSxHQUFVekcsUUFBUXFHLFdBQVc7O1FBR25DLElBQUssSUFBSUssSUFBQUEsR0FBT0osU0FBQUEsRUFBV0ksSUFBQUEsSUFBUUQsU0FBU0MsSUFBQUEsRUFBQUEsQ0FBUTtZQUNsRCxJQUFJRixrTEFBVUEsQ0FBQ0UsSUFBQUEsQ0FBQUEsRUFBTztnQkFDcEIsTUFBTUMsVUFBVSxJQUFJdkosSUFBQUEsQ0FBS3NKLElBQUFBLEVBQU0sR0FBRzs7Z0JBQ2xDLElBQUlDLE9BQUFBLElBQVd0RyxTQUFBQSxJQUFhc0csT0FBQUEsSUFBVzNHLE9BQUFBLEVBQVM7b0JBQzlDLE9BQU87Z0JBQ1Q7WUFDRjtRQUNGO1FBRUEsT0FBTztJQUNUO0FBQ0Y7QUFwc0JhaEQsd0JBQUFBLENBQ2EwQixrQkFBQUEsR0FBcUI7QUFEbEMxQix3QkFBQUEsQ0FFYThDLG1CQUFBQSxHQUFzQjtBQ01oRDs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNOEcsb0JBQUFBLENBQUFBO0lBWVg7O0dBRUMsR0FDREMsaUJBQUFBLENBQWtCQyxRQUFtQixFQUFFaEcsYUFBcUIsRUFBb0I7O1FBRTlFLElBQUksQ0FBQyxJQUFJLENBQUNpRyxnQkFBZ0IsQ0FBQ0QsUUFBQUEsQ0FBQUEsRUFBVztZQUNwQyxPQUFPO2dCQUNMdEosT0FBQUEsRUFBUztnQkFDVHdKLFNBQUFBLEVBQVcsRUFBRTtnQkFDYmxFLE9BQUFBLEVBQVM7Z0JBQ1RtRSxhQUFBQSxFQUFlO1lBQ2pCO1FBQ0Y7O1FBR0EsTUFBTUMsa0JBQUFBLEdBQXFCO1lBQ3pCQyxLQUFBQSxFQUFPdEgsa0xBQUFBLENBQVdpSCxTQUFTSyxLQUFLO1lBQ2hDQyxHQUFBQSxFQUFLQyxnTEFBQUEsQ0FBU1AsU0FBU00sR0FBRztRQUM1QjtRQUVBLE1BQU1KLFlBQThCLEVBQUU7UUFDdEMsTUFBTUMsZ0JBQXdCLEVBQUU7O1FBR2hDLEtBQUssTUFBTTdHLFFBQVFVLGFBQUFBLENBQWU7WUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQ3dHLFdBQVcsQ0FBQ2xILElBQUFBLENBQUFBLEVBQU87WUFFN0IsTUFBTW1ILFNBQUFBLEdBQVk7Z0JBQ2hCSixLQUFBQSxFQUFPdEgsa0xBQUFBLENBQVdPLEtBQUtDLFNBQVM7Z0JBQ2hDK0csR0FBQUEsRUFBS0MsZ0xBQUFBLENBQVNqSCxLQUFLSixPQUFPO1lBQzVCOztZQUdBLE1BQU13SCxVQUFBQSxHQUFhLElBQUksQ0FBQ0MsYUFBYSxDQUFDUCxrQkFBQUEsRUFBb0JLLFNBQUFBLENBQUFBO1lBRTFELElBQUlDLFVBQUFBLEVBQVk7Z0JBQ2QsTUFBTUUsaUJBQWlCLElBQUksQ0FBQ0MsdUJBQXVCLENBQ2pEVCxvQkFDQUssU0FBQUEsRUFDQW5ILElBQUFBLENBQUFBOztnQkFJRixJQUFJLElBQUksQ0FBQ3dILG9CQUFvQixDQUFDRixjQUFBQSxFQUFnQlIsb0JBQW9CSyxTQUFBQSxDQUFBQSxFQUFZO29CQUM1RVAsU0FBQUEsQ0FBVXBFLElBQUksQ0FBQzhFLGNBQUFBLENBQUFBO2dCQUNqQjs7Z0JBR0EsSUFBSSxDQUFDRyx3QkFBd0IsQ0FBQ3pILElBQUFBLEVBQU02RyxhQUFBQSxDQUFBQTtZQUN0QztRQUNGOztRQUdBLE1BQU1hLGdCQUFBQSxHQUFtQixJQUFJLENBQUNDLG1CQUFtQixDQUFDakgsYUFBQUEsQ0FBQUE7UUFFbEQsT0FBTztZQUNMdEQsT0FBQUEsRUFBU3dKLFNBQUFBLENBQVV6SSxNQUFNLEtBQUs7WUFDOUJ5SSxTQUFBQTtZQUNBbEUsT0FBQUEsRUFBUyxJQUFJLENBQUNrRix5QkFBeUIsQ0FBQ2hCLFNBQUFBLENBQUFBO1lBQ3hDQyxhQUFBQSxFQUFlYTtRQUNqQjtJQUNGO0lBRUE7O01BR0FDLG1CQUFBQSxDQUFvQjdLLEtBQWEsRUFBVTtRQUN6QyxNQUFNK0osZ0JBQXdCLEVBQUU7UUFFaEMsS0FBSyxNQUFNN0csUUFBUWxELEtBQUFBLENBQU87WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQ29LLFdBQVcsQ0FBQ2xILElBQUFBLENBQUFBLEVBQU87WUFDN0IsSUFBSSxDQUFDeUgsd0JBQXdCLENBQUN6SCxJQUFBQSxFQUFNNkcsYUFBQUEsQ0FBQUE7UUFDdEM7O1FBR0EsT0FBTztlQUFJLElBQUl6RSxJQUFJeUUsYUFBQUEsQ0FBYzNILEdBQUcsQ0FBQzJJLENBQUFBLENBQUFBLEdBQUtBLEVBQUU5QyxPQUFPO1NBQUssQ0FDckQ3RixHQUFHLENBQUM0SSxDQUFBQSxJQUFBQSxHQUFRLElBQUk5SyxLQUFLOEssSUFBQUEsQ0FBQUEsQ0FBQUEsQ0FDckJsRCxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsQ0FBQUEsR0FBTUQsQ0FBQUEsQ0FBRUUsT0FBTyxLQUFLRCxFQUFFQyxPQUFPO0lBQzNDO0lBRUE7O0dBRUMsR0FDRGdELGNBQUFBLENBQWV2QyxJQUFVLEVBQUU5RSxhQUFxQixFQUFXO1FBQ3pELE1BQU1zSCxpQkFBaUJ2SSxrTEFBQUEsQ0FBVytGLElBQUFBLENBQUFBO1FBRWxDLE9BQU85RSxhQUFBQSxDQUFjdUgsSUFBSSxDQUFDakksQ0FBQUEsSUFBQUEsR0FBQUE7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQ2tILFdBQVcsQ0FBQ2xILE9BQU8sT0FBTztZQUVwQyxNQUFNRyxTQUFBQSxHQUFZVixrTEFBQUEsQ0FBV08sSUFBQUEsQ0FBS0MsU0FBUztZQUMzQyxNQUFNRyxPQUFBQSxHQUFVWCxrTEFBQUEsQ0FBV08sSUFBQUEsQ0FBS0osT0FBTztZQUV2QyxPQUFPb0ksY0FBQUEsSUFBa0I3SCxhQUFhNkgsY0FBQUEsSUFBa0I1SCxPQUFBQTtRQUMxRDtJQUNGO0lBRUE7O0dBRUMsR0FDRDhILGNBQUFBLENBQWUxQyxJQUFVLEVBQUU5RSxhQUFxQixFQUFVO1FBQ3hELE1BQU1zSCxpQkFBaUJ2SSxrTEFBQUEsQ0FBVytGLElBQUFBLENBQUFBO1FBRWxDLE9BQU85RSxhQUFBQSxDQUFjbUQsTUFBTSxDQUFDN0QsQ0FBQUEsSUFBQUEsR0FBQUE7WUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQ2tILFdBQVcsQ0FBQ2xILE9BQU8sT0FBTztZQUVwQyxNQUFNRyxTQUFBQSxHQUFZVixrTEFBQUEsQ0FBV08sSUFBQUEsQ0FBS0MsU0FBUztZQUMzQyxNQUFNRyxPQUFBQSxHQUFVWCxrTEFBQUEsQ0FBV08sSUFBQUEsQ0FBS0osT0FBTztZQUV2QyxPQUFPb0ksY0FBQUEsSUFBa0I3SCxhQUFhNkgsY0FBQUEsSUFBa0I1SCxPQUFBQTtRQUMxRDtJQUNGO0lBRUE7O01BR0ErSCwwQkFBQUEsQ0FDRUMsY0FBb0IsRUFDcEJDLFlBQW9CLEVBQ3BCM0gsYUFBcUIsRUFDckI0SCxXQUFBQSxHQUFzQixHQUFHLEVBQ1A7UUFDbEIsSUFBSWpILFdBQVc1QixrTEFBQUEsQ0FBVzJJLGNBQUFBLENBQUFBO1FBQzFCLE1BQU1HLGFBQUFBLEdBQWdCLElBQUl2TCxJQUFBQSxDQUFLcUUsUUFBQUEsQ0FBUzBELE9BQU8sS0FBTXVELFdBQUFBLEdBQWMsS0FBSyxLQUFLLEtBQUs7UUFFbEYsTUFBT2pILFlBQVlrSCxhQUFBQSxDQUFlO1lBQ2hDLE1BQU1DLFNBQUFBLEdBQXVCO2dCQUMzQnpCLEtBQUFBLEVBQU8xRixRQUFBQTtnQkFDUDJGLEdBQUFBLEVBQUssSUFBSWhLLElBQUFBLENBQUtxRSxRQUFBQSxDQUFTMEQsT0FBTyxLQUFPc0QsQ0FBQUEsWUFBQUEsSUFBZSxJQUFLLEtBQUssS0FBSyxLQUFLO1lBQzFFO1lBRUEsTUFBTTNHLFVBQUFBLEdBQWEsSUFBSSxDQUFDK0UsaUJBQWlCLENBQUMrQixTQUFBQSxFQUFXOUgsYUFBQUEsQ0FBQUE7WUFDckQsSUFBSWdCLFVBQUFBLENBQVd0RSxPQUFPLEVBQUU7Z0JBQ3RCLE9BQU9vTCxTQUFBQTtZQUNUOztZQUdBbkgsUUFBQUEsR0FBVyxJQUFJckUsSUFBQUEsQ0FBS3FFLFFBQUFBLENBQVMwRCxPQUFPLEtBQU0sS0FBSyxLQUFLLEtBQUs7UUFDM0Q7UUFFQSxPQUFPO0lBQ1Q7SUFFQTs7R0FFQyxHQUNEMEQsd0JBQ0VDLGVBQTBCLEVBQzFCTCxZQUFvQixFQUNwQjNILGFBQXFCLEVBQ1I7UUFDYixNQUFNaUksY0FBMkIsRUFBRTtRQUNuQyxNQUFNNUYsUUFBQUEsR0FBV3NGLGdCQUFnQjdILHdMQUFBQSxDQUFpQmtJLGVBQUFBLENBQWdCMUIsR0FBRyxFQUFFMEIsZUFBQUEsQ0FBZ0IzQixLQUFLLElBQUk7O1FBR2hHLE1BQU02QixXQUFBQSxHQUFjLElBQUk1TCxJQUFBQSxDQUFLMEwsZUFBQUEsQ0FBZ0IzQixLQUFLLENBQUNoQyxPQUFPLEtBQU0sS0FBSyxLQUFLLEtBQUssS0FBSztRQUNwRixNQUFNOEQsZUFBZSxJQUFJLENBQUNWLDBCQUEwQixDQUFDUyxXQUFBQSxFQUFhN0YsVUFBVXJDLGFBQUFBLEVBQWU7UUFDM0YsSUFBSW1JLGdCQUFnQkEsWUFBQUEsQ0FBYTlCLEtBQUssR0FBRzJCLGVBQUFBLENBQWdCM0IsS0FBSyxFQUFFO1lBQzlENEIsV0FBQUEsQ0FBWW5HLElBQUksQ0FBQ3FHLFlBQUFBLENBQUFBO1FBQ25COztRQUdBLE1BQU1DLFNBQUFBLEdBQVksSUFBSTlMLElBQUFBLENBQUswTCxlQUFBQSxDQUFnQjFCLEdBQUcsQ0FBQ2pDLE9BQU8sS0FBTSxLQUFLLEtBQUssS0FBSztRQUMzRSxNQUFNZ0UsYUFBYSxJQUFJLENBQUNaLDBCQUEwQixDQUFDVyxTQUFBQSxFQUFXL0YsVUFBVXJDLGFBQUFBLEVBQWU7UUFDdkYsSUFBSXFJLFVBQUFBLEVBQVk7WUFDZEosV0FBQUEsQ0FBWW5HLElBQUksQ0FBQ3VHLFVBQUFBLENBQUFBO1FBQ25CO1FBRUEsT0FBT0osV0FBQUEsQ0FBWUssS0FBSyxDQUFDLEdBQUc7O0lBQzlCO0lBRUE7O0dBRUMsR0FDREMsMEJBQUFBLENBQ0VDLFNBQXNCLEVBQ3RCeEksYUFBcUIsRUFDa0I7UUFDdkMsTUFBTXlJLFVBQWlELEVBQUM7O1FBR3hELElBQUlDLGFBQUFBLEdBQWdCO2VBQUkxSTtTQUFjO1FBRXRDd0ksU0FBQUEsQ0FBVTdHLE9BQU8sQ0FBQyxDQUFDZ0gsS0FBQUEsRUFBTy9HLEtBQUFBLEdBQUFBOztZQUV4QixNQUFNaEQsTUFBQUEsR0FBUyxJQUFJLENBQUNtSCxpQkFBaUIsQ0FBQzRDLEtBQUFBLEVBQU9ELGFBQUFBLENBQUFBO1lBQzdDRCxPQUFPLENBQUM3RyxNQUFNLEdBQUdoRCxNQUFBQTs7WUFHakIsSUFBSUEsTUFBQUEsQ0FBT2xDLE9BQU8sRUFBRTtnQkFDbEJnTSxhQUFBQSxDQUFjNUcsSUFBSSxDQUFDO29CQUNqQnRDLEVBQUFBLEVBQUksQ0FBQyxLQUFLLEVBQUVvQyxLQUFBQSxDQUFBQSxDQUFPO29CQUNuQmQsT0FBQUEsRUFBUztvQkFDVHZCLFNBQUFBLEVBQVdvSixNQUFNdEMsS0FBSztvQkFDdEJuSCxPQUFBQSxFQUFTeUosTUFBTXJDLEdBQUc7b0JBQ2xCdkYsSUFBQUEsRUFBTWpCLHdMQUFnQkEsQ0FBQzZJLEtBQUFBLENBQU1yQyxHQUFHLEVBQUVxQyxLQUFBQSxDQUFNdEMsS0FBSyxJQUFJO2dCQUNuRDtZQUNGO1FBQ0Y7UUFFQSxPQUFPb0MsT0FBQUE7SUFDVDtJQUVBOztHQUVDLEdBQ0QsYUFBUTlCLENBQWNpQyxNQUFpQixFQUFFQyxNQUFpQixFQUFXO1FBQ25FLE9BQU9DLCtMQUFBQSxDQUNMO1lBQUV6QyxLQUFBQSxFQUFPdUMsT0FBT3ZDLEtBQUs7WUFBRUMsR0FBQUEsRUFBS3NDLE9BQU90QyxHQUFBQTtTQUFJLEVBQ3ZDO1lBQUVELEtBQUFBLEVBQU93QyxPQUFPeEMsS0FBSztZQUFFQyxHQUFBQSxFQUFLdUMsT0FBT3ZDLEdBQUFBO1FBQUk7SUFFM0M7SUFFQTs7R0FFQyxHQUNELHVCQUFRTyxDQUNOYixRQUFtQixFQUNuQlMsU0FBb0IsRUFDcEJuSCxJQUFVLEVBQ007O1FBRWhCLE1BQU15SixhQUFBQSxHQUFnQi9DLFFBQUFBLENBQVNLLEtBQUssR0FBR0ksU0FBQUEsQ0FBVUosS0FBSyxHQUFHTCxRQUFBQSxDQUFTSyxLQUFLLEdBQUdJLFNBQUFBLENBQVVKLEtBQUs7UUFDekYsTUFBTTJDLFdBQUFBLEdBQWNoRCxRQUFBQSxDQUFTTSxHQUFHLEdBQUdHLFNBQUFBLENBQVVILEdBQUcsR0FBR04sUUFBQUEsQ0FBU00sR0FBRyxHQUFHRyxTQUFBQSxDQUFVSCxHQUFHO1FBQy9FLE1BQU0yQyxXQUFBQSxHQUFjbkosd0xBQUFBLENBQWlCa0osV0FBQUEsRUFBYUQsYUFBQUEsQ0FBQUEsR0FBaUI7UUFFbkUsT0FBTztZQUNMN0csTUFBQUEsRUFBUTVDLEtBQUtFLEVBQUU7WUFDZjBKLFdBQUFBLEVBQWE1SixLQUFLd0IsT0FBTztZQUN6QmlJLGFBQUFBO1lBQ0FDLFdBQUFBO1lBQ0FDLFdBQUFBLEVBQWEzSyxJQUFBQSxDQUFLQyxHQUFHLENBQUMsR0FBRzBLLFdBQUFBO1FBQzNCO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELG9CQUFRbkMsQ0FDTnFDLFFBQXdCLEVBQ3hCbkQsUUFBbUIsRUFDbkJTLFNBQW9CLEVBQ1g7O1FBRVQsSUFBSSxJQUFJLENBQUMyQyxNQUFNLENBQUNDLFVBQVUsRUFBRSxPQUFPOztRQUduQyxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxrQkFBa0IsRUFBRTtZQUNsQyxNQUFNQyxtQkFBQUEsR0FDSixRQUFDdkQsQ0FBU0ssS0FBSyxDQUFDaEMsT0FBTyxPQUFPb0MsVUFBVUgsR0FBRyxDQUFDakMsT0FBTyxNQUNsRDJCLFFBQUFBLENBQVNNLEdBQUcsQ0FBQ2pDLE9BQU8sT0FBT29DLFNBQUFBLENBQVVKLEtBQUssQ0FBQ2hDLE9BQU87WUFFckQsSUFBSWtGLHFCQUFxQixPQUFPO1FBQ2xDOztRQUdBLElBQUksSUFBSSxDQUFDSCxNQUFNLENBQUNJLHNCQUFzQixJQUFJTCxRQUFBQSxDQUFTRixXQUFXLElBQUksR0FBRztZQUNuRSxPQUFPO1FBQ1Q7UUFFQSxPQUFPO0lBQ1Q7SUFFQTs7R0FFQyxHQUNELHdCQUFRbEMsQ0FBeUJ6SCxJQUFVLEVBQUU2RyxhQUFxQixFQUFRO1FBQ3hFLE1BQU1FLEtBQUFBLEdBQVF0SCxrTEFBQUEsQ0FBV08sSUFBQUEsQ0FBS0MsU0FBUztRQUN2QyxNQUFNK0csR0FBQUEsR0FBTXZILGtMQUFBQSxDQUFXTyxJQUFBQSxDQUFLSixPQUFPO1FBRW5DLElBQUlpQixXQUFBQSxHQUFjLElBQUk3RCxJQUFBQSxDQUFLK0osS0FBQUEsQ0FBQUE7UUFDM0IsTUFBT2xHLGVBQWVtRyxHQUFBQSxDQUFLO1lBQ3pCSCxhQUFBQSxDQUFjckUsSUFBSSxDQUFDLElBQUl4RixJQUFBQSxDQUFLNkQsV0FBQUEsQ0FBQUEsQ0FBQUE7WUFDNUJBLFdBQUFBLEdBQWMsSUFBSTdELElBQUFBLENBQUs2RCxXQUFBQSxDQUFZa0UsT0FBTyxLQUFNLEtBQUssS0FBSyxLQUFLO1FBQ2pFO0lBQ0Y7SUFFQTs7TUFHUTZDLHlCQUFBQSxDQUEwQmhCLFNBQTJCLEVBQVU7UUFDckUsSUFBSUEsU0FBQUEsQ0FBVXpJLE1BQU0sS0FBSyxHQUFHO1lBQzFCLE9BQU87UUFDVDtRQUVBLElBQUl5SSxTQUFBQSxDQUFVekksTUFBTSxLQUFLLEdBQUc7WUFDMUIsTUFBTTBMLFFBQUFBLEdBQVdqRCxTQUFTLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsb0NBQW9DLEVBQUVpRCxRQUFBQSxDQUFTRCxXQUFXLENBQUMsRUFBRSxFQUFFQyxRQUFBQSxDQUFTRixXQUFXLENBQUMsSUFBSSxFQUFFRSxTQUFTRixXQUFXLEtBQUssSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzVJO1FBRUEsT0FBTyxDQUFDLG9CQUFvQixFQUFFL0MsVUFBVXpJLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDakU7SUFFQTs7TUFHUXdJLGdCQUFBQSxDQUFpQjBDLEtBQWdCLEVBQVc7UUFDbEQsSUFBSSxDQUFDQSxLQUFBQSxJQUFTLENBQUNBLEtBQUFBLENBQU10QyxLQUFLLElBQUksQ0FBQ3NDLEtBQUFBLENBQU1yQyxHQUFHLEVBQUUsT0FBTztRQUNqRCxJQUFJLENBQUM1SiwrS0FBQUEsQ0FBUWlNLEtBQUFBLENBQU10QyxLQUFLLEtBQUssQ0FBQzNKLCtLQUFBQSxDQUFRaU0sS0FBQUEsQ0FBTXJDLEdBQUcsR0FBRyxPQUFPO1FBQ3pELElBQUlxQyxNQUFNdEMsS0FBSyxHQUFHc0MsS0FBQUEsQ0FBTXJDLEdBQUcsRUFBRSxPQUFPO1FBQ3BDLE9BQU87SUFDVDtJQUVBOztNQUdRRSxXQUFBQSxDQUFZbEgsSUFBVSxFQUFXO1FBQ3ZDLElBQUksQ0FBQ0EsSUFBQUEsSUFBUSxDQUFDQSxJQUFBQSxDQUFLQyxTQUFTLElBQUksQ0FBQ0QsSUFBQUEsQ0FBS0osT0FBTyxFQUFFLE9BQU87UUFDdEQsSUFBSSxDQUFDeEMsK0tBQUFBLENBQVE0QyxJQUFBQSxDQUFLQyxTQUFTLEtBQUssQ0FBQzdDLCtLQUFBQSxDQUFRNEMsSUFBQUEsQ0FBS0osT0FBTyxHQUFHLE9BQU87UUFDL0QsSUFBSUksS0FBS0MsU0FBUyxHQUFHRCxJQUFBQSxDQUFLSixPQUFPLEVBQUUsT0FBTztRQUMxQyxPQUFPO0lBQ1Q7SUFFQTs7TUFHQXVLLFlBQUFBLENBQWFDLFNBQTJDLEVBQVE7UUFDOUQsSUFBSSxDQUFDTixNQUFNLEdBQUc7WUFBRSxHQUFHLElBQUksQ0FBQ0EsTUFBTTtZQUFFLEdBQUdNLFNBQUFBO1FBQVU7SUFDL0M7SUFFQTs7R0FFQyxHQUNEQyxTQUFBQSxHQUFxQztRQUNuQyxPQUFPO1lBQUUsR0FBRyxJQUFJLENBQUNQLE1BQUFBO1FBQU87SUFDMUI7SUE3VUEsWUFBWUEsTUFBQUEsR0FBMkMsRUFBRSxDQUFFO1FBQ3pELElBQUksQ0FBQ0EsTUFBTSxHQUFHO1lBQ1pFLGtCQUFBQSxFQUFvQjtZQUNwQkUsc0JBQUFBLEVBQXdCO1lBQ3hCSCxVQUFBQSxFQUFZO1lBQ1osR0FBR0QsTUFBQUE7UUFDTDtJQUNGO0FBdVVGO0FDeFhBOzs7O1VBaUJhUSxrQkFBQUEsR0FBd0M7SUFDbkQ7UUFDRUMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7SUFDQTtRQUNFUCxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxjQUFBQSxFQUFnQjtRQUNoQkMsVUFBQUEsRUFBWTtRQUNaQyxPQUFBQSxFQUFTO1FBQ1RDLFFBQUFBLEVBQVU7UUFDVkMsUUFBQUEsRUFBVTtJQUNaO0lBQ0E7UUFDRVAsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLElBQUFBLEVBQU07UUFDTkMsY0FBQUEsRUFBZ0I7UUFDaEJDLFVBQUFBLEVBQVk7UUFDWkMsT0FBQUEsRUFBUztRQUNUQyxRQUFBQSxFQUFVO1FBQ1ZDLFFBQUFBLEVBQVU7SUFDWjtJQUNBO1FBQ0VQLElBQUFBLEVBQU07UUFDTkMsSUFBQUEsRUFBTTtRQUNOQyxJQUFBQSxFQUFNO1FBQ05DLGNBQUFBLEVBQWdCO1FBQ2hCQyxVQUFBQSxFQUFZO1FBQ1pDLE9BQUFBLEVBQVM7UUFDVEMsUUFBQUEsRUFBVTtRQUNWQyxRQUFBQSxFQUFVO0lBQ1o7O0FBR0Y7QUFDTyxNQUFNQyxtQkFBbUIsQ0FBQ1IsSUFBQUEsR0FBQUE7SUFDL0IsT0FBT0QsbUJBQW1CVSxJQUFJLENBQUN4SixDQUFBQSxPQUFBQSxHQUFXQSxPQUFBQSxDQUFRK0ksSUFBSSxLQUFLQSxJQUFBQSxDQUFBQTtBQUM3RDtBQUVPLE1BQU1VLG1CQUFtQixDQUFDVCxJQUFBQSxHQUFBQTtJQUMvQixPQUFPRixrQkFBQUEsQ0FBbUJVLElBQUksQ0FBQ3hKLENBQUFBLE9BQUFBLEdBQzdCQSxPQUFBQSxDQUFRZ0osSUFBSSxDQUFDVSxXQUFXLE9BQU9WLElBQUFBLENBQUtVLFdBQVc7QUFFbkQ7TUFFYUMscUJBQUFBLEdBQXdCO0lBQ25DLE9BQU9iLGtCQUFBQSxDQUFtQnBMLEdBQUcsQ0FBQ3NDLENBQUFBLFdBQVk7WUFDeEM0SixLQUFBQSxFQUFPNUosUUFBUStJLElBQUk7WUFDbkJjLEtBQUFBLEVBQU8sR0FBRzdKLFFBQVFpSixJQUFJLENBQUMsQ0FBQyxFQUFFakosT0FBQUEsQ0FBUWdKLElBQUksRUFBRTtZQUN4Q2hKO1FBQ0YsSUFBSW9ELElBQUksQ0FBQyxDQUFDQyxDQUFBQSxFQUFHQyxJQUFNRCxDQUFBQSxDQUFFckQsT0FBTyxDQUFDZ0osSUFBSSxDQUFDYyxhQUFhLENBQUN4RyxDQUFBQSxDQUFFdEQsT0FBTyxDQUFDZ0osSUFBSTtBQUNoRTtNQUVhZSxvQkFBQUEsR0FBdUI7SUFDbEMsT0FBT2pCLG1CQUFtQnpHLE1BQU0sQ0FBQ3JDLENBQUFBLE9BQUFBLEdBQVdBLFFBQVFtSixVQUFVO0FBQ2hFO01BRWFhLHlCQUFBQSxHQUE0QjtJQUN2QyxPQUFPbEIsbUJBQW1CekcsTUFBTSxDQUFDckMsQ0FBQUEsT0FBQUEsR0FBVyxDQUFDQSxRQUFRbUosVUFBVTtBQUNqRTtBQUVBO0FBQ08sTUFBTWMsd0JBQUFBLEdBQTJCbkIsa0JBQUFBLENBQW1Cbk0sTUFBQUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9wYWNrYWdlcy9zcmMvY2FsY3VsYXRvci9yb2J1c3Qtc2NoZW5nZW4tY2FsY3VsYXRvci50cyIsIi9Vc2Vycy90cm95c2FtdWVscy9TQ0hFTkdFTiBWSVNBIENBTENVTEFUT1Ivc2NoZW5nZW52aXNhY2FsY3VsYXRvci9wYWNrYWdlcy9zcmMvdmFsaWRhdG9ycy9kYXRlLW92ZXJsYXAtdmFsaWRhdG9yLnRzIiwiL1VzZXJzL3Ryb3lzYW11ZWxzL1NDSEVOR0VOIFZJU0EgQ0FMQ1VMQVRPUi9zY2hlbmdlbnZpc2FjYWxjdWxhdG9yL3BhY2thZ2VzL3NyYy9kYXRhL2NvdW50cmllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaWZmZXJlbmNlSW5EYXlzLCBzdWJEYXlzLCBhZGREYXlzLCBzdGFydE9mRGF5LCBpc1ZhbGlkLCBpc0xlYXBZZWFyLCBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIlxuXG5pbXBvcnQgdHlwZSB7XG4gIFRyaXAsXG4gIENvbXBsaWFuY2VSZXN1bHQsXG4gIERheUJyZWFrZG93bixcbiAgVmFsaWRhdGlvbkVycm9yLFxuICBSb2xsaW5nV2luZG93Q2hlY2ssXG4gIFBsYW5uZWRUcmlwVmFsaWRhdGlvbixcbiAgVHJpcFZhbGlkYXRpb25SZXN1bHRcbn0gZnJvbSAnLi4vdHlwZXMnXG5cbi8qKlxuICogUm9idXN0IFNjaGVuZ2VuIENhbGN1bGF0b3IgaW1wbGVtZW50aW5nIGV4YWN0IDE4MC1kYXkgcm9sbGluZyB3aW5kb3cgcnVsZXNcbiAqIFxuICogS2V5IFNjaGVuZ2VuIFJ1bGVzOlxuICogMS4gTWF4aW11bSA5MCBkYXlzIGluIGFueSAxODAtZGF5IHBlcmlvZFxuICogMi4gVGhlIDE4MC1kYXkgcGVyaW9kIGlzIFJPTExJTkcgLSBjYWxjdWxhdGVkIGZyb20gYW55IGdpdmVuIGRhdGUgYmFja3dhcmRcbiAqIDMuIEVudHJ5IGFuZCBleGl0IGRheXMgYm90aCBjb3VudCBhcyBzdGF5IGRheXNcbiAqIDQuIERheXMgbXVzdCBiZSBjYWxjdWxhdGVkIGZvciBFVkVSWSBkYXksIG5vdCBqdXN0IHRyaXAgZW5kcG9pbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBSb2J1c3RTY2hlbmdlbkNhbGN1bGF0b3Ige1xuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBNQVhfREFZU19JTl9QRVJJT0QgPSA5MFxuICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBST0xMSU5HX1BFUklPRF9EQVlTID0gMTgwXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBjb21wbGlhbmNlIHVzaW5nIGV4YWN0IHJvbGxpbmcgd2luZG93IGFsZ29yaXRobVxuICAgKiBUaGlzIGNoZWNrcyBjb21wbGlhbmNlIGZvciBFVkVSWSBkYXkgaW4gdGhlIHBlcmlvZCwgbm90IGp1c3QgdHJpcCBlbmRwb2ludHNcbiAgICogRW5oYW5jZWQgd2l0aCBlZGdlIGNhc2UgaGFuZGxpbmcgZm9yIGxlYXAgeWVhcnMsIHRpbWV6b25lcywgYW5kIGJvdW5kYXJ5IGNvbmRpdGlvbnNcbiAgICovXG4gIHN0YXRpYyBjYWxjdWxhdGVFeGFjdENvbXBsaWFuY2UodHJpcHM6IFRyaXBbXSwgcmVmZXJlbmNlRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCkpOiBDb21wbGlhbmNlUmVzdWx0IHtcbiAgICB0cnkge1xuICAgICAgLy8gRW5oYW5jZWQgaW5wdXQgdmFsaWRhdGlvblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRyaXBzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyaXBzIG11c3QgYmUgYW4gYXJyYXknKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlZmVyZW5jZURhdGUgfHwgIWlzVmFsaWQocmVmZXJlbmNlRGF0ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWZlcmVuY2UgZGF0ZSBtdXN0IGJlIGEgdmFsaWQgRGF0ZSBvYmplY3QnKVxuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGF0ZSByZWZlcmVuY2UgZGF0ZSBpcyBub3QgaW4gZXh0cmVtZSBmdXR1cmUvcGFzdFxuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgY29uc3QgdGVuWWVhcnNBZ28gPSBzdWJEYXlzKG5vdywgMzY1ICogMTApXG4gICAgICBjb25zdCBmaXZlWWVhcnNGcm9tTm93ID0gYWRkRGF5cyhub3csIDM2NSAqIDUpXG4gICAgICBcbiAgICAgIGlmIChyZWZlcmVuY2VEYXRlIDwgdGVuWWVhcnNBZ28gfHwgcmVmZXJlbmNlRGF0ZSA+IGZpdmVZZWFyc0Zyb21Ob3cpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWZlcmVuY2UgZGF0ZSAke2Zvcm1hdChyZWZlcmVuY2VEYXRlLCAneXl5eS1NTS1kZCcpfSBpcyBvdXRzaWRlIHJlYXNvbmFibGUgcmFuZ2VgKVxuICAgICAgfVxuXG4gICAgICAvLyBOb3JtYWxpemUgcmVmZXJlbmNlIGRhdGUgdG8gc3RhcnQgb2YgZGF5IChVVEMtYWdub3N0aWMpXG4gICAgICBjb25zdCBub3JtYWxpemVkUmVmRGF0ZSA9IHRoaXMubm9ybWFsaXplVG9TdGFydE9mRGF5KHJlZmVyZW5jZURhdGUpXG4gICAgICBjb25zdCBwZXJpb2RTdGFydCA9IHRoaXMuY2FsY3VsYXRlUGVyaW9kU3RhcnQobm9ybWFsaXplZFJlZkRhdGUpXG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIGFuZCBub3JtYWxpemUgYWxsIHRyaXBzXG4gICAgICBjb25zdCB2YWxpZFRyaXBzID0gdGhpcy52YWxpZGF0ZUFuZE5vcm1hbGl6ZVRyaXBzKHRyaXBzKVxuICAgICAgXG4gICAgICAvLyBIYW5kbGUgZW1wdHkgdHJpcHMgY2FzZVxuICAgICAgaWYgKHZhbGlkVHJpcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG90YWxEYXlzVXNlZDogMCxcbiAgICAgICAgICBkYXlzUmVtYWluaW5nOiB0aGlzLk1BWF9EQVlTX0lOX1BFUklPRCxcbiAgICAgICAgICBpc0NvbXBsaWFudDogdHJ1ZSxcbiAgICAgICAgICBvdmVyc3RheURheXM6IDAsXG4gICAgICAgICAgcmVmZXJlbmNlRGF0ZTogbm9ybWFsaXplZFJlZkRhdGUsXG4gICAgICAgICAgcGVyaW9kU3RhcnQsXG4gICAgICAgICAgcGVyaW9kRW5kOiBub3JtYWxpemVkUmVmRGF0ZSxcbiAgICAgICAgICBkZXRhaWxlZEJyZWFrZG93bjogW11cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDcmVhdGUgYSBtYXAgb2YgYWxsIGRheXMgd2l0aCBzdGF5c1xuICAgICAgY29uc3QgZGFpbHlTdGF5cyA9IHRoaXMuY3JlYXRlRGFpbHlTdGF5TWFwKHZhbGlkVHJpcHMsIHBlcmlvZFN0YXJ0LCBub3JtYWxpemVkUmVmRGF0ZSlcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIHJvbGxpbmcgY29tcGxpYW5jZSBmb3IgZWFjaCBkYXlcbiAgICAgIGNvbnN0IHJvbGxpbmdDaGVja3MgPSB0aGlzLmNhbGN1bGF0ZVJvbGxpbmdDb21wbGlhbmNlRm9yQWxsRGF5cyhcbiAgICAgICAgZGFpbHlTdGF5cyxcbiAgICAgICAgcGVyaW9kU3RhcnQsXG4gICAgICAgIG5vcm1hbGl6ZWRSZWZEYXRlXG4gICAgICApXG4gICAgICBcbiAgICAgIC8vIFZhbGlkYXRlIHJvbGxpbmcgY2hlY2tzXG4gICAgICBpZiAocm9sbGluZ0NoZWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgcm9sbGluZyBjb21wbGlhbmNlIGNoZWNrcycpXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEZpbmQgdGhlIG1heGltdW0gdmlvbGF0aW9uIGFuZCBjdXJyZW50IHN0YXR1c1xuICAgICAgY29uc3QgbWF4VmlvbGF0aW9uID0gTWF0aC5tYXgoLi4ucm9sbGluZ0NoZWNrcy5tYXAoY2hlY2sgPT4gY2hlY2sub3ZlcnN0YXlEYXlzKSlcbiAgICAgIGNvbnN0IGN1cnJlbnRDb21wbGlhbmNlID0gcm9sbGluZ0NoZWNrc1tyb2xsaW5nQ2hlY2tzLmxlbmd0aCAtIDFdXG4gICAgICBcbiAgICAgIGlmICghY3VycmVudENvbXBsaWFuY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgY29tcGxpYW5jZSBzdGF0dXMnKVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSBkZXRhaWxlZCBicmVha2Rvd25cbiAgICAgIGNvbnN0IGRldGFpbGVkQnJlYWtkb3duID0gdGhpcy5nZW5lcmF0ZURldGFpbGVkQnJlYWtkb3duKFxuICAgICAgICBkYWlseVN0YXlzLFxuICAgICAgICByb2xsaW5nQ2hlY2tzLFxuICAgICAgICBwZXJpb2RTdGFydCxcbiAgICAgICAgbm9ybWFsaXplZFJlZkRhdGVcbiAgICAgIClcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICB0b3RhbERheXNVc2VkOiBjdXJyZW50Q29tcGxpYW5jZS5kYXlzSW5XaW5kb3csXG4gICAgICAgIGRheXNSZW1haW5pbmc6IE1hdGgubWF4KDAsIHRoaXMuTUFYX0RBWVNfSU5fUEVSSU9EIC0gY3VycmVudENvbXBsaWFuY2UuZGF5c0luV2luZG93KSxcbiAgICAgICAgaXNDb21wbGlhbnQ6IG1heFZpb2xhdGlvbiA9PT0gMCxcbiAgICAgICAgb3ZlcnN0YXlEYXlzOiBtYXhWaW9sYXRpb24sXG4gICAgICAgIHJlZmVyZW5jZURhdGU6IG5vcm1hbGl6ZWRSZWZEYXRlLFxuICAgICAgICBwZXJpb2RTdGFydCxcbiAgICAgICAgcGVyaW9kRW5kOiBub3JtYWxpemVkUmVmRGF0ZSxcbiAgICAgICAgZGV0YWlsZWRCcmVha2Rvd25cbiAgICAgIH1cblxuICAgICAgLy8gRmluYWwgdmFsaWRhdGlvbiBvZiByZXN1bHRcbiAgICAgIGlmIChyZXN1bHQudG90YWxEYXlzVXNlZCA8IDAgfHwgcmVzdWx0LmRheXNSZW1haW5pbmcgPCAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgY2FsY3VsYXRpb24gcmVzdWx0OicsIHJlc3VsdClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxjdWxhdGlvbiBwcm9kdWNlZCBpbnZhbGlkIG5lZ2F0aXZlIHZhbHVlcycpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gY2FsY3VsYXRlRXhhY3RDb21wbGlhbmNlOicsIGVycm9yKVxuICAgICAgXG4gICAgICAvLyBSZXR1cm4gc2FmZSBmYWxsYmFja1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFJlZkRhdGUgPSBzdGFydE9mRGF5KHJlZmVyZW5jZURhdGUpXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3RhbERheXNVc2VkOiAwLFxuICAgICAgICBkYXlzUmVtYWluaW5nOiB0aGlzLk1BWF9EQVlTX0lOX1BFUklPRCxcbiAgICAgICAgaXNDb21wbGlhbnQ6IHRydWUsXG4gICAgICAgIG92ZXJzdGF5RGF5czogMCxcbiAgICAgICAgcmVmZXJlbmNlRGF0ZTogbm9ybWFsaXplZFJlZkRhdGUsXG4gICAgICAgIHBlcmlvZFN0YXJ0OiBzdWJEYXlzKG5vcm1hbGl6ZWRSZWZEYXRlLCB0aGlzLlJPTExJTkdfUEVSSU9EX0RBWVMgLSAxKSxcbiAgICAgICAgcGVyaW9kRW5kOiBub3JtYWxpemVkUmVmRGF0ZSxcbiAgICAgICAgZGV0YWlsZWRCcmVha2Rvd246IFtdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgZXhhY3QgbnVtYmVyIG9mIGRheXMgdXNlZCBpbiBhbnkgMTgwLWRheSB3aW5kb3cgZW5kaW5nIG9uIGEgc3BlY2lmaWMgZGF0ZVxuICAgKi9cbiAgc3RhdGljIGNhbGN1bGF0ZURheXNJbldpbmRvdyh0cmlwczogVHJpcFtdLCBlbmREYXRlOiBEYXRlKTogbnVtYmVyIHtcbiAgICBpZiAoIWlzVmFsaWQoZW5kRGF0ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW5kIGRhdGUgbXVzdCBiZSB2YWxpZCcpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG5vcm1hbGl6ZWRFbmREYXRlID0gdGhpcy5ub3JtYWxpemVUb1N0YXJ0T2ZEYXkoZW5kRGF0ZSlcbiAgICBjb25zdCB3aW5kb3dTdGFydCA9IHRoaXMuY2FsY3VsYXRlUGVyaW9kU3RhcnQobm9ybWFsaXplZEVuZERhdGUpXG4gICAgXG4gICAgbGV0IHRvdGFsRGF5cyA9IDBcbiAgICBcbiAgICBmb3IgKGNvbnN0IHRyaXAgb2YgdHJpcHMpIHtcbiAgICAgIGlmICghaXNWYWxpZCh0cmlwLnN0YXJ0RGF0ZSkgfHwgIWlzVmFsaWQodHJpcC5lbmREYXRlKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFNraXBwaW5nIHRyaXAgJHt0cmlwLmlkfSB3aXRoIGludmFsaWQgZGF0ZXNgKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB0cmlwU3RhcnQgPSB0aGlzLm5vcm1hbGl6ZVRvU3RhcnRPZkRheSh0cmlwLnN0YXJ0RGF0ZSlcbiAgICAgIGNvbnN0IHRyaXBFbmQgPSB0aGlzLm5vcm1hbGl6ZVRvU3RhcnRPZkRheSh0cmlwLmVuZERhdGUpXG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBvdmVybGFwIHdpdGggdGhlIHdpbmRvdyAoaW5jbHVzaXZlIG9mIGJvdGggc3RhcnQgYW5kIGVuZClcbiAgICAgIGNvbnN0IG92ZXJsYXBTdGFydCA9IHRyaXBTdGFydCA+IHdpbmRvd1N0YXJ0ID8gdHJpcFN0YXJ0IDogd2luZG93U3RhcnRcbiAgICAgIGNvbnN0IG92ZXJsYXBFbmQgPSB0cmlwRW5kIDwgbm9ybWFsaXplZEVuZERhdGUgPyB0cmlwRW5kIDogbm9ybWFsaXplZEVuZERhdGVcbiAgICAgIFxuICAgICAgaWYgKG92ZXJsYXBTdGFydCA8PSBvdmVybGFwRW5kKSB7XG4gICAgICAgIC8vIEJvdGggc3RhcnQgYW5kIGVuZCBkYXlzIGNvdW50LCBzbyB3ZSBhZGQgMVxuICAgICAgICBjb25zdCBkYXlzSW5PdmVybGFwID0gZGlmZmVyZW5jZUluRGF5cyhvdmVybGFwRW5kLCBvdmVybGFwU3RhcnQpICsgMVxuICAgICAgICBcbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIGNhbGN1bGF0ZWQgZGF5c1xuICAgICAgICBpZiAoZGF5c0luT3ZlcmxhcCA8IDApIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBOZWdhdGl2ZSBkYXlzIGNhbGN1bGF0ZWQgZm9yIHRyaXAgJHt0cmlwLmlkfWApXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdG90YWxEYXlzICs9IGRheXNJbk92ZXJsYXBcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRvdGFsRGF5c1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgcGxhbm5lZCB0cmlwIHdvdWxkIHZpb2xhdGUgdGhlIDkwLzE4MCBydWxlXG4gICAqL1xuICBzdGF0aWMgdmFsaWRhdGVQbGFubmVkVHJpcChcbiAgICBleGlzdGluZ1RyaXBzOiBUcmlwW10sXG4gICAgcGxhbm5lZFRyaXA6IFRyaXBcbiAgKTogUGxhbm5lZFRyaXBWYWxpZGF0aW9uIHtcbiAgICBjb25zdCBhbGxUcmlwcyA9IFsuLi5leGlzdGluZ1RyaXBzLCBwbGFubmVkVHJpcF1cbiAgICBcbiAgICAvLyBDaGVjayBjb21wbGlhbmNlIGZvciBldmVyeSBkYXkgb2YgdGhlIHBsYW5uZWQgdHJpcFxuICAgIGxldCBjdXJyZW50RGF0ZSA9IHN0YXJ0T2ZEYXkocGxhbm5lZFRyaXAuc3RhcnREYXRlKVxuICAgIGNvbnN0IGVuZERhdGUgPSBzdGFydE9mRGF5KHBsYW5uZWRUcmlwLmVuZERhdGUpXG4gICAgXG4gICAgbGV0IG1heFZpb2xhdGlvbiA9IDBcbiAgICBsZXQgdmlvbGF0aW9uRGF0ZTogRGF0ZSB8IG51bGwgPSBudWxsXG4gICAgXG4gICAgd2hpbGUgKGN1cnJlbnREYXRlIDw9IGVuZERhdGUpIHtcbiAgICAgIGNvbnN0IGRheXNJbldpbmRvdyA9IHRoaXMuY2FsY3VsYXRlRGF5c0luV2luZG93KGFsbFRyaXBzLCBjdXJyZW50RGF0ZSlcbiAgICAgIGNvbnN0IG92ZXJzdGF5ID0gTWF0aC5tYXgoMCwgZGF5c0luV2luZG93IC0gdGhpcy5NQVhfREFZU19JTl9QRVJJT0QpXG4gICAgICBcbiAgICAgIGlmIChvdmVyc3RheSA+IG1heFZpb2xhdGlvbikge1xuICAgICAgICBtYXhWaW9sYXRpb24gPSBvdmVyc3RheVxuICAgICAgICB2aW9sYXRpb25EYXRlID0gbmV3IERhdGUoY3VycmVudERhdGUpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGN1cnJlbnREYXRlID0gYWRkRGF5cyhjdXJyZW50RGF0ZSwgMSlcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVmFsaWQ6IG1heFZpb2xhdGlvbiA9PT0gMCxcbiAgICAgIHZpb2xhdGlvbkRheXM6IG1heFZpb2xhdGlvbixcbiAgICAgIHZpb2xhdGlvbkRhdGVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgbGF0ZXN0IGRhdGUgd2hlbiBhIHRyaXAgb2Ygc3BlY2lmaWVkIGxlbmd0aCBjb3VsZCBzdGFydCB3aXRob3V0IHZpb2xhdGlvblxuICAgKi9cbiAgc3RhdGljIGZpbmRMYXRlc3RWYWxpZFN0YXJ0RGF0ZShcbiAgICBleGlzdGluZ1RyaXBzOiBUcmlwW10sXG4gICAgdHJpcExlbmd0aDogbnVtYmVyLFxuICAgIGVhcmxpZXN0U3RhcnQ6IERhdGUsXG4gICAgbGF0ZXN0U3RhcnQ6IERhdGVcbiAgKTogRGF0ZSB8IG51bGwge1xuICAgIGxldCB0ZXN0RGF0ZSA9IHN0YXJ0T2ZEYXkobGF0ZXN0U3RhcnQpXG4gICAgY29uc3QgbWluRGF0ZSA9IHN0YXJ0T2ZEYXkoZWFybGllc3RTdGFydClcbiAgICBcbiAgICB3aGlsZSAodGVzdERhdGUgPj0gbWluRGF0ZSkge1xuICAgICAgY29uc3QgdGVzdFRyaXA6IFRyaXAgPSB7XG4gICAgICAgIGlkOiAndGVzdCcsXG4gICAgICAgIGNvdW50cnk6ICdURVNUJyxcbiAgICAgICAgc3RhcnREYXRlOiB0ZXN0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogYWRkRGF5cyh0ZXN0RGF0ZSwgdHJpcExlbmd0aCAtIDEpLFxuICAgICAgICBkYXlzOiB0cmlwTGVuZ3RoXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlUGxhbm5lZFRyaXAoZXhpc3RpbmdUcmlwcywgdGVzdFRyaXApXG4gICAgICBpZiAodmFsaWRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiB0ZXN0RGF0ZVxuICAgICAgfVxuICAgICAgXG4gICAgICB0ZXN0RGF0ZSA9IHN1YkRheXModGVzdERhdGUsIDEpXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIG1heGltdW0gY29uc2VjdXRpdmUgZGF5cyBhdmFpbGFibGUgZnJvbSBhIHN0YXJ0IGRhdGVcbiAgICovXG4gIHN0YXRpYyBjYWxjdWxhdGVNYXhDb25zZWN1dGl2ZURheXMoZXhpc3RpbmdUcmlwczogVHJpcFtdLCBzdGFydERhdGU6IERhdGUpOiBudW1iZXIge1xuICAgIGxldCBtYXhEYXlzID0gMFxuICAgIGxldCB0ZXN0TGVuZ3RoID0gMVxuICAgIGNvbnN0IG1heFRlc3RMZW5ndGggPSAxMDAgLy8gU2FmZXR5IGxpbWl0XG4gICAgXG4gICAgd2hpbGUgKHRlc3RMZW5ndGggPD0gbWF4VGVzdExlbmd0aCkge1xuICAgICAgY29uc3QgdGVzdFRyaXA6IFRyaXAgPSB7XG4gICAgICAgIGlkOiAndGVzdCcsXG4gICAgICAgIGNvdW50cnk6ICdURVNUJyxcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydE9mRGF5KHN0YXJ0RGF0ZSksXG4gICAgICAgIGVuZERhdGU6IGFkZERheXMoc3RhcnRPZkRheShzdGFydERhdGUpLCB0ZXN0TGVuZ3RoIC0gMSksXG4gICAgICAgIGRheXM6IHRlc3RMZW5ndGhcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVQbGFubmVkVHJpcChleGlzdGluZ1RyaXBzLCB0ZXN0VHJpcClcbiAgICAgIGlmICh2YWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgICAgbWF4RGF5cyA9IHRlc3RMZW5ndGhcbiAgICAgICAgdGVzdExlbmd0aCsrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gTWF0aC5taW4obWF4RGF5cywgdGhpcy5NQVhfREFZU19JTl9QRVJJT0QpXG4gIH1cblxuICAvKipcbiAgICogQ29tcHJlaGVuc2l2ZSB0cmlwIHZhbGlkYXRpb25cbiAgICovXG4gIHN0YXRpYyB2YWxpZGF0ZVRyaXBzKHRyaXBzOiBUcmlwW10pOiBUcmlwVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgY29uc3QgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JbXSA9IFtdXG4gICAgY29uc3Qgd2FybmluZ3M6IFZhbGlkYXRpb25FcnJvcltdID0gW11cbiAgICBjb25zdCBzZWVuSWRzID0gbmV3IFNldDxzdHJpbmc+KClcblxuICAgIHRyaXBzLmZvckVhY2goKHRyaXAsIGluZGV4KSA9PiB7XG4gICAgICAvLyBDaGVjayBmb3IgZHVwbGljYXRlIElEc1xuICAgICAgaWYgKHNlZW5JZHMuaGFzKHRyaXAuaWQpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWVsZDogJ2lkJyxcbiAgICAgICAgICBtZXNzYWdlOiBgRHVwbGljYXRlIHRyaXAgSUQ6ICR7dHJpcC5pZH1gLFxuICAgICAgICAgIHNldmVyaXR5OiAnRVJST1InLFxuICAgICAgICAgIHRyaXBJZDogdHJpcC5pZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgc2Vlbklkcy5hZGQodHJpcC5pZClcblxuICAgICAgLy8gUmVxdWlyZWQgZmllbGRzXG4gICAgICBpZiAoIXRyaXAuaWQgfHwgdHJpcC5pZC50cmltKCkgPT09ICcnKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWVsZDogJ2lkJyxcbiAgICAgICAgICBtZXNzYWdlOiBgVHJpcCBhdCBpbmRleCAke2luZGV4fSBpcyBtaXNzaW5nIGFuIElEYCxcbiAgICAgICAgICBzZXZlcml0eTogJ0VSUk9SJ1xuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRyaXAuY291bnRyeSB8fCB0cmlwLmNvdW50cnkudHJpbSgpID09PSAnJykge1xuICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgZmllbGQ6ICdjb3VudHJ5JyxcbiAgICAgICAgICBtZXNzYWdlOiAnQ291bnRyeSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICghdHJpcC5zdGFydERhdGUpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgIGZpZWxkOiAnc3RhcnREYXRlJyxcbiAgICAgICAgICBtZXNzYWdlOiAnU3RhcnQgZGF0ZSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmICghdHJpcC5lbmREYXRlKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICBmaWVsZDogJ2VuZERhdGUnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdFbmQgZGF0ZSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIERhdGUgdmFsaWRhdGlvblxuICAgICAgaWYgKHRyaXAuc3RhcnREYXRlICYmIHRyaXAuZW5kRGF0ZSkge1xuICAgICAgICBpZiAodHJpcC5zdGFydERhdGUgPiB0cmlwLmVuZERhdGUpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBmaWVsZDogJ2RhdGVzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdTdGFydCBkYXRlIG11c3QgYmUgYmVmb3JlIG9yIGVxdWFsIHRvIGVuZCBkYXRlJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnRVJST1InLFxuICAgICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gZGlmZmVyZW5jZUluRGF5cyh0cmlwLmVuZERhdGUsIHRyaXAuc3RhcnREYXRlKSArIDFcbiAgICAgICAgXG4gICAgICAgIGlmIChkdXJhdGlvbiA+IHRoaXMuTUFYX0RBWVNfSU5fUEVSSU9EKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgZmllbGQ6ICdkdXJhdGlvbicsXG4gICAgICAgICAgICBtZXNzYWdlOiBgVHJpcCBkdXJhdGlvbiAoJHtkdXJhdGlvbn0gZGF5cykgZXhjZWVkcyBtYXhpbXVtIGFsbG93ZWQgY29uc2VjdXRpdmUgc3RheSAoJHt0aGlzLk1BWF9EQVlTX0lOX1BFUklPRH0gZGF5cylgLFxuICAgICAgICAgICAgc2V2ZXJpdHk6ICdFUlJPUicsXG4gICAgICAgICAgICB0cmlwSWQ6IHRyaXAuaWRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR1cmF0aW9uIDwgMSkge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZHVyYXRpb24nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RyaXAgbXVzdCBiZSBhdCBsZWFzdCAxIGRheSBsb25nJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnRVJST1InLFxuICAgICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciB1bnJlYXNvbmFibGUgZGF0ZXNcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKVxuICAgICAgICBjb25zdCB0ZW5ZZWFyc0FnbyA9IHN1YkRheXMobm93LCAzNjUgKiAxMClcbiAgICAgICAgY29uc3QgZml2ZVllYXJzRnJvbU5vdyA9IGFkZERheXMobm93LCAzNjUgKiA1KVxuXG4gICAgICAgIGlmICh0cmlwLnN0YXJ0RGF0ZSA8IHRlblllYXJzQWdvKSB7XG4gICAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgICBmaWVsZDogJ3N0YXJ0RGF0ZScsXG4gICAgICAgICAgICBtZXNzYWdlOiAnU3RhcnQgZGF0ZSBzZWVtcyB1bnJlYXNvbmFibHkgZmFyIGluIHRoZSBwYXN0JyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnV0FSTklORycsXG4gICAgICAgICAgICB0cmlwSWQ6IHRyaXAuaWRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaXAuZW5kRGF0ZSA+IGZpdmVZZWFyc0Zyb21Ob3cpIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZW5kRGF0ZScsXG4gICAgICAgICAgICBtZXNzYWdlOiAnRW5kIGRhdGUgc2VlbXMgdW5yZWFzb25hYmx5IGZhciBpbiB0aGUgZnV0dXJlJyxcbiAgICAgICAgICAgIHNldmVyaXR5OiAnV0FSTklORycsXG4gICAgICAgICAgICB0cmlwSWQ6IHRyaXAuaWRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbnNpc3RlbmN5IHdpdGggZGF5cyBmaWVsZFxuICAgICAgICBpZiAodHJpcC5kYXlzICYmIE1hdGguYWJzKHRyaXAuZGF5cyAtIGR1cmF0aW9uKSA+IDApIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZGF5cycsXG4gICAgICAgICAgICBtZXNzYWdlOiBgRGF5cyBmaWVsZCAoJHt0cmlwLmRheXN9KSBkb2Vzbid0IG1hdGNoIGNhbGN1bGF0ZWQgZHVyYXRpb24gKCR7ZHVyYXRpb259KWAsXG4gICAgICAgICAgICBzZXZlcml0eTogJ1dBUk5JTkcnLFxuICAgICAgICAgICAgdHJpcElkOiB0cmlwLmlkXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBDaGVjayBmb3Igb3ZlcmxhcHBpbmcgdHJpcHMgKHNhbWUgZGF0ZXMpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlwcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgdHJpcHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgdHJpcDEgPSB0cmlwc1tpXVxuICAgICAgICBjb25zdCB0cmlwMiA9IHRyaXBzW2pdXG4gICAgICAgIFxuICAgICAgICBpZiAoIXRyaXAxLnN0YXJ0RGF0ZSB8fCAhdHJpcDEuZW5kRGF0ZSB8fCAhdHJpcDIuc3RhcnREYXRlIHx8ICF0cmlwMi5lbmREYXRlKSBjb250aW51ZVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRyaXBzIG92ZXJsYXBcbiAgICAgICAgY29uc3Qgb3ZlcmxhcCA9ICEodHJpcDEuZW5kRGF0ZSA8IHRyaXAyLnN0YXJ0RGF0ZSB8fCB0cmlwMi5lbmREYXRlIDwgdHJpcDEuc3RhcnREYXRlKVxuICAgICAgICBcbiAgICAgICAgaWYgKG92ZXJsYXApIHtcbiAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkOiAnZGF0ZXMnLFxuICAgICAgICAgICAgbWVzc2FnZTogYFRyaXAgJHt0cmlwMS5pZH0gb3ZlcmxhcHMgd2l0aCB0cmlwICR7dHJpcDIuaWR9LiBUaGlzIG1heSBiZSBpbnRlbnRpb25hbCBmb3Igc2FtZS1kYXkgdHJhdmVsIGJldHdlZW4gY291bnRyaWVzLmAsXG4gICAgICAgICAgICBzZXZlcml0eTogJ1dBUk5JTkcnLFxuICAgICAgICAgICAgdHJpcElkOiB0cmlwMS5pZFxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgaXNWYWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCxcbiAgICAgIGVycm9ycyxcbiAgICAgIHdhcm5pbmdzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBuZXh0IGRhdGUgd2hlbiBkYXlzIHdpbGwgXCJyb2xsIG9mZlwiIHRoZSB3aW5kb3dcbiAgICovXG4gIHN0YXRpYyBnZXROZXh0UmVzZXREYXRlKHRyaXBzOiBUcmlwW10sIHJlZmVyZW5jZURhdGU6IERhdGUgPSBuZXcgRGF0ZSgpKTogRGF0ZSB8IG51bGwge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRSZWZEYXRlID0gc3RhcnRPZkRheShyZWZlcmVuY2VEYXRlKVxuICAgIGNvbnN0IGN1cnJlbnRXaW5kb3cgPSBzdWJEYXlzKG5vcm1hbGl6ZWRSZWZEYXRlLCB0aGlzLlJPTExJTkdfUEVSSU9EX0RBWVMgLSAxKVxuICAgIFxuICAgIC8vIEZpbmQgdGhlIGVhcmxpZXN0IHRyaXAgZGF5IHRoYXQgYWZmZWN0cyB0aGUgY3VycmVudCB3aW5kb3dcbiAgICBsZXQgZWFybGllc3RSZWxldmFudERhdGU6IERhdGUgfCBudWxsID0gbnVsbFxuICAgIFxuICAgIGZvciAoY29uc3QgdHJpcCBvZiB0cmlwcykge1xuICAgICAgbGV0IGNoZWNrRGF0ZSA9IHN0YXJ0T2ZEYXkodHJpcC5zdGFydERhdGUpXG4gICAgICBjb25zdCBlbmREYXRlID0gc3RhcnRPZkRheSh0cmlwLmVuZERhdGUpXG4gICAgICBcbiAgICAgIHdoaWxlIChjaGVja0RhdGUgPD0gZW5kRGF0ZSkge1xuICAgICAgICBpZiAoY2hlY2tEYXRlID49IGN1cnJlbnRXaW5kb3cgJiYgY2hlY2tEYXRlIDw9IG5vcm1hbGl6ZWRSZWZEYXRlKSB7XG4gICAgICAgICAgaWYgKCFlYXJsaWVzdFJlbGV2YW50RGF0ZSB8fCBjaGVja0RhdGUgPCBlYXJsaWVzdFJlbGV2YW50RGF0ZSkge1xuICAgICAgICAgICAgZWFybGllc3RSZWxldmFudERhdGUgPSBjaGVja0RhdGVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tEYXRlID0gYWRkRGF5cyhjaGVja0RhdGUsIDEpXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmICghZWFybGllc3RSZWxldmFudERhdGUpIHJldHVybiBudWxsXG4gICAgXG4gICAgLy8gVGhlIHJlc2V0IGRhdGUgaXMgMTgwIGRheXMgYWZ0ZXIgdGhlIGVhcmxpZXN0IHJlbGV2YW50IGRhdGVcbiAgICByZXR1cm4gYWRkRGF5cyhlYXJsaWVzdFJlbGV2YW50RGF0ZSwgdGhpcy5ST0xMSU5HX1BFUklPRF9EQVlTKVxuICB9XG5cbiAgLyoqXG4gICAqIERlYnVnIGZ1bmN0aW9uIHRvIHZpc3VhbGl6ZSByb2xsaW5nIHdpbmRvdyBjYWxjdWxhdGlvbnNcbiAgICovXG4gIHN0YXRpYyBkZWJ1Z1JvbGxpbmdXaW5kb3codHJpcHM6IFRyaXBbXSwgcmVmZXJlbmNlRGF0ZTogRGF0ZSk6IGFueSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jYWxjdWxhdGVFeGFjdENvbXBsaWFuY2UodHJpcHMsIHJlZmVyZW5jZURhdGUpXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1bW1hcnk6IHtcbiAgICAgICAgdG90YWxEYXlzVXNlZDogcmVzdWx0LnRvdGFsRGF5c1VzZWQsXG4gICAgICAgIGRheXNSZW1haW5pbmc6IHJlc3VsdC5kYXlzUmVtYWluaW5nLFxuICAgICAgICBpc0NvbXBsaWFudDogcmVzdWx0LmlzQ29tcGxpYW50LFxuICAgICAgICBvdmVyc3RheURheXM6IHJlc3VsdC5vdmVyc3RheURheXMsXG4gICAgICAgIHBlcmlvZFN0YXJ0OiByZXN1bHQucGVyaW9kU3RhcnQsXG4gICAgICAgIHBlcmlvZEVuZDogcmVzdWx0LnBlcmlvZEVuZFxuICAgICAgfSxcbiAgICAgIHRyaXBzSW5QZXJpb2Q6IHRyaXBzLmZpbHRlcih0cmlwID0+IFxuICAgICAgICB0cmlwLmVuZERhdGUgPj0gcmVzdWx0LnBlcmlvZFN0YXJ0ICYmIHRyaXAuc3RhcnREYXRlIDw9IHJlc3VsdC5wZXJpb2RFbmRcbiAgICAgICksXG4gICAgICBkYWlseUJyZWFrZG93bjogcmVzdWx0LmRldGFpbGVkQnJlYWtkb3duLmZpbHRlcihkYXkgPT4gZGF5LmRheXNVc2VkT25EYXRlID4gMCksXG4gICAgICB2aW9sYXRpb25zOiByZXN1bHQuZGV0YWlsZWRCcmVha2Rvd24uZmlsdGVyKGRheSA9PiBkYXkuaXNWaW9sYXRpb24pLFxuICAgICAgbmV4dFJlc2V0RGF0ZTogdGhpcy5nZXROZXh0UmVzZXREYXRlKHRyaXBzLCByZWZlcmVuY2VEYXRlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBhbmQgbm9ybWFsaXplIHRyaXAgZGF0YSB3aXRoIGVycm9yIGhhbmRsaW5nXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyB2YWxpZGF0ZUFuZE5vcm1hbGl6ZVRyaXBzKHRyaXBzOiBUcmlwW10pOiBUcmlwW10ge1xuICAgIC8vIFJ1biB2YWxpZGF0aW9uIGJ1dCBwcm9jZWVkIHdpdGggZmlsdGVyaW5nXG4gICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHRoaXMudmFsaWRhdGVUcmlwcyh0cmlwcylcbiAgICBjb25zdCBjcml0aWNhbEVycm9ycyA9IHZhbGlkYXRpb25SZXN1bHQuZXJyb3JzXG4gICAgXG4gICAgaWYgKGNyaXRpY2FsRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignQ3JpdGljYWwgdmFsaWRhdGlvbiBlcnJvcnMgZm91bmQ6JywgY3JpdGljYWxFcnJvcnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRyaXBzXG4gICAgICAuZmlsdGVyKHRyaXAgPT4ge1xuICAgICAgICAvLyBPbmx5IGluY2x1ZGUgdHJpcHMgdGhhdCBwYXNzIGJhc2ljIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCF0cmlwLnN0YXJ0RGF0ZSB8fCAhdHJpcC5lbmREYXRlIHx8ICF0cmlwLmNvdW50cnkpIHJldHVybiBmYWxzZVxuICAgICAgICBcbiAgICAgICAgLy8gRW5oYW5jZWQgZGF0ZSB2YWxpZGF0aW9uXG4gICAgICAgIGlmICghaXNWYWxpZCh0cmlwLnN0YXJ0RGF0ZSkgfHwgIWlzVmFsaWQodHJpcC5lbmREYXRlKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgVHJpcCAke3RyaXAuaWR9IGhhcyBpbnZhbGlkIGRhdGVzYClcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRyaXAuc3RhcnREYXRlID4gdHJpcC5lbmREYXRlKSByZXR1cm4gZmFsc2VcbiAgICAgICAgXG4gICAgICAgIC8vIEZpbHRlciBvdXQgdHJpcHMgd2l0aCBleGNlc3NpdmUgZHVyYXRpb25cbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBkaWZmZXJlbmNlSW5EYXlzKHRyaXAuZW5kRGF0ZSwgdHJpcC5zdGFydERhdGUpICsgMVxuICAgICAgICBpZiAoZHVyYXRpb24gPiB0aGlzLk1BWF9EQVlTX0lOX1BFUklPRCkgcmV0dXJuIGZhbHNlXG4gICAgICAgIFxuICAgICAgICAvLyBGaWx0ZXIgb3V0IHRyaXBzIHdpdGggdW5yZWFzb25hYmxlIGRhdGVzXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcbiAgICAgICAgY29uc3QgdmVyeU9sZCA9IHN1YkRheXMobm93LCAzNjUgKiAyMCkgLy8gMjAgeWVhcnMgYWdvXG4gICAgICAgIGNvbnN0IHZlcnlGdXR1cmUgPSBhZGREYXlzKG5vdywgMzY1ICogMTApIC8vIDEwIHllYXJzIGluIGZ1dHVyZVxuICAgICAgICBcbiAgICAgICAgaWYgKHRyaXAuZW5kRGF0ZSA8IHZlcnlPbGQgfHwgdHJpcC5zdGFydERhdGUgPiB2ZXJ5RnV0dXJlKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBUcmlwICR7dHJpcC5pZH0gaGFzIHVucmVhc29uYWJsZSBkYXRlc2ApXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9KVxuICAgICAgLm1hcCh0cmlwID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBub3JtYWxpemVkVHJpcCA9IHtcbiAgICAgICAgICAgIC4uLnRyaXAsXG4gICAgICAgICAgICBzdGFydERhdGU6IHRoaXMubm9ybWFsaXplVG9TdGFydE9mRGF5KHRyaXAuc3RhcnREYXRlKSxcbiAgICAgICAgICAgIGVuZERhdGU6IHRoaXMubm9ybWFsaXplVG9TdGFydE9mRGF5KHRyaXAuZW5kRGF0ZSksXG4gICAgICAgICAgICBkYXlzOiBkaWZmZXJlbmNlSW5EYXlzKHRyaXAuZW5kRGF0ZSwgdHJpcC5zdGFydERhdGUpICsgMVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBWYWxpZGF0ZSBub3JtYWxpemVkIGRhdGVzXG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKG5vcm1hbGl6ZWRUcmlwLnN0YXJ0RGF0ZSkgfHwgIWlzVmFsaWQobm9ybWFsaXplZFRyaXAuZW5kRGF0ZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgZGF0ZXMgYWZ0ZXIgbm9ybWFsaXphdGlvbiBmb3IgdHJpcCAke3RyaXAuaWR9YClcbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGZvciBsZWFwIHllYXIgZWRnZSBjYXNlcyBpbiB0cmlwIGR1cmF0aW9uXG4gICAgICAgICAgY29uc3QgaGFzTGVhcERheSA9IHRoaXMudHJpcENyb3NzZXNMZWFwRGF5KG5vcm1hbGl6ZWRUcmlwLnN0YXJ0RGF0ZSwgbm9ybWFsaXplZFRyaXAuZW5kRGF0ZSlcbiAgICAgICAgICBpZiAoaGFzTGVhcERheSkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgVHJpcCAke3RyaXAuaWR9IGNyb3NzZXMgbGVhcCBkYXlgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gbm9ybWFsaXplZFRyaXBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBub3JtYWxpemluZyB0cmlwICR7dHJpcC5pZH06YCwgZXJyb3IpXG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKHRyaXApOiB0cmlwIGlzIFRyaXAgPT4gdHJpcCAhPT0gbnVsbClcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnN0YXJ0RGF0ZS5nZXRUaW1lKCkgLSBiLnN0YXJ0RGF0ZS5nZXRUaW1lKCkpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbWFwIG9mIGRhaWx5IHN0YXlzIGZvciBlZmZpY2llbnQgbG9va3VwXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVEYWlseVN0YXlNYXAoXG4gICAgdHJpcHM6IFRyaXBbXSxcbiAgICBwZXJpb2RTdGFydDogRGF0ZSxcbiAgICBwZXJpb2RFbmQ6IERhdGVcbiAgKTogTWFwPHN0cmluZywgc3RyaW5nW10+IHtcbiAgICBjb25zdCBkYWlseVN0YXlzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZ1tdPigpXG4gICAgXG4gICAgZm9yIChjb25zdCB0cmlwIG9mIHRyaXBzKSB7XG4gICAgICAvLyBPbmx5IGNvbnNpZGVyIHRyaXBzIHRoYXQgb3ZlcmxhcCB3aXRoIG91ciBwZXJpb2RcbiAgICAgIGlmICh0cmlwLmVuZERhdGUgPCBwZXJpb2RTdGFydCB8fCB0cmlwLnN0YXJ0RGF0ZSA+IHBlcmlvZEVuZCkgY29udGludWVcbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBhY3R1YWwgb3ZlcmxhcFxuICAgICAgY29uc3Qgb3ZlcmxhcFN0YXJ0ID0gdHJpcC5zdGFydERhdGUgPiBwZXJpb2RTdGFydCA/IHRyaXAuc3RhcnREYXRlIDogcGVyaW9kU3RhcnRcbiAgICAgIGNvbnN0IG92ZXJsYXBFbmQgPSB0cmlwLmVuZERhdGUgPCBwZXJpb2RFbmQgPyB0cmlwLmVuZERhdGUgOiBwZXJpb2RFbmRcbiAgICAgIFxuICAgICAgLy8gQWRkIGVhY2ggZGF5IG9mIHRoZSB0cmlwXG4gICAgICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZShvdmVybGFwU3RhcnQpXG4gICAgICB3aGlsZSAoY3VycmVudERhdGUgPD0gb3ZlcmxhcEVuZCkge1xuICAgICAgICBjb25zdCBkYXRlS2V5ID0gY3VycmVudERhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXG4gICAgICAgIFxuICAgICAgICBpZiAoIWRhaWx5U3RheXMuaGFzKGRhdGVLZXkpKSB7XG4gICAgICAgICAgZGFpbHlTdGF5cy5zZXQoZGF0ZUtleSwgW10pXG4gICAgICAgIH1cbiAgICAgICAgZGFpbHlTdGF5cy5nZXQoZGF0ZUtleSkhLnB1c2godHJpcC5pZClcbiAgICAgICAgXG4gICAgICAgIGN1cnJlbnREYXRlID0gYWRkRGF5cyhjdXJyZW50RGF0ZSwgMSlcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGRhaWx5U3RheXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgcm9sbGluZyBjb21wbGlhbmNlIGNoZWNrIGZvciBldmVyeSBkYXkgaW4gdGhlIHBlcmlvZFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgY2FsY3VsYXRlUm9sbGluZ0NvbXBsaWFuY2VGb3JBbGxEYXlzKFxuICAgIGRhaWx5U3RheXM6IE1hcDxzdHJpbmcsIHN0cmluZ1tdPixcbiAgICBwZXJpb2RTdGFydDogRGF0ZSxcbiAgICBwZXJpb2RFbmQ6IERhdGVcbiAgKTogUm9sbGluZ1dpbmRvd0NoZWNrW10ge1xuICAgIGNvbnN0IGNoZWNrczogUm9sbGluZ1dpbmRvd0NoZWNrW10gPSBbXVxuICAgIFxuICAgIGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKHBlcmlvZFN0YXJ0KVxuICAgIHdoaWxlIChjdXJyZW50RGF0ZSA8PSBwZXJpb2RFbmQpIHtcbiAgICAgIGNvbnN0IHdpbmRvd1N0YXJ0ID0gc3ViRGF5cyhjdXJyZW50RGF0ZSwgdGhpcy5ST0xMSU5HX1BFUklPRF9EQVlTIC0gMSlcbiAgICAgIGNvbnN0IHdpbmRvd0VuZCA9IG5ldyBEYXRlKGN1cnJlbnREYXRlKVxuICAgICAgXG4gICAgICAvLyBDb3VudCBkYXlzIGluIHRoaXMgMTgwLWRheSB3aW5kb3dcbiAgICAgIGxldCBkYXlzSW5XaW5kb3cgPSAwXG4gICAgICBsZXQgY2hlY2tEYXRlID0gbmV3IERhdGUod2luZG93U3RhcnQpXG4gICAgICBcbiAgICAgIHdoaWxlIChjaGVja0RhdGUgPD0gd2luZG93RW5kKSB7XG4gICAgICAgIGNvbnN0IGRhdGVLZXkgPSBjaGVja0RhdGUudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdXG4gICAgICAgIGlmIChkYWlseVN0YXlzLmhhcyhkYXRlS2V5KSkge1xuICAgICAgICAgIGRheXNJbldpbmRvdysrXG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tEYXRlID0gYWRkRGF5cyhjaGVja0RhdGUsIDEpXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IG92ZXJzdGF5RGF5cyA9IE1hdGgubWF4KDAsIGRheXNJbldpbmRvdyAtIHRoaXMuTUFYX0RBWVNfSU5fUEVSSU9EKVxuICAgICAgXG4gICAgICBjaGVja3MucHVzaCh7XG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKGN1cnJlbnREYXRlKSxcbiAgICAgICAgd2luZG93U3RhcnQ6IG5ldyBEYXRlKHdpbmRvd1N0YXJ0KSxcbiAgICAgICAgd2luZG93RW5kOiBuZXcgRGF0ZSh3aW5kb3dFbmQpLFxuICAgICAgICBkYXlzSW5XaW5kb3csXG4gICAgICAgIGlzQ29tcGxpYW50OiBvdmVyc3RheURheXMgPT09IDAsXG4gICAgICAgIG92ZXJzdGF5RGF5c1xuICAgICAgfSlcbiAgICAgIFxuICAgICAgY3VycmVudERhdGUgPSBhZGREYXlzKGN1cnJlbnREYXRlLCAxKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY2hlY2tzXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgZGV0YWlsZWQgZGF5LWJ5LWRheSBicmVha2Rvd25cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGdlbmVyYXRlRGV0YWlsZWRCcmVha2Rvd24oXG4gICAgZGFpbHlTdGF5czogTWFwPHN0cmluZywgc3RyaW5nW10+LFxuICAgIHJvbGxpbmdDaGVja3M6IFJvbGxpbmdXaW5kb3dDaGVja1tdLFxuICAgIHBlcmlvZFN0YXJ0OiBEYXRlLFxuICAgIHBlcmlvZEVuZDogRGF0ZVxuICApOiBEYXlCcmVha2Rvd25bXSB7XG4gICAgY29uc3QgYnJlYWtkb3duOiBEYXlCcmVha2Rvd25bXSA9IFtdXG4gICAgXG4gICAgbGV0IGN1cnJlbnREYXRlID0gbmV3IERhdGUocGVyaW9kU3RhcnQpXG4gICAgbGV0IGNoZWNrSW5kZXggPSAwXG4gICAgXG4gICAgd2hpbGUgKGN1cnJlbnREYXRlIDw9IHBlcmlvZEVuZCkge1xuICAgICAgY29uc3QgZGF0ZUtleSA9IGN1cnJlbnREYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXVxuICAgICAgY29uc3Qgc3RheXNPbkRhdGUgPSBkYWlseVN0YXlzLmdldChkYXRlS2V5KSB8fCBbXVxuICAgICAgY29uc3QgZGF5c1VzZWRPbkRhdGUgPSBzdGF5c09uRGF0ZS5sZW5ndGggPiAwID8gMSA6IDBcbiAgICAgIFxuICAgICAgY29uc3Qgcm9sbGluZ0NoZWNrID0gcm9sbGluZ0NoZWNrc1tjaGVja0luZGV4XVxuICAgICAgXG4gICAgICBicmVha2Rvd24ucHVzaCh7XG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKGN1cnJlbnREYXRlKSxcbiAgICAgICAgZGF5c1VzZWRPbkRhdGUsXG4gICAgICAgIGN1bXVsYXRpdmVEYXlzSW5XaW5kb3c6IHJvbGxpbmdDaGVjay5kYXlzSW5XaW5kb3csXG4gICAgICAgIGlzVmlvbGF0aW9uOiAhcm9sbGluZ0NoZWNrLmlzQ29tcGxpYW50LFxuICAgICAgICBjb250cmlidXRpbmdUcmlwczogc3RheXNPbkRhdGVcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGN1cnJlbnREYXRlID0gYWRkRGF5cyhjdXJyZW50RGF0ZSwgMSlcbiAgICAgIGNoZWNrSW5kZXgrK1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYnJlYWtkb3duXG4gIH1cblxuICAvKipcbiAgICogRW5oYW5jZWQgZGF0ZSBub3JtYWxpemF0aW9uIHdpdGggdGltZXpvbmUtYWdub3N0aWMgaGFuZGxpbmdcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIG5vcm1hbGl6ZVRvU3RhcnRPZkRheShkYXRlOiBEYXRlKTogRGF0ZSB7XG4gICAgLy8gVXNlIHN0YXJ0T2ZEYXkgYnV0IGVuc3VyZSB3ZSdyZSB3b3JraW5nIHdpdGggbG9jYWwgdGltZSBjb25zaXN0ZW50bHlcbiAgICBjb25zdCBub3JtYWxpemVkID0gc3RhcnRPZkRheShkYXRlKVxuICAgIFxuICAgIC8vIEFkZGl0aW9uYWwgdmFsaWRhdGlvbiBmb3IgZWRnZSBjYXNlc1xuICAgIGlmICghaXNWYWxpZChub3JtYWxpemVkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gbm9ybWFsaXplIGRhdGU6ICR7ZGF0ZX1gKVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gbm9ybWFsaXplZFxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBwZXJpb2Qgc3RhcnQgd2l0aCBsZWFwIHllYXIgYXdhcmVuZXNzXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBjYWxjdWxhdGVQZXJpb2RTdGFydChyZWZlcmVuY2VEYXRlOiBEYXRlKTogRGF0ZSB7XG4gICAgLy8gU3RhbmRhcmQgMTgwLWRheSB3aW5kb3cgY2FsY3VsYXRpb25cbiAgICBjb25zdCBwZXJpb2RTdGFydCA9IHN1YkRheXMocmVmZXJlbmNlRGF0ZSwgdGhpcy5ST0xMSU5HX1BFUklPRF9EQVlTIC0gMSlcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSB0aGUgY2FsY3VsYXRlZCBwZXJpb2Qgc3RhcnRcbiAgICBpZiAoIWlzVmFsaWQocGVyaW9kU3RhcnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcGVyaW9kIHN0YXJ0IGNhbGN1bGF0ZWQgZnJvbSByZWZlcmVuY2UgZGF0ZTogJHtmb3JtYXQocmVmZXJlbmNlRGF0ZSwgJ3l5eXktTU0tZGQnKX1gKVxuICAgIH1cbiAgICBcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBjcm9zc2luZyBsZWFwIHllYXIgYm91bmRhcmllcyBhbmQgbG9nIGZvciBhd2FyZW5lc3NcbiAgICBjb25zdCByZWZZZWFyID0gcmVmZXJlbmNlRGF0ZS5nZXRGdWxsWWVhcigpXG4gICAgY29uc3Qgc3RhcnRZZWFyID0gcGVyaW9kU3RhcnQuZ2V0RnVsbFllYXIoKVxuICAgIFxuICAgIGlmIChyZWZZZWFyICE9PSBzdGFydFllYXIpIHtcbiAgICAgIGNvbnN0IGNyb3NzZXNMZWFwWWVhciA9IGlzTGVhcFllYXIocmVmWWVhcikgfHwgaXNMZWFwWWVhcihzdGFydFllYXIpXG4gICAgICBpZiAoY3Jvc3Nlc0xlYXBZZWFyKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYDE4MC1kYXkgd2luZG93IGNyb3NzZXMgbGVhcCB5ZWFyIGJvdW5kYXJ5OiAke3N0YXJ0WWVhcn0tJHtyZWZZZWFyfWApXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBwZXJpb2RTdGFydFxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdHJpcCBjcm9zc2VzIEZlYnJ1YXJ5IDI5dGggaW4gYSBsZWFwIHllYXJcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIHRyaXBDcm9zc2VzTGVhcERheShzdGFydERhdGU6IERhdGUsIGVuZERhdGU6IERhdGUpOiBib29sZWFuIHtcbiAgICBjb25zdCBzdGFydFllYXIgPSBzdGFydERhdGUuZ2V0RnVsbFllYXIoKVxuICAgIGNvbnN0IGVuZFllYXIgPSBlbmREYXRlLmdldEZ1bGxZZWFyKClcbiAgICBcbiAgICAvLyBDaGVjayBlYWNoIHllYXIgdGhlIHRyaXAgc3BhbnNcbiAgICBmb3IgKGxldCB5ZWFyID0gc3RhcnRZZWFyOyB5ZWFyIDw9IGVuZFllYXI7IHllYXIrKykge1xuICAgICAgaWYgKGlzTGVhcFllYXIoeWVhcikpIHtcbiAgICAgICAgY29uc3QgbGVhcERheSA9IG5ldyBEYXRlKHllYXIsIDEsIDI5KSAvLyBGZWJydWFyeSAyOXRoXG4gICAgICAgIGlmIChsZWFwRGF5ID49IHN0YXJ0RGF0ZSAmJiBsZWFwRGF5IDw9IGVuZERhdGUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBmYWxzZVxuICB9XG59IiwiaW1wb3J0IHsgaXNWYWxpZCwgc3RhcnRPZkRheSwgZW5kT2ZEYXksIGFyZUludGVydmFsc092ZXJsYXBwaW5nLCBkaWZmZXJlbmNlSW5EYXlzIH0gZnJvbSBcImRhdGUtZm5zXCJcbmltcG9ydCB0eXBlIHsgVHJpcCwgVmFsaWRhdGlvbkVycm9yIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0ZVJhbmdlIHtcbiAgc3RhcnQ6IERhdGVcbiAgZW5kOiBEYXRlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvblJlc3VsdCB7XG4gIGlzVmFsaWQ6IGJvb2xlYW5cbiAgY29uZmxpY3RzOiBDb25mbGljdERldGFpbFtdXG4gIG1lc3NhZ2U6IHN0cmluZ1xuICBvY2N1cGllZERhdGVzOiBEYXRlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25mbGljdERldGFpbCB7XG4gIHRyaXBJZDogc3RyaW5nXG4gIHRyaXBDb3VudHJ5OiBzdHJpbmdcbiAgY29uZmxpY3RTdGFydDogRGF0ZVxuICBjb25mbGljdEVuZDogRGF0ZVxuICBvdmVybGFwRGF5czogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3ZlcmxhcFByZXZlbnRpb25Db25maWcge1xuICBhbGxvd1NhbWVEYXlUcmF2ZWw6IGJvb2xlYW5cbiAgYWxsb3dCb3JkZXJUcmFuc2l0aW9uczogYm9vbGVhblxuICBzdHJpY3RNb2RlOiBib29sZWFuXG59XG5cbi8qKlxuICogRGF0ZSBPdmVybGFwIFZhbGlkYXRvciAtIFByZXZlbnRzIHNlbGVjdGlvbiBvZiBhbHJlYWR5IG9jY3VwaWVkIGRhdGVzXG4gKiBcbiAqIENvcmUgRmVhdHVyZXM6XG4gKiAxLiBEZXRlY3RzIGRhdGUgY29uZmxpY3RzIGJldHdlZW4gbmV3IGFuZCBleGlzdGluZyB0cmlwc1xuICogMi4gUHJvdmlkZXMgdmlzdWFsIGluZGljYXRvcnMgZm9yIG9jY3VwaWVkIGRhdGVzIChncmV5ICsgc3RyaWtldGhyb3VnaClcbiAqIDMuIFJldHVybnMgc3BlY2lmaWMgY29uZmxpY3QgZGV0YWlscyBmb3IgdXNlciBmZWVkYmFja1xuICogNC4gSGFuZGxlcyBlZGdlIGNhc2VzOiBzYW1lLWRheSB0cmF2ZWwsIGJvcmRlciB0cmFuc2l0aW9uc1xuICogNS4gTW9iaWxlLW9wdGltaXplZCB3aXRoIGxhcmdlciB0b3VjaCB0YXJnZXRzXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRlT3ZlcmxhcFZhbGlkYXRvciB7XG4gIHByaXZhdGUgY29uZmlnOiBPdmVybGFwUHJldmVudGlvbkNvbmZpZ1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGFydGlhbDxPdmVybGFwUHJldmVudGlvbkNvbmZpZz4gPSB7fSkge1xuICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgYWxsb3dTYW1lRGF5VHJhdmVsOiB0cnVlLFxuICAgICAgYWxsb3dCb3JkZXJUcmFuc2l0aW9uczogdHJ1ZSxcbiAgICAgIHN0cmljdE1vZGU6IGZhbHNlLFxuICAgICAgLi4uY29uZmlnXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGlmIGEgZGF0ZSByYW5nZSBjb25mbGljdHMgd2l0aCBleGlzdGluZyB0cmlwc1xuICAgKi9cbiAgdmFsaWRhdGVEYXRlUmFuZ2UobmV3UmFuZ2U6IERhdGVSYW5nZSwgZXhpc3RpbmdUcmlwczogVHJpcFtdKTogVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgLy8gSW5wdXQgdmFsaWRhdGlvblxuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZVJhbmdlKG5ld1JhbmdlKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIGNvbmZsaWN0czogW10sXG4gICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGRhdGUgcmFuZ2UgcHJvdmlkZWQnLFxuICAgICAgICBvY2N1cGllZERhdGVzOiBbXVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vcm1hbGl6ZSBkYXRlcyB0byBzdGFydC9lbmQgb2YgZGF5IGZvciBjb25zaXN0ZW50IGNvbXBhcmlzb25cbiAgICBjb25zdCBub3JtYWxpemVkTmV3UmFuZ2UgPSB7XG4gICAgICBzdGFydDogc3RhcnRPZkRheShuZXdSYW5nZS5zdGFydCksXG4gICAgICBlbmQ6IGVuZE9mRGF5KG5ld1JhbmdlLmVuZClcbiAgICB9XG5cbiAgICBjb25zdCBjb25mbGljdHM6IENvbmZsaWN0RGV0YWlsW10gPSBbXVxuICAgIGNvbnN0IG9jY3VwaWVkRGF0ZXM6IERhdGVbXSA9IFtdXG5cbiAgICAvLyBDaGVjayBlYWNoIGV4aXN0aW5nIHRyaXAgZm9yIGNvbmZsaWN0c1xuICAgIGZvciAoY29uc3QgdHJpcCBvZiBleGlzdGluZ1RyaXBzKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZFRyaXAodHJpcCkpIGNvbnRpbnVlXG5cbiAgICAgIGNvbnN0IHRyaXBSYW5nZSA9IHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0T2ZEYXkodHJpcC5zdGFydERhdGUpLFxuICAgICAgICBlbmQ6IGVuZE9mRGF5KHRyaXAuZW5kRGF0ZSlcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIG92ZXJsYXBcbiAgICAgIGNvbnN0IGhhc092ZXJsYXAgPSB0aGlzLnJhbmdlc092ZXJsYXAobm9ybWFsaXplZE5ld1JhbmdlLCB0cmlwUmFuZ2UpXG4gICAgICBcbiAgICAgIGlmIChoYXNPdmVybGFwKSB7XG4gICAgICAgIGNvbnN0IGNvbmZsaWN0RGV0YWlsID0gdGhpcy5jYWxjdWxhdGVDb25mbGljdERldGFpbChcbiAgICAgICAgICBub3JtYWxpemVkTmV3UmFuZ2UsXG4gICAgICAgICAgdHJpcFJhbmdlLFxuICAgICAgICAgIHRyaXBcbiAgICAgICAgKVxuXG4gICAgICAgIC8vIEFwcGx5IGNvbmZpZ3VyYXRpb24gcnVsZXNcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUmVwb3J0Q29uZmxpY3QoY29uZmxpY3REZXRhaWwsIG5vcm1hbGl6ZWROZXdSYW5nZSwgdHJpcFJhbmdlKSkge1xuICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKGNvbmZsaWN0RGV0YWlsKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIG9jY3VwaWVkIGRhdGVzIGZvciB2aXN1YWwgaW5kaWNhdG9yc1xuICAgICAgICB0aGlzLmFkZE9jY3VwaWVkRGF0ZXNGcm9tVHJpcCh0cmlwLCBvY2N1cGllZERhdGVzKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBhbGwgb2NjdXBpZWQgZGF0ZXMgZm9yIGNhbGVuZGFyIG1hcmtpbmcgKHJlZ2FyZGxlc3Mgb2YgY29uZmxpY3RzKVxuICAgIGNvbnN0IGFsbE9jY3VwaWVkRGF0ZXMgPSB0aGlzLmdldEFsbE9jY3VwaWVkRGF0ZXMoZXhpc3RpbmdUcmlwcylcblxuICAgIHJldHVybiB7XG4gICAgICBpc1ZhbGlkOiBjb25mbGljdHMubGVuZ3RoID09PSAwLFxuICAgICAgY29uZmxpY3RzLFxuICAgICAgbWVzc2FnZTogdGhpcy5nZW5lcmF0ZVZhbGlkYXRpb25NZXNzYWdlKGNvbmZsaWN0cyksXG4gICAgICBvY2N1cGllZERhdGVzOiBhbGxPY2N1cGllZERhdGVzXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgb2NjdXBpZWQgZGF0ZXMgZnJvbSBleGlzdGluZyB0cmlwcyBmb3IgY2FsZW5kYXIgZGlzcGxheVxuICAgKi9cbiAgZ2V0QWxsT2NjdXBpZWREYXRlcyh0cmlwczogVHJpcFtdKTogRGF0ZVtdIHtcbiAgICBjb25zdCBvY2N1cGllZERhdGVzOiBEYXRlW10gPSBbXVxuXG4gICAgZm9yIChjb25zdCB0cmlwIG9mIHRyaXBzKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZFRyaXAodHJpcCkpIGNvbnRpbnVlXG4gICAgICB0aGlzLmFkZE9jY3VwaWVkRGF0ZXNGcm9tVHJpcCh0cmlwLCBvY2N1cGllZERhdGVzKVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGFuZCBzb3J0XG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KG9jY3VwaWVkRGF0ZXMubWFwKGQgPT4gZC5nZXRUaW1lKCkpKV1cbiAgICAgIC5tYXAodGltZSA9PiBuZXcgRGF0ZSh0aW1lKSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3BlY2lmaWMgZGF0ZSBpcyBvY2N1cGllZCBieSBleGlzdGluZyB0cmlwc1xuICAgKi9cbiAgaXNEYXRlT2NjdXBpZWQoZGF0ZTogRGF0ZSwgZXhpc3RpbmdUcmlwczogVHJpcFtdKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9ybWFsaXplZERhdGUgPSBzdGFydE9mRGF5KGRhdGUpXG4gICAgXG4gICAgcmV0dXJuIGV4aXN0aW5nVHJpcHMuc29tZSh0cmlwID0+IHtcbiAgICAgIGlmICghdGhpcy5pc1ZhbGlkVHJpcCh0cmlwKSkgcmV0dXJuIGZhbHNlXG4gICAgICBcbiAgICAgIGNvbnN0IHRyaXBTdGFydCA9IHN0YXJ0T2ZEYXkodHJpcC5zdGFydERhdGUpXG4gICAgICBjb25zdCB0cmlwRW5kID0gc3RhcnRPZkRheSh0cmlwLmVuZERhdGUpXG4gICAgICBcbiAgICAgIHJldHVybiBub3JtYWxpemVkRGF0ZSA+PSB0cmlwU3RhcnQgJiYgbm9ybWFsaXplZERhdGUgPD0gdHJpcEVuZFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRyaXBzIHRoYXQgb2NjdXB5IGEgc3BlY2lmaWMgZGF0ZVxuICAgKi9cbiAgZ2V0VHJpcHNPbkRhdGUoZGF0ZTogRGF0ZSwgZXhpc3RpbmdUcmlwczogVHJpcFtdKTogVHJpcFtdIHtcbiAgICBjb25zdCBub3JtYWxpemVkRGF0ZSA9IHN0YXJ0T2ZEYXkoZGF0ZSlcbiAgICBcbiAgICByZXR1cm4gZXhpc3RpbmdUcmlwcy5maWx0ZXIodHJpcCA9PiB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZFRyaXAodHJpcCkpIHJldHVybiBmYWxzZVxuICAgICAgXG4gICAgICBjb25zdCB0cmlwU3RhcnQgPSBzdGFydE9mRGF5KHRyaXAuc3RhcnREYXRlKVxuICAgICAgY29uc3QgdHJpcEVuZCA9IHN0YXJ0T2ZEYXkodHJpcC5lbmREYXRlKVxuICAgICAgXG4gICAgICByZXR1cm4gbm9ybWFsaXplZERhdGUgPj0gdHJpcFN0YXJ0ICYmIG5vcm1hbGl6ZWREYXRlIDw9IHRyaXBFbmRcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgbmV4dCBhdmFpbGFibGUgZGF0ZSByYW5nZSBvZiBzcGVjaWZpZWQgbGVuZ3RoXG4gICAqL1xuICBmaW5kTmV4dEF2YWlsYWJsZURhdGVSYW5nZShcbiAgICBwcmVmZXJyZWRTdGFydDogRGF0ZSxcbiAgICBsZW5ndGhJbkRheXM6IG51bWJlcixcbiAgICBleGlzdGluZ1RyaXBzOiBUcmlwW10sXG4gICAgc2VhcmNoTGltaXQ6IG51bWJlciA9IDM2NVxuICApOiBEYXRlUmFuZ2UgfCBudWxsIHtcbiAgICBsZXQgdGVzdERhdGUgPSBzdGFydE9mRGF5KHByZWZlcnJlZFN0YXJ0KVxuICAgIGNvbnN0IG1heFNlYXJjaERhdGUgPSBuZXcgRGF0ZSh0ZXN0RGF0ZS5nZXRUaW1lKCkgKyAoc2VhcmNoTGltaXQgKiAyNCAqIDYwICogNjAgKiAxMDAwKSlcblxuICAgIHdoaWxlICh0ZXN0RGF0ZSA8PSBtYXhTZWFyY2hEYXRlKSB7XG4gICAgICBjb25zdCB0ZXN0UmFuZ2U6IERhdGVSYW5nZSA9IHtcbiAgICAgICAgc3RhcnQ6IHRlc3REYXRlLFxuICAgICAgICBlbmQ6IG5ldyBEYXRlKHRlc3REYXRlLmdldFRpbWUoKSArICgobGVuZ3RoSW5EYXlzIC0gMSkgKiAyNCAqIDYwICogNjAgKiAxMDAwKSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVEYXRlUmFuZ2UodGVzdFJhbmdlLCBleGlzdGluZ1RyaXBzKVxuICAgICAgaWYgKHZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgICByZXR1cm4gdGVzdFJhbmdlXG4gICAgICB9XG5cbiAgICAgIC8vIE1vdmUgdG8gbmV4dCBkYXlcbiAgICAgIHRlc3REYXRlID0gbmV3IERhdGUodGVzdERhdGUuZ2V0VGltZSgpICsgKDI0ICogNjAgKiA2MCAqIDEwMDApKVxuICAgIH1cblxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKipcbiAgICogU3VnZ2VzdCBhbHRlcm5hdGl2ZSBkYXRlcyB3aGVuIGNvbmZsaWN0cyBleGlzdFxuICAgKi9cbiAgc3VnZ2VzdEFsdGVybmF0aXZlRGF0ZXMoXG4gICAgY29uZmxpY3RlZFJhbmdlOiBEYXRlUmFuZ2UsXG4gICAgbGVuZ3RoSW5EYXlzOiBudW1iZXIsXG4gICAgZXhpc3RpbmdUcmlwczogVHJpcFtdXG4gICk6IERhdGVSYW5nZVtdIHtcbiAgICBjb25zdCBzdWdnZXN0aW9uczogRGF0ZVJhbmdlW10gPSBbXVxuICAgIGNvbnN0IGR1cmF0aW9uID0gbGVuZ3RoSW5EYXlzIHx8IGRpZmZlcmVuY2VJbkRheXMoY29uZmxpY3RlZFJhbmdlLmVuZCwgY29uZmxpY3RlZFJhbmdlLnN0YXJ0KSArIDFcblxuICAgIC8vIFRyeSBlYXJsaWVyIGRhdGVzXG4gICAgY29uc3QgZWFybGllckRhdGUgPSBuZXcgRGF0ZShjb25mbGljdGVkUmFuZ2Uuc3RhcnQuZ2V0VGltZSgpIC0gKDMwICogMjQgKiA2MCAqIDYwICogMTAwMCkpXG4gICAgY29uc3QgZWFybGllclJhbmdlID0gdGhpcy5maW5kTmV4dEF2YWlsYWJsZURhdGVSYW5nZShlYXJsaWVyRGF0ZSwgZHVyYXRpb24sIGV4aXN0aW5nVHJpcHMsIDYwKVxuICAgIGlmIChlYXJsaWVyUmFuZ2UgJiYgZWFybGllclJhbmdlLnN0YXJ0IDwgY29uZmxpY3RlZFJhbmdlLnN0YXJ0KSB7XG4gICAgICBzdWdnZXN0aW9ucy5wdXNoKGVhcmxpZXJSYW5nZSlcbiAgICB9XG5cbiAgICAvLyBUcnkgbGF0ZXIgZGF0ZXNcbiAgICBjb25zdCBsYXRlckRhdGUgPSBuZXcgRGF0ZShjb25mbGljdGVkUmFuZ2UuZW5kLmdldFRpbWUoKSArICgyNCAqIDYwICogNjAgKiAxMDAwKSlcbiAgICBjb25zdCBsYXRlclJhbmdlID0gdGhpcy5maW5kTmV4dEF2YWlsYWJsZURhdGVSYW5nZShsYXRlckRhdGUsIGR1cmF0aW9uLCBleGlzdGluZ1RyaXBzLCA2MClcbiAgICBpZiAobGF0ZXJSYW5nZSkge1xuICAgICAgc3VnZ2VzdGlvbnMucHVzaChsYXRlclJhbmdlKVxuICAgIH1cblxuICAgIHJldHVybiBzdWdnZXN0aW9ucy5zbGljZSgwLCAzKSAvLyBSZXR1cm4gbWF4IDMgc3VnZ2VzdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBCYXRjaCB2YWxpZGF0aW9uIGZvciBtdWx0aXBsZSBkYXRlIHJhbmdlc1xuICAgKi9cbiAgdmFsaWRhdGVNdWx0aXBsZURhdGVSYW5nZXMoXG4gICAgbmV3UmFuZ2VzOiBEYXRlUmFuZ2VbXSxcbiAgICBleGlzdGluZ1RyaXBzOiBUcmlwW11cbiAgKTogeyBbaW5kZXg6IG51bWJlcl06IFZhbGlkYXRpb25SZXN1bHQgfSB7XG4gICAgY29uc3QgcmVzdWx0czogeyBbaW5kZXg6IG51bWJlcl06IFZhbGlkYXRpb25SZXN1bHQgfSA9IHt9XG5cbiAgICAvLyBDcmVhdGUgYSBjb21iaW5lZCBsaXN0IG9mIGV4aXN0aW5nIHRyaXBzIHBsdXMgdmFsaWRhdGVkIG5ldyB0cmlwc1xuICAgIGxldCBjb21iaW5lZFRyaXBzID0gWy4uLmV4aXN0aW5nVHJpcHNdXG5cbiAgICBuZXdSYW5nZXMuZm9yRWFjaCgocmFuZ2UsIGluZGV4KSA9PiB7XG4gICAgICAvLyBWYWxpZGF0ZSBhZ2FpbnN0IGV4aXN0aW5nIHRyaXBzIGFuZCBwcmV2aW91c2x5IHZhbGlkYXRlZCBuZXcgdHJpcHNcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudmFsaWRhdGVEYXRlUmFuZ2UocmFuZ2UsIGNvbWJpbmVkVHJpcHMpXG4gICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdFxuXG4gICAgICAvLyBJZiB2YWxpZCwgYWRkIHRvIGNvbWJpbmVkIHRyaXBzIGZvciBuZXh0IHZhbGlkYXRpb25zXG4gICAgICBpZiAocmVzdWx0LmlzVmFsaWQpIHtcbiAgICAgICAgY29tYmluZWRUcmlwcy5wdXNoKHtcbiAgICAgICAgICBpZDogYHRlbXAtJHtpbmRleH1gLFxuICAgICAgICAgIGNvdW50cnk6ICdURU1QJyxcbiAgICAgICAgICBzdGFydERhdGU6IHJhbmdlLnN0YXJ0LFxuICAgICAgICAgIGVuZERhdGU6IHJhbmdlLmVuZCxcbiAgICAgICAgICBkYXlzOiBkaWZmZXJlbmNlSW5EYXlzKHJhbmdlLmVuZCwgcmFuZ2Uuc3RhcnQpICsgMVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gcmVzdWx0c1xuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGU6IENoZWNrIGlmIHR3byBkYXRlIHJhbmdlcyBvdmVybGFwXG4gICAqL1xuICBwcml2YXRlIHJhbmdlc092ZXJsYXAocmFuZ2UxOiBEYXRlUmFuZ2UsIHJhbmdlMjogRGF0ZVJhbmdlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGFyZUludGVydmFsc092ZXJsYXBwaW5nKFxuICAgICAgeyBzdGFydDogcmFuZ2UxLnN0YXJ0LCBlbmQ6IHJhbmdlMS5lbmQgfSxcbiAgICAgIHsgc3RhcnQ6IHJhbmdlMi5zdGFydCwgZW5kOiByYW5nZTIuZW5kIH1cbiAgICApXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZTogQ2FsY3VsYXRlIGRldGFpbGVkIGNvbmZsaWN0IGluZm9ybWF0aW9uXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZUNvbmZsaWN0RGV0YWlsKFxuICAgIG5ld1JhbmdlOiBEYXRlUmFuZ2UsXG4gICAgdHJpcFJhbmdlOiBEYXRlUmFuZ2UsXG4gICAgdHJpcDogVHJpcFxuICApOiBDb25mbGljdERldGFpbCB7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBhY3R1YWwgb3ZlcmxhcCBwZXJpb2RcbiAgICBjb25zdCBjb25mbGljdFN0YXJ0ID0gbmV3UmFuZ2Uuc3RhcnQgPiB0cmlwUmFuZ2Uuc3RhcnQgPyBuZXdSYW5nZS5zdGFydCA6IHRyaXBSYW5nZS5zdGFydFxuICAgIGNvbnN0IGNvbmZsaWN0RW5kID0gbmV3UmFuZ2UuZW5kIDwgdHJpcFJhbmdlLmVuZCA/IG5ld1JhbmdlLmVuZCA6IHRyaXBSYW5nZS5lbmRcbiAgICBjb25zdCBvdmVybGFwRGF5cyA9IGRpZmZlcmVuY2VJbkRheXMoY29uZmxpY3RFbmQsIGNvbmZsaWN0U3RhcnQpICsgMVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyaXBJZDogdHJpcC5pZCxcbiAgICAgIHRyaXBDb3VudHJ5OiB0cmlwLmNvdW50cnksXG4gICAgICBjb25mbGljdFN0YXJ0LFxuICAgICAgY29uZmxpY3RFbmQsXG4gICAgICBvdmVybGFwRGF5czogTWF0aC5tYXgoMCwgb3ZlcmxhcERheXMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGU6IERldGVybWluZSBpZiBjb25mbGljdCBzaG91bGQgYmUgcmVwb3J0ZWQgYmFzZWQgb24gY29uZmlndXJhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBzaG91bGRSZXBvcnRDb25mbGljdChcbiAgICBjb25mbGljdDogQ29uZmxpY3REZXRhaWwsXG4gICAgbmV3UmFuZ2U6IERhdGVSYW5nZSxcbiAgICB0cmlwUmFuZ2U6IERhdGVSYW5nZVxuICApOiBib29sZWFuIHtcbiAgICAvLyBJbiBzdHJpY3QgbW9kZSwgcmVwb3J0IGFsbCBjb25mbGljdHNcbiAgICBpZiAodGhpcy5jb25maWcuc3RyaWN0TW9kZSkgcmV0dXJuIHRydWVcblxuICAgIC8vIFNhbWUtZGF5IHRyYXZlbCBleGNlcHRpb25cbiAgICBpZiAodGhpcy5jb25maWcuYWxsb3dTYW1lRGF5VHJhdmVsKSB7XG4gICAgICBjb25zdCBpc1NhbWVEYXlUcmFuc2l0aW9uID0gXG4gICAgICAgIChuZXdSYW5nZS5zdGFydC5nZXRUaW1lKCkgPT09IHRyaXBSYW5nZS5lbmQuZ2V0VGltZSgpKSB8fFxuICAgICAgICAobmV3UmFuZ2UuZW5kLmdldFRpbWUoKSA9PT0gdHJpcFJhbmdlLnN0YXJ0LmdldFRpbWUoKSlcbiAgICAgIFxuICAgICAgaWYgKGlzU2FtZURheVRyYW5zaXRpb24pIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIC8vIEJvcmRlciB0cmFuc2l0aW9uIGV4Y2VwdGlvblxuICAgIGlmICh0aGlzLmNvbmZpZy5hbGxvd0JvcmRlclRyYW5zaXRpb25zICYmIGNvbmZsaWN0Lm92ZXJsYXBEYXlzIDw9IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZTogQWRkIG9jY3VwaWVkIGRhdGVzIGZyb20gYSB0cmlwIHRvIHRoZSBvY2N1cGllZCBkYXRlcyBhcnJheVxuICAgKi9cbiAgcHJpdmF0ZSBhZGRPY2N1cGllZERhdGVzRnJvbVRyaXAodHJpcDogVHJpcCwgb2NjdXBpZWREYXRlczogRGF0ZVtdKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhcnQgPSBzdGFydE9mRGF5KHRyaXAuc3RhcnREYXRlKVxuICAgIGNvbnN0IGVuZCA9IHN0YXJ0T2ZEYXkodHJpcC5lbmREYXRlKVxuICAgIFxuICAgIGxldCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0KVxuICAgIHdoaWxlIChjdXJyZW50RGF0ZSA8PSBlbmQpIHtcbiAgICAgIG9jY3VwaWVkRGF0ZXMucHVzaChuZXcgRGF0ZShjdXJyZW50RGF0ZSkpXG4gICAgICBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnREYXRlLmdldFRpbWUoKSArICgyNCAqIDYwICogNjAgKiAxMDAwKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZTogR2VuZXJhdGUgaHVtYW4tcmVhZGFibGUgdmFsaWRhdGlvbiBtZXNzYWdlXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlVmFsaWRhdGlvbk1lc3NhZ2UoY29uZmxpY3RzOiBDb25mbGljdERldGFpbFtdKTogc3RyaW5nIHtcbiAgICBpZiAoY29uZmxpY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdEYXRlcyBhcmUgYXZhaWxhYmxlJ1xuICAgIH1cblxuICAgIGlmIChjb25mbGljdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBjb25mbGljdCA9IGNvbmZsaWN0c1swXVxuICAgICAgcmV0dXJuIGBEYXRlcyBvdmVybGFwIHdpdGggZXhpc3RpbmcgdHJpcCB0byAke2NvbmZsaWN0LnRyaXBDb3VudHJ5fSAoJHtjb25mbGljdC5vdmVybGFwRGF5c30gZGF5JHtjb25mbGljdC5vdmVybGFwRGF5cyAhPT0gMSA/ICdzJyA6ICcnfSlgXG4gICAgfVxuXG4gICAgcmV0dXJuIGBEYXRlcyBjb25mbGljdCB3aXRoICR7Y29uZmxpY3RzLmxlbmd0aH0gZXhpc3RpbmcgdHJpcHNgXG4gIH1cblxuICAvKipcbiAgICogUHJpdmF0ZTogVmFsaWRhdGUgZGF0ZSByYW5nZSBpbnB1dFxuICAgKi9cbiAgcHJpdmF0ZSBpc1ZhbGlkRGF0ZVJhbmdlKHJhbmdlOiBEYXRlUmFuZ2UpOiBib29sZWFuIHtcbiAgICBpZiAoIXJhbmdlIHx8ICFyYW5nZS5zdGFydCB8fCAhcmFuZ2UuZW5kKSByZXR1cm4gZmFsc2VcbiAgICBpZiAoIWlzVmFsaWQocmFuZ2Uuc3RhcnQpIHx8ICFpc1ZhbGlkKHJhbmdlLmVuZCkpIHJldHVybiBmYWxzZVxuICAgIGlmIChyYW5nZS5zdGFydCA+IHJhbmdlLmVuZCkgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBQcml2YXRlOiBWYWxpZGF0ZSB0cmlwIGRhdGFcbiAgICovXG4gIHByaXZhdGUgaXNWYWxpZFRyaXAodHJpcDogVHJpcCk6IGJvb2xlYW4ge1xuICAgIGlmICghdHJpcCB8fCAhdHJpcC5zdGFydERhdGUgfHwgIXRyaXAuZW5kRGF0ZSkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKCFpc1ZhbGlkKHRyaXAuc3RhcnREYXRlKSB8fCAhaXNWYWxpZCh0cmlwLmVuZERhdGUpKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodHJpcC5zdGFydERhdGUgPiB0cmlwLmVuZERhdGUpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHVwZGF0ZUNvbmZpZyhuZXdDb25maWc6IFBhcnRpYWw8T3ZlcmxhcFByZXZlbnRpb25Db25maWc+KTogdm9pZCB7XG4gICAgdGhpcy5jb25maWcgPSB7IC4uLnRoaXMuY29uZmlnLCAuLi5uZXdDb25maWcgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGdldENvbmZpZygpOiBPdmVybGFwUHJldmVudGlvbkNvbmZpZyB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5jb25maWcgfVxuICB9XG59IiwiLyoqXG4gKiBTY2hlbmdlbiBBcmVhIENvdW50cmllcyBEYXRhXG4gKiBDb21wbGV0ZSBsaXN0IG9mIGFsbCAyNyBTY2hlbmdlbiBjb3VudHJpZXMgd2l0aCBmbGFncyBhbmQgbWV0YWRhdGFcbiAqIFVwZGF0ZWQgYXMgb2YgMjAyNCAtIGluY2x1ZGVzIGFsbCBjdXJyZW50IG1lbWJlciBzdGF0ZXNcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVuZ2VuQ291bnRyeSB7XG4gIGNvZGU6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgZmxhZzogc3RyaW5nXG4gIGpvaW5lZFNjaGVuZ2VuOiBzdHJpbmdcbiAgaXNFVU1lbWJlcjogYm9vbGVhblxuICBjYXBpdGFsOiBzdHJpbmdcbiAgdGltZXpvbmU6IHN0cmluZ1xuICBjdXJyZW5jeTogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBTQ0hFTkdFTl9DT1VOVFJJRVM6IFNjaGVuZ2VuQ291bnRyeVtdID0gW1xuICB7XG4gICAgY29kZTogJ0FUJyxcbiAgICBuYW1lOiAnQXVzdHJpYScsXG4gICAgZmxhZzogJ/Cfh6bwn4e5JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ1ZpZW5uYScsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0JFJyxcbiAgICBuYW1lOiAnQmVsZ2l1bScsXG4gICAgZmxhZzogJ/Cfh6fwn4eqJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0JydXNzZWxzJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnQkcnLFxuICAgIG5hbWU6ICdCdWxnYXJpYScsXG4gICAgZmxhZzogJ/Cfh6fwn4esJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzIwMjQnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ1NvZmlhJyxcbiAgICB0aW1lem9uZTogJ0VFVCcsXG4gICAgY3VycmVuY3k6ICdCR04nXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnSFInLFxuICAgIG5hbWU6ICdDcm9hdGlhJyxcbiAgICBmbGFnOiAn8J+HrfCfh7cnLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMjAyMycsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnWmFncmViJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnQ1onLFxuICAgIG5hbWU6ICdDemVjaCBSZXB1YmxpYycsXG4gICAgZmxhZzogJ/Cfh6jwn4e/JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzIwMDcnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ1ByYWd1ZScsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnQ1pLJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0RLJyxcbiAgICBuYW1lOiAnRGVubWFyaycsXG4gICAgZmxhZzogJ/Cfh6nwn4ewJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0NvcGVuaGFnZW4nLFxuICAgIHRpbWV6b25lOiAnQ0VUJyxcbiAgICBjdXJyZW5jeTogJ0RLSydcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdFRScsXG4gICAgbmFtZTogJ0VzdG9uaWEnLFxuICAgIGZsYWc6ICfwn4eq8J+HqicsXG4gICAgam9pbmVkU2NoZW5nZW46ICcyMDA3JyxcbiAgICBpc0VVTWVtYmVyOiB0cnVlLFxuICAgIGNhcGl0YWw6ICdUYWxsaW5uJyxcbiAgICB0aW1lem9uZTogJ0VFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnRkknLFxuICAgIG5hbWU6ICdGaW5sYW5kJyxcbiAgICBmbGFnOiAn8J+Hq/Cfh64nLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMTk5NScsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnSGVsc2lua2knLFxuICAgIHRpbWV6b25lOiAnRUVUJyxcbiAgICBjdXJyZW5jeTogJ0VVUidcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdGUicsXG4gICAgbmFtZTogJ0ZyYW5jZScsXG4gICAgZmxhZzogJ/Cfh6vwn4e3JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ1BhcmlzJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnREUnLFxuICAgIG5hbWU6ICdHZXJtYW55JyxcbiAgICBmbGFnOiAn8J+HqfCfh6onLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMTk5NScsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnQmVybGluJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnR1InLFxuICAgIG5hbWU6ICdHcmVlY2UnLFxuICAgIGZsYWc6ICfwn4es8J+HtycsXG4gICAgam9pbmVkU2NoZW5nZW46ICcyMDAwJyxcbiAgICBpc0VVTWVtYmVyOiB0cnVlLFxuICAgIGNhcGl0YWw6ICdBdGhlbnMnLFxuICAgIHRpbWV6b25lOiAnRUVUJyxcbiAgICBjdXJyZW5jeTogJ0VVUidcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdIVScsXG4gICAgbmFtZTogJ0h1bmdhcnknLFxuICAgIGZsYWc6ICfwn4et8J+HuicsXG4gICAgam9pbmVkU2NoZW5nZW46ICcyMDA3JyxcbiAgICBpc0VVTWVtYmVyOiB0cnVlLFxuICAgIGNhcGl0YWw6ICdCdWRhcGVzdCcsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnSFVGJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0lTJyxcbiAgICBuYW1lOiAnSWNlbGFuZCcsXG4gICAgZmxhZzogJ/Cfh67wn4e4JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTYnLFxuICAgIGlzRVVNZW1iZXI6IGZhbHNlLFxuICAgIGNhcGl0YWw6ICdSZXlramF2aWsnLFxuICAgIHRpbWV6b25lOiAnR01UJyxcbiAgICBjdXJyZW5jeTogJ0lTSydcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdJVCcsXG4gICAgbmFtZTogJ0l0YWx5JyxcbiAgICBmbGFnOiAn8J+HrvCfh7knLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMTk5NScsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnUm9tZScsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0xWJyxcbiAgICBuYW1lOiAnTGF0dmlhJyxcbiAgICBmbGFnOiAn8J+HsfCfh7snLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMjAwNycsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnUmlnYScsXG4gICAgdGltZXpvbmU6ICdFRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0xJJyxcbiAgICBuYW1lOiAnTGllY2h0ZW5zdGVpbicsXG4gICAgZmxhZzogJ/Cfh7Hwn4euJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzIwMTEnLFxuICAgIGlzRVVNZW1iZXI6IGZhbHNlLFxuICAgIGNhcGl0YWw6ICdWYWR1eicsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnQ0hGJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0xUJyxcbiAgICBuYW1lOiAnTGl0aHVhbmlhJyxcbiAgICBmbGFnOiAn8J+HsfCfh7knLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMjAwNycsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnVmlsbml1cycsXG4gICAgdGltZXpvbmU6ICdFRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0xVJyxcbiAgICBuYW1lOiAnTHV4ZW1ib3VyZycsXG4gICAgZmxhZzogJ/Cfh7Hwn4e6JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0x1eGVtYm91cmcnLFxuICAgIHRpbWV6b25lOiAnQ0VUJyxcbiAgICBjdXJyZW5jeTogJ0VVUidcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdNVCcsXG4gICAgbmFtZTogJ01hbHRhJyxcbiAgICBmbGFnOiAn8J+HsvCfh7knLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMjAwNycsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnVmFsbGV0dGEnLFxuICAgIHRpbWV6b25lOiAnQ0VUJyxcbiAgICBjdXJyZW5jeTogJ0VVUidcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdOTCcsXG4gICAgbmFtZTogJ05ldGhlcmxhbmRzJyxcbiAgICBmbGFnOiAn8J+Hs/Cfh7EnLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMTk5NScsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnQW1zdGVyZGFtJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnTk8nLFxuICAgIG5hbWU6ICdOb3J3YXknLFxuICAgIGZsYWc6ICfwn4ez8J+HtCcsXG4gICAgam9pbmVkU2NoZW5nZW46ICcxOTk2JyxcbiAgICBpc0VVTWVtYmVyOiBmYWxzZSxcbiAgICBjYXBpdGFsOiAnT3NsbycsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnTk9LJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ1BMJyxcbiAgICBuYW1lOiAnUG9sYW5kJyxcbiAgICBmbGFnOiAn8J+HtfCfh7EnLFxuICAgIGpvaW5lZFNjaGVuZ2VuOiAnMjAwNycsXG4gICAgaXNFVU1lbWJlcjogdHJ1ZSxcbiAgICBjYXBpdGFsOiAnV2Fyc2F3JyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdQTE4nXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnUFQnLFxuICAgIG5hbWU6ICdQb3J0dWdhbCcsXG4gICAgZmxhZzogJ/Cfh7Xwn4e5JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0xpc2JvbicsXG4gICAgdGltZXpvbmU6ICdXRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ1JPJyxcbiAgICBuYW1lOiAnUm9tYW5pYScsXG4gICAgZmxhZzogJ/Cfh7fwn4e0JyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzIwMjQnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0J1Y2hhcmVzdCcsXG4gICAgdGltZXpvbmU6ICdFRVQnLFxuICAgIGN1cnJlbmN5OiAnUk9OJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ1NLJyxcbiAgICBuYW1lOiAnU2xvdmFraWEnLFxuICAgIGZsYWc6ICfwn4e48J+HsCcsXG4gICAgam9pbmVkU2NoZW5nZW46ICcyMDA3JyxcbiAgICBpc0VVTWVtYmVyOiB0cnVlLFxuICAgIGNhcGl0YWw6ICdCcmF0aXNsYXZhJyxcbiAgICB0aW1lem9uZTogJ0NFVCcsXG4gICAgY3VycmVuY3k6ICdFVVInXG4gIH0sXG4gIHtcbiAgICBjb2RlOiAnU0knLFxuICAgIG5hbWU6ICdTbG92ZW5pYScsXG4gICAgZmxhZzogJ/Cfh7jwn4euJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzIwMDcnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ0xqdWJsamFuYScsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnRVVSJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0VTJyxcbiAgICBuYW1lOiAnU3BhaW4nLFxuICAgIGZsYWc6ICfwn4eq8J+HuCcsXG4gICAgam9pbmVkU2NoZW5nZW46ICcxOTk1JyxcbiAgICBpc0VVTWVtYmVyOiB0cnVlLFxuICAgIGNhcGl0YWw6ICdNYWRyaWQnLFxuICAgIHRpbWV6b25lOiAnQ0VUJyxcbiAgICBjdXJyZW5jeTogJ0VVUidcbiAgfSxcbiAge1xuICAgIGNvZGU6ICdTRScsXG4gICAgbmFtZTogJ1N3ZWRlbicsXG4gICAgZmxhZzogJ/Cfh7jwn4eqJyxcbiAgICBqb2luZWRTY2hlbmdlbjogJzE5OTUnLFxuICAgIGlzRVVNZW1iZXI6IHRydWUsXG4gICAgY2FwaXRhbDogJ1N0b2NraG9sbScsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnU0VLJ1xuICB9LFxuICB7XG4gICAgY29kZTogJ0NIJyxcbiAgICBuYW1lOiAnU3dpdHplcmxhbmQnLFxuICAgIGZsYWc6ICfwn4eo8J+HrScsXG4gICAgam9pbmVkU2NoZW5nZW46ICcyMDA4JyxcbiAgICBpc0VVTWVtYmVyOiBmYWxzZSxcbiAgICBjYXBpdGFsOiAnQmVybicsXG4gICAgdGltZXpvbmU6ICdDRVQnLFxuICAgIGN1cnJlbmN5OiAnQ0hGJ1xuICB9XG5dXG5cbi8vIFV0aWxpdHkgZnVuY3Rpb25zIGZvciB3b3JraW5nIHdpdGggY291bnRyaWVzXG5leHBvcnQgY29uc3QgZ2V0Q291bnRyeUJ5Q29kZSA9IChjb2RlOiBzdHJpbmcpOiBTY2hlbmdlbkNvdW50cnkgfCB1bmRlZmluZWQgPT4ge1xuICByZXR1cm4gU0NIRU5HRU5fQ09VTlRSSUVTLmZpbmQoY291bnRyeSA9PiBjb3VudHJ5LmNvZGUgPT09IGNvZGUpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRDb3VudHJ5QnlOYW1lID0gKG5hbWU6IHN0cmluZyk6IFNjaGVuZ2VuQ291bnRyeSB8IHVuZGVmaW5lZCA9PiB7XG4gIHJldHVybiBTQ0hFTkdFTl9DT1VOVFJJRVMuZmluZChjb3VudHJ5ID0+IFxuICAgIGNvdW50cnkubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q291bnRyaWVzRm9yU2VsZWN0ID0gKCkgPT4ge1xuICByZXR1cm4gU0NIRU5HRU5fQ09VTlRSSUVTLm1hcChjb3VudHJ5ID0+ICh7XG4gICAgdmFsdWU6IGNvdW50cnkuY29kZSxcbiAgICBsYWJlbDogYCR7Y291bnRyeS5mbGFnfSAke2NvdW50cnkubmFtZX1gLFxuICAgIGNvdW50cnlcbiAgfSkpLnNvcnQoKGEsIGIpID0+IGEuY291bnRyeS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5jb3VudHJ5Lm5hbWUpKVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RVVNZW1iZXJDb3VudHJpZXMgPSAoKTogU2NoZW5nZW5Db3VudHJ5W10gPT4ge1xuICByZXR1cm4gU0NIRU5HRU5fQ09VTlRSSUVTLmZpbHRlcihjb3VudHJ5ID0+IGNvdW50cnkuaXNFVU1lbWJlcilcbn1cblxuZXhwb3J0IGNvbnN0IGdldE5vbkVVU2NoZW5nZW5Db3VudHJpZXMgPSAoKTogU2NoZW5nZW5Db3VudHJ5W10gPT4ge1xuICByZXR1cm4gU0NIRU5HRU5fQ09VTlRSSUVTLmZpbHRlcihjb3VudHJ5ID0+ICFjb3VudHJ5LmlzRVVNZW1iZXIpXG59XG5cbi8vIEV4cG9ydCBjb3VudCBmb3IgdmFsaWRhdGlvblxuZXhwb3J0IGNvbnN0IFNDSEVOR0VOX0NPVU5UUklFU19DT1VOVCA9IFNDSEVOR0VOX0NPVU5UUklFUy5sZW5ndGgiXSwibmFtZXMiOlsiUm9idXN0U2NoZW5nZW5DYWxjdWxhdG9yIiwiY2FsY3VsYXRlRXhhY3RDb21wbGlhbmNlIiwidHJpcHMiLCJyZWZlcmVuY2VEYXRlIiwiRGF0ZSIsIkFycmF5IiwiaXNBcnJheSIsIkVycm9yIiwiaXNWYWxpZCIsIm5vdyIsInRlblllYXJzQWdvIiwic3ViRGF5cyIsImZpdmVZZWFyc0Zyb21Ob3ciLCJhZGREYXlzIiwiY29uc29sZSIsIndhcm4iLCJmb3JtYXQiLCJub3JtYWxpemVkUmVmRGF0ZSIsIm5vcm1hbGl6ZVRvU3RhcnRPZkRheSIsInBlcmlvZFN0YXJ0IiwiY2FsY3VsYXRlUGVyaW9kU3RhcnQiLCJ2YWxpZFRyaXBzIiwidmFsaWRhdGVBbmROb3JtYWxpemVUcmlwcyIsImxlbmd0aCIsInRvdGFsRGF5c1VzZWQiLCJkYXlzUmVtYWluaW5nIiwiTUFYX0RBWVNfSU5fUEVSSU9EIiwiaXNDb21wbGlhbnQiLCJvdmVyc3RheURheXMiLCJwZXJpb2RFbmQiLCJkZXRhaWxlZEJyZWFrZG93biIsImRhaWx5U3RheXMiLCJjcmVhdGVEYWlseVN0YXlNYXAiLCJyb2xsaW5nQ2hlY2tzIiwiY2FsY3VsYXRlUm9sbGluZ0NvbXBsaWFuY2VGb3JBbGxEYXlzIiwibWF4VmlvbGF0aW9uIiwiTWF0aCIsIm1heCIsIm1hcCIsImNoZWNrIiwiY3VycmVudENvbXBsaWFuY2UiLCJnZW5lcmF0ZURldGFpbGVkQnJlYWtkb3duIiwicmVzdWx0IiwiZGF5c0luV2luZG93IiwiZXJyb3IiLCJzdGFydE9mRGF5IiwiUk9MTElOR19QRVJJT0RfREFZUyIsImNhbGN1bGF0ZURheXNJbldpbmRvdyIsImVuZERhdGUiLCJub3JtYWxpemVkRW5kRGF0ZSIsIndpbmRvd1N0YXJ0IiwidG90YWxEYXlzIiwidHJpcCIsInN0YXJ0RGF0ZSIsImlkIiwidHJpcFN0YXJ0IiwidHJpcEVuZCIsIm92ZXJsYXBTdGFydCIsIm92ZXJsYXBFbmQiLCJkYXlzSW5PdmVybGFwIiwiZGlmZmVyZW5jZUluRGF5cyIsInZhbGlkYXRlUGxhbm5lZFRyaXAiLCJleGlzdGluZ1RyaXBzIiwicGxhbm5lZFRyaXAiLCJhbGxUcmlwcyIsImN1cnJlbnREYXRlIiwidmlvbGF0aW9uRGF0ZSIsIm92ZXJzdGF5IiwidmlvbGF0aW9uRGF5cyIsImZpbmRMYXRlc3RWYWxpZFN0YXJ0RGF0ZSIsInRyaXBMZW5ndGgiLCJlYXJsaWVzdFN0YXJ0IiwibGF0ZXN0U3RhcnQiLCJ0ZXN0RGF0ZSIsIm1pbkRhdGUiLCJ0ZXN0VHJpcCIsImNvdW50cnkiLCJkYXlzIiwidmFsaWRhdGlvbiIsImNhbGN1bGF0ZU1heENvbnNlY3V0aXZlRGF5cyIsIm1heERheXMiLCJ0ZXN0TGVuZ3RoIiwibWF4VGVzdExlbmd0aCIsIm1pbiIsInZhbGlkYXRlVHJpcHMiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsInNlZW5JZHMiLCJTZXQiLCJmb3JFYWNoIiwiaW5kZXgiLCJoYXMiLCJwdXNoIiwiZmllbGQiLCJtZXNzYWdlIiwic2V2ZXJpdHkiLCJ0cmlwSWQiLCJhZGQiLCJ0cmltIiwiZHVyYXRpb24iLCJhYnMiLCJpIiwiaiIsInRyaXAxIiwidHJpcDIiLCJvdmVybGFwIiwiZ2V0TmV4dFJlc2V0RGF0ZSIsImN1cnJlbnRXaW5kb3ciLCJlYXJsaWVzdFJlbGV2YW50RGF0ZSIsImNoZWNrRGF0ZSIsImRlYnVnUm9sbGluZ1dpbmRvdyIsInN1bW1hcnkiLCJ0cmlwc0luUGVyaW9kIiwiZmlsdGVyIiwiZGFpbHlCcmVha2Rvd24iLCJkYXkiLCJkYXlzVXNlZE9uRGF0ZSIsInZpb2xhdGlvbnMiLCJpc1Zpb2xhdGlvbiIsIm5leHRSZXNldERhdGUiLCJ2YWxpZGF0aW9uUmVzdWx0IiwiY3JpdGljYWxFcnJvcnMiLCJ2ZXJ5T2xkIiwidmVyeUZ1dHVyZSIsIm5vcm1hbGl6ZWRUcmlwIiwiaGFzTGVhcERheSIsInRyaXBDcm9zc2VzTGVhcERheSIsImRlYnVnIiwic29ydCIsImEiLCJiIiwiZ2V0VGltZSIsIk1hcCIsImRhdGVLZXkiLCJ0b0lTT1N0cmluZyIsInNwbGl0Iiwic2V0IiwiZ2V0IiwiY2hlY2tzIiwid2luZG93RW5kIiwiZGF0ZSIsImJyZWFrZG93biIsImNoZWNrSW5kZXgiLCJzdGF5c09uRGF0ZSIsInJvbGxpbmdDaGVjayIsImN1bXVsYXRpdmVEYXlzSW5XaW5kb3ciLCJjb250cmlidXRpbmdUcmlwcyIsIm5vcm1hbGl6ZWQiLCJyZWZZZWFyIiwiZ2V0RnVsbFllYXIiLCJzdGFydFllYXIiLCJjcm9zc2VzTGVhcFllYXIiLCJpc0xlYXBZZWFyIiwiZW5kWWVhciIsInllYXIiLCJsZWFwRGF5IiwiRGF0ZU92ZXJsYXBWYWxpZGF0b3IiLCJ2YWxpZGF0ZURhdGVSYW5nZSIsIm5ld1JhbmdlIiwiaXNWYWxpZERhdGVSYW5nZSIsImNvbmZsaWN0cyIsIm9jY3VwaWVkRGF0ZXMiLCJub3JtYWxpemVkTmV3UmFuZ2UiLCJzdGFydCIsImVuZCIsImVuZE9mRGF5IiwiaXNWYWxpZFRyaXAiLCJ0cmlwUmFuZ2UiLCJoYXNPdmVybGFwIiwicmFuZ2VzT3ZlcmxhcCIsImNvbmZsaWN0RGV0YWlsIiwiY2FsY3VsYXRlQ29uZmxpY3REZXRhaWwiLCJzaG91bGRSZXBvcnRDb25mbGljdCIsImFkZE9jY3VwaWVkRGF0ZXNGcm9tVHJpcCIsImFsbE9jY3VwaWVkRGF0ZXMiLCJnZXRBbGxPY2N1cGllZERhdGVzIiwiZ2VuZXJhdGVWYWxpZGF0aW9uTWVzc2FnZSIsImQiLCJ0aW1lIiwiaXNEYXRlT2NjdXBpZWQiLCJub3JtYWxpemVkRGF0ZSIsInNvbWUiLCJnZXRUcmlwc09uRGF0ZSIsImZpbmROZXh0QXZhaWxhYmxlRGF0ZVJhbmdlIiwicHJlZmVycmVkU3RhcnQiLCJsZW5ndGhJbkRheXMiLCJzZWFyY2hMaW1pdCIsIm1heFNlYXJjaERhdGUiLCJ0ZXN0UmFuZ2UiLCJzdWdnZXN0QWx0ZXJuYXRpdmVEYXRlcyIsImNvbmZsaWN0ZWRSYW5nZSIsInN1Z2dlc3Rpb25zIiwiZWFybGllckRhdGUiLCJlYXJsaWVyUmFuZ2UiLCJsYXRlckRhdGUiLCJsYXRlclJhbmdlIiwic2xpY2UiLCJ2YWxpZGF0ZU11bHRpcGxlRGF0ZVJhbmdlcyIsIm5ld1JhbmdlcyIsInJlc3VsdHMiLCJjb21iaW5lZFRyaXBzIiwicmFuZ2UiLCJyYW5nZTEiLCJyYW5nZTIiLCJhcmVJbnRlcnZhbHNPdmVybGFwcGluZyIsImNvbmZsaWN0U3RhcnQiLCJjb25mbGljdEVuZCIsIm92ZXJsYXBEYXlzIiwidHJpcENvdW50cnkiLCJjb25mbGljdCIsImNvbmZpZyIsInN0cmljdE1vZGUiLCJhbGxvd1NhbWVEYXlUcmF2ZWwiLCJpc1NhbWVEYXlUcmFuc2l0aW9uIiwiYWxsb3dCb3JkZXJUcmFuc2l0aW9ucyIsInVwZGF0ZUNvbmZpZyIsIm5ld0NvbmZpZyIsImdldENvbmZpZyIsIlNDSEVOR0VOX0NPVU5UUklFUyIsImNvZGUiLCJuYW1lIiwiZmxhZyIsImpvaW5lZFNjaGVuZ2VuIiwiaXNFVU1lbWJlciIsImNhcGl0YWwiLCJ0aW1lem9uZSIsImN1cnJlbmN5IiwiZ2V0Q291bnRyeUJ5Q29kZSIsImZpbmQiLCJnZXRDb3VudHJ5QnlOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRDb3VudHJpZXNGb3JTZWxlY3QiLCJ2YWx1ZSIsImxhYmVsIiwibG9jYWxlQ29tcGFyZSIsImdldEVVTWVtYmVyQ291bnRyaWVzIiwiZ2V0Tm9uRVVTY2hlbmdlbkNvdW50cmllcyIsIlNDSEVOR0VOX0NPVU5UUklFU19DT1VOVCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../calculator/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/../ui/dist/index.esm.js":
/*!*******************************!*\
  !*** ../ui/dist/index.esm.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimatedCounter: () => (/* binding */ AnimatedCounter),\n/* harmony export */   Badge: () => (/* binding */ Badge),\n/* harmony export */   Button: () => (/* binding */ Button$1),\n/* harmony export */   Calendar: () => (/* binding */ Calendar),\n/* harmony export */   CalendarModal: () => (/* binding */ CalendarModal),\n/* harmony export */   Card: () => (/* binding */ Card),\n/* harmony export */   CardContent: () => (/* binding */ CardContent),\n/* harmony export */   CardDescription: () => (/* binding */ CardDescription),\n/* harmony export */   CardFooter: () => (/* binding */ CardFooter),\n/* harmony export */   CardHeader: () => (/* binding */ CardHeader),\n/* harmony export */   CardTitle: () => (/* binding */ CardTitle),\n/* harmony export */   CircularProgress: () => (/* binding */ CircularProgress),\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   Input: () => (/* binding */ Input),\n/* harmony export */   Label: () => (/* binding */ Label),\n/* harmony export */   PaymentModal: () => (/* binding */ PaymentModal),\n/* harmony export */   PricingCards: () => (/* binding */ PricingCards),\n/* harmony export */   SchengenCalendar: () => (/* binding */ SchengenCalendar),\n/* harmony export */   Select: () => (/* binding */ Select),\n/* harmony export */   SubscriptionGate: () => (/* binding */ SubscriptionGate),\n/* harmony export */   TripCard: () => (/* binding */ TripCard),\n/* harmony export */   addDays: () => (/* binding */ addDays),\n/* harmony export */   badgeVariants: () => (/* binding */ badgeVariants),\n/* harmony export */   buttonVariants: () => (/* binding */ buttonVariants),\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   daysBetween: () => (/* binding */ daysBetween),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   endOfDay: () => (/* binding */ endOfDay),\n/* harmony export */   formatDateKey: () => (/* binding */ formatDateKey),\n/* harmony export */   formatDateRange: () => (/* binding */ formatDateRange),\n/* harmony export */   formatDisplayDate: () => (/* binding */ formatDisplayDate),\n/* harmony export */   generateId: () => (/* binding */ generateId),\n/* harmony export */   getDateRange: () => (/* binding */ getDateRange),\n/* harmony export */   isDateInRange: () => (/* binding */ isDateInRange),\n/* harmony export */   isFutureDate: () => (/* binding */ isFutureDate),\n/* harmony export */   isMobile: () => (/* binding */ isMobile),\n/* harmony export */   isPastDate: () => (/* binding */ isPastDate),\n/* harmony export */   isSameDay: () => (/* binding */ isSameDay),\n/* harmony export */   isToday: () => (/* binding */ isToday),\n/* harmony export */   isTouchDevice: () => (/* binding */ isTouchDevice),\n/* harmony export */   labelVariants: () => (/* binding */ labelVariants),\n/* harmony export */   startOfDay: () => (/* binding */ startOfDay),\n/* harmony export */   subtractDays: () => (/* binding */ subtractDays),\n/* harmony export */   throttle: () => (/* binding */ throttle),\n/* harmony export */   usePaymentModal: () => (/* binding */ usePaymentModal),\n/* harmony export */   useSubscriptionGate: () => (/* binding */ useSubscriptionGate)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(ssr)/../../node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tailwind-merge */ \"(ssr)/../../node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var class_variance_authority__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! class-variance-authority */ \"(ssr)/../../node_modules/class-variance-authority/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/addDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/addMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/addWeeks.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/addYears.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/differenceInCalendarDays.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/differenceInCalendarMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/eachMonthOfInterval.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfISOWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/format.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/getISOWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/getMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/getYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/getWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isAfter.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isBefore.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isDate.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isSameDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isSameMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isSameYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/max.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/min.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/setMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/setYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfDay.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfISOWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfMonth.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfWeek.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/startOfYear.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/eachDayOfInterval.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/isToday.mjs\");\n/* harmony import */ var _barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! __barrel_optimize__?names=addDays,addMonths,addWeeks,addYears,differenceInCalendarDays,differenceInCalendarMonths,eachDayOfInterval,eachMonthOfInterval,endOfDay,endOfISOWeek,endOfMonth,endOfWeek,endOfYear,format,getISOWeek,getMonth,getWeek,getYear,isAfter,isBefore,isDate,isSameDay,isSameMonth,isSameYear,isToday,max,min,setMonth,setYear,startOfDay,startOfISOWeek,startOfMonth,startOfWeek,startOfYear,subMonths!=!date-fns */ \"(ssr)/../../node_modules/date-fns/endOfDay.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _schengen_calculator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @schengen/calculator */ \"(ssr)/../calculator/dist/index.esm.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Utility function to merge Tailwind CSS classes with conditional logic\n */ function cn(...inputs) {\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_6__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n/**\n * Format a date to ISO string for consistent date comparisons\n */ function formatDateKey(date) {\n    return date.toISOString().split('T')[0];\n}\n/**\n * Check if two dates are the same day (ignoring time)\n */ function isSameDay(date1, date2) {\n    return formatDateKey(date1) === formatDateKey(date2);\n}\n/**\n * Check if a date is within a date range (inclusive)\n */ function isDateInRange(date, start, end) {\n    const dateKey = formatDateKey(date);\n    const startKey = formatDateKey(start);\n    const endKey = formatDateKey(end);\n    return dateKey >= startKey && dateKey <= endKey;\n}\n/**\n * Generate array of dates between start and end (inclusive)\n */ function getDateRange(start, end) {\n    const dates = [];\n    const current = new Date(start);\n    while(current <= end){\n        dates.push(new Date(current));\n        current.setDate(current.getDate() + 1);\n    }\n    return dates;\n}\n/**\n * Check if date is today\n */ function isToday(date) {\n    return isSameDay(date, new Date());\n}\n/**\n * Check if date is in the past\n */ function isPastDate(date) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return date < today;\n}\n/**\n * Check if date is in the future\n */ function isFutureDate(date) {\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    return date > today;\n}\n/**\n * Format date for display in UI components\n */ function formatDisplayDate(date, options) {\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        ...options\n    });\n}\n/**\n * Format date range for display\n */ function formatDateRange(start, end) {\n    if (isSameDay(start, end)) {\n        return formatDisplayDate(start);\n    }\n    return `${formatDisplayDate(start)} - ${formatDisplayDate(end)}`;\n}\n/**\n * Calculate number of days between two dates\n */ function daysBetween(start, end) {\n    const startTime = new Date(start).setHours(0, 0, 0, 0);\n    const endTime = new Date(end).setHours(0, 0, 0, 0);\n    return Math.ceil((endTime - startTime) / (1000 * 60 * 60 * 24));\n}\n/**\n * Add days to a date\n */ function addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}\n/**\n * Subtract days from a date\n */ function subtractDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() - days);\n    return result;\n}\n/**\n * Get the start of day for consistent date comparisons\n */ function startOfDay(date) {\n    const result = new Date(date);\n    result.setHours(0, 0, 0, 0);\n    return result;\n}\n/**\n * Get the end of day\n */ function endOfDay(date) {\n    const result = new Date(date);\n    result.setHours(23, 59, 59, 999);\n    return result;\n}\n/**\n * Debounce function for performance optimization\n */ function debounce(func, wait) {\n    let timeout = null;\n    return (...args)=>{\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(()=>{\n            func(...args);\n        }, wait);\n    };\n}\n/**\n * Throttle function for performance optimization\n */ function throttle(func, limit) {\n    let inThrottle = false;\n    return (...args)=>{\n        if (!inThrottle) {\n            func(...args);\n            inThrottle = true;\n            setTimeout(()=>{\n                inThrottle = false;\n            }, limit);\n        }\n    };\n}\n/**\n * Generate a unique ID for components\n */ function generateId(prefix = 'schengen') {\n    return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n}\n/**\n * Check if device is mobile based on viewport width\n */ function isMobile() {\n    return  false && 0;\n}\n/**\n * Check if device has touch capability\n */ function isTouchDevice() {\n    return  false && 0;\n}\n// packages/react/compose-refs/src/compose-refs.tsx\nfunction setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        return ref(value);\n    } else if (ref !== null && ref !== void 0) {\n        ref.current = value;\n    }\n}\nfunction composeRefs(...refs) {\n    return (node)=>{\n        let hasCleanup = false;\n        const cleanups = refs.map((ref)=>{\n            const cleanup = setRef(ref, node);\n            if (!hasCleanup && typeof cleanup == \"function\") {\n                hasCleanup = true;\n            }\n            return cleanup;\n        });\n        if (hasCleanup) {\n            return ()=>{\n                for(let i = 0; i < cleanups.length; i++){\n                    const cleanup = cleanups[i];\n                    if (typeof cleanup == \"function\") {\n                        cleanup();\n                    } else {\n                        setRef(refs[i], null);\n                    }\n                }\n            };\n        }\n    };\n}\n// src/slot.tsx\n// @__NO_SIDE_EFFECTS__\nfunction createSlot(ownerName) {\n    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);\n    const Slot2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { children, ...slotProps } = props;\n        const childrenArray = react__WEBPACK_IMPORTED_MODULE_1__.Children.toArray(children);\n        const slottable = childrenArray.find(isSlottable);\n        if (slottable) {\n            const newElement = slottable.props.children;\n            const newChildren = childrenArray.map((child)=>{\n                if (child === slottable) {\n                    if (react__WEBPACK_IMPORTED_MODULE_1__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null);\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? newElement.props.children : null;\n                } else {\n                    return child;\n                }\n            });\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SlotClone, {\n                ...slotProps,\n                ref: forwardedRef,\n                children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(newElement, void 0, newChildren) : null\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef,\n            children\n        });\n    });\n    Slot2.displayName = `${ownerName}.Slot`;\n    return Slot2;\n}\nvar Slot = /* @__PURE__ */ createSlot(\"Slot\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlotClone(ownerName) {\n    const SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { children, ...slotProps } = props;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(children)) {\n            const childrenRef = getElementRef(children);\n            const props2 = mergeProps(slotProps, children.props);\n            if (children.type !== react__WEBPACK_IMPORTED_MODULE_1__.Fragment) {\n                props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(children, props2);\n        }\n        return react__WEBPACK_IMPORTED_MODULE_1__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null) : null;\n    });\n    SlotClone.displayName = `${ownerName}.SlotClone`;\n    return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = (...args)=>{\n                    const result = childPropValue(...args);\n                    slotPropValue(...args);\n                    return result;\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nfunction getElementRef(element) {\n    let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\nconst buttonVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_3__.cva)(\"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground shadow hover:bg-primary/90 schengen-shadow\",\n            destructive: \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n            outline: \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n            // Schengen-specific variants\n            brand: \"schengen-brand-gradient text-white shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-200\",\n            cream: \"bg-cream text-gray-800 shadow hover:bg-cream/90 border border-primary/20\",\n            success: \"bg-green-500 text-white shadow hover:bg-green-600\",\n            warning: \"bg-yellow-500 text-white shadow hover:bg-yellow-600\"\n        },\n        size: {\n            default: \"h-9 px-4 py-2\",\n            sm: \"h-8 rounded-md px-3 text-xs\",\n            lg: \"h-10 rounded-md px-8\",\n            xl: \"h-12 rounded-lg px-10 text-base\",\n            icon: \"h-9 w-9\",\n            // Mobile-optimized sizes\n            mobile: \"h-11 px-6 py-3 text-base min-h-[44px]\",\n            \"mobile-sm\": \"h-10 px-4 py-2 text-sm min-h-[44px]\",\n            \"mobile-lg\": \"h-12 px-8 py-4 text-lg min-h-[44px]\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nconst Button$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, variant, size, asChild = false, loading = false, loadingText, leftIcon, rightIcon, children, disabled, ...props }, ref)=>{\n    const Comp = asChild ? Slot : \"button\";\n    const isDisabled = disabled || loading;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Comp, {\n        className: cn(buttonVariants({\n            variant,\n            size,\n            className\n        })),\n        ref: ref,\n        disabled: isDisabled,\n        ...props\n    }, loading && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"svg\", {\n        className: \"animate-spin -ml-1 mr-2 h-4 w-4\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        \"aria-hidden\": \"true\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"circle\", {\n        className: \"opacity-25\",\n        cx: \"12\",\n        cy: \"12\",\n        r: \"10\",\n        stroke: \"currentColor\",\n        strokeWidth: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"path\", {\n        className: \"opacity-75\",\n        fill: \"currentColor\",\n        d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    })), !loading && leftIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"mr-1\",\n        \"aria-hidden\": \"true\"\n    }, leftIcon), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, loading ? loadingText || 'Loading...' : children), !loading && rightIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"ml-1\",\n        \"aria-hidden\": \"true\"\n    }, rightIcon));\n});\nButton$1.displayName = \"Button\";\n/**\n * @license lucide-react v0.468.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ const toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = (...classes)=>classes.filter((className, index, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n    }).join(\" \").trim();\n/**\n * @license lucide-react v0.468.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */ var defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\nconst Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest }, ref)=>{\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"svg\", {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: mergeClasses(\"lucide\", className),\n        ...rest\n    }, [\n        ...iconNode.map(([tag, attrs])=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(tag, attrs)),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]);\n});\nconst createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Icon, {\n            ref,\n            iconNode,\n            className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),\n            ...props\n        }));\n    Component.displayName = `${iconName}`;\n    return Component;\n};\nconst ArrowRight = createLucideIcon(\"ArrowRight\", [\n    [\n        \"path\",\n        {\n            d: \"M5 12h14\",\n            key: \"1ays0h\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m12 5 7 7-7 7\",\n            key: \"xquz4c\"\n        }\n    ]\n]);\nconst Building2 = createLucideIcon(\"Building2\", [\n    [\n        \"path\",\n        {\n            d: \"M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z\",\n            key: \"1b4qmf\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2\",\n            key: \"i71pzd\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2\",\n            key: \"10jefs\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 6h4\",\n            key: \"1itunk\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 10h4\",\n            key: \"tcdvrf\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 14h4\",\n            key: \"kelpxr\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M10 18h4\",\n            key: \"1ulq68\"\n        }\n    ]\n]);\nconst Calendar$1 = createLucideIcon(\"Calendar\", [\n    [\n        \"path\",\n        {\n            d: \"M8 2v4\",\n            key: \"1cmpym\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 2v4\",\n            key: \"4m81vk\"\n        }\n    ],\n    [\n        \"rect\",\n        {\n            width: \"18\",\n            height: \"18\",\n            x: \"3\",\n            y: \"4\",\n            rx: \"2\",\n            key: \"1hopcy\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M3 10h18\",\n            key: \"8toen8\"\n        }\n    ]\n]);\nconst Check = createLucideIcon(\"Check\", [\n    [\n        \"path\",\n        {\n            d: \"M20 6 9 17l-5-5\",\n            key: \"1gmf2c\"\n        }\n    ]\n]);\nconst ChevronDown = createLucideIcon(\"ChevronDown\", [\n    [\n        \"path\",\n        {\n            d: \"m6 9 6 6 6-6\",\n            key: \"qrunsl\"\n        }\n    ]\n]);\nconst ChevronLeft = createLucideIcon(\"ChevronLeft\", [\n    [\n        \"path\",\n        {\n            d: \"m15 18-6-6 6-6\",\n            key: \"1wnfg3\"\n        }\n    ]\n]);\nconst ChevronRight = createLucideIcon(\"ChevronRight\", [\n    [\n        \"path\",\n        {\n            d: \"m9 18 6-6-6-6\",\n            key: \"mthhwq\"\n        }\n    ]\n]);\nconst CircleAlert = createLucideIcon(\"CircleAlert\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12\",\n            y1: \"8\",\n            y2: \"12\",\n            key: \"1pkeuh\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"12\",\n            x2: \"12.01\",\n            y1: \"16\",\n            y2: \"16\",\n            key: \"4dfq90\"\n        }\n    ]\n]);\nconst CircleCheckBig = createLucideIcon(\"CircleCheckBig\", [\n    [\n        \"path\",\n        {\n            d: \"M21.801 10A10 10 0 1 1 17 3.335\",\n            key: \"yps3ct\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m9 11 3 3L22 4\",\n            key: \"1pflzl\"\n        }\n    ]\n]);\nconst Clock = createLucideIcon(\"Clock\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"polyline\",\n        {\n            points: \"12 6 12 12 16 14\",\n            key: \"68esgv\"\n        }\n    ]\n]);\nconst CreditCard = createLucideIcon(\"CreditCard\", [\n    [\n        \"rect\",\n        {\n            width: \"20\",\n            height: \"14\",\n            x: \"2\",\n            y: \"5\",\n            rx: \"2\",\n            key: \"ynyp8z\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"2\",\n            x2: \"22\",\n            y1: \"10\",\n            y2: \"10\",\n            key: \"1b3vmo\"\n        }\n    ]\n]);\nconst Crown = createLucideIcon(\"Crown\", [\n    [\n        \"path\",\n        {\n            d: \"M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z\",\n            key: \"1vdc57\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M5 21h14\",\n            key: \"11awu3\"\n        }\n    ]\n]);\nconst Headphones = createLucideIcon(\"Headphones\", [\n    [\n        \"path\",\n        {\n            d: \"M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3\",\n            key: \"1xhozi\"\n        }\n    ]\n]);\nconst Info = createLucideIcon(\"Info\", [\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            key: \"1mglay\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 16v-4\",\n            key: \"1dtifu\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 8h.01\",\n            key: \"e9boi3\"\n        }\n    ]\n]);\nconst LoaderCircle = createLucideIcon(\"LoaderCircle\", [\n    [\n        \"path\",\n        {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\",\n            key: \"13zald\"\n        }\n    ]\n]);\nconst MapPin = createLucideIcon(\"MapPin\", [\n    [\n        \"path\",\n        {\n            d: \"M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0\",\n            key: \"1r0f0z\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"10\",\n            r: \"3\",\n            key: \"ilqhr7\"\n        }\n    ]\n]);\nconst PenLine = createLucideIcon(\"PenLine\", [\n    [\n        \"path\",\n        {\n            d: \"M12 20h9\",\n            key: \"t2du7b\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z\",\n            key: \"1ykcvy\"\n        }\n    ]\n]);\nconst Shield = createLucideIcon(\"Shield\", [\n    [\n        \"path\",\n        {\n            d: \"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\",\n            key: \"oel41y\"\n        }\n    ]\n]);\nconst Star = createLucideIcon(\"Star\", [\n    [\n        \"path\",\n        {\n            d: \"M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z\",\n            key: \"r04s7s\"\n        }\n    ]\n]);\nconst Trash2 = createLucideIcon(\"Trash2\", [\n    [\n        \"path\",\n        {\n            d: \"M3 6h18\",\n            key: \"d0wm0j\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\",\n            key: \"4alrt4\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\",\n            key: \"v07s0e\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"10\",\n            x2: \"10\",\n            y1: \"11\",\n            y2: \"17\",\n            key: \"1uufr5\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"14\",\n            x2: \"14\",\n            y1: \"11\",\n            y2: \"17\",\n            key: \"xtxkd\"\n        }\n    ]\n]);\nconst TriangleAlert = createLucideIcon(\"TriangleAlert\", [\n    [\n        \"path\",\n        {\n            d: \"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\",\n            key: \"wmoenq\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 9v4\",\n            key: \"juzpu7\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M12 17h.01\",\n            key: \"p32p05\"\n        }\n    ]\n]);\nconst UserPlus = createLucideIcon(\"UserPlus\", [\n    [\n        \"path\",\n        {\n            d: \"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\",\n            key: \"1yyitq\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"9\",\n            cy: \"7\",\n            r: \"4\",\n            key: \"nufk8\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"19\",\n            x2: \"19\",\n            y1: \"8\",\n            y2: \"14\",\n            key: \"1bvyxn\"\n        }\n    ],\n    [\n        \"line\",\n        {\n            x1: \"22\",\n            x2: \"16\",\n            y1: \"11\",\n            y2: \"11\",\n            key: \"1shjgl\"\n        }\n    ]\n]);\nconst User = createLucideIcon(\"User\", [\n    [\n        \"path\",\n        {\n            d: \"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\",\n            key: \"975kel\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"12\",\n            cy: \"7\",\n            r: \"4\",\n            key: \"17ys0d\"\n        }\n    ]\n]);\nconst Users = createLucideIcon(\"Users\", [\n    [\n        \"path\",\n        {\n            d: \"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\",\n            key: \"1yyitq\"\n        }\n    ],\n    [\n        \"circle\",\n        {\n            cx: \"9\",\n            cy: \"7\",\n            r: \"4\",\n            key: \"nufk8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M22 21v-2a4 4 0 0 0-3-3.87\",\n            key: \"kshegd\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"M16 3.13a4 4 0 0 1 0 7.75\",\n            key: \"1da9ce\"\n        }\n    ]\n]);\nconst X = createLucideIcon(\"X\", [\n    [\n        \"path\",\n        {\n            d: \"M18 6 6 18\",\n            key: \"1bl5f8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m6 6 12 12\",\n            key: \"d8bk6v\"\n        }\n    ]\n]);\nconst Zap = createLucideIcon(\"Zap\", [\n    [\n        \"path\",\n        {\n            d: \"M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z\",\n            key: \"1xq2db\"\n        }\n    ]\n]);\n/**\n * Time zone name format.\n */ /**\n * The function returns the time zone name for the given date in the specified\n * time zone.\n *\n * It uses the `Intl.DateTimeFormat` API and by default outputs the time zone\n * name in a long format, e.g. \"Pacific Standard Time\" or\n * \"Singapore Standard Time\".\n *\n * It is possible to specify the format as the third argument using one of the following options\n *\n * - \"short\": e.g. \"EDT\" or \"GMT+8\".\n * - \"long\": e.g. \"Eastern Daylight Time\".\n * - \"shortGeneric\": e.g. \"ET\" or \"Singapore Time\".\n * - \"longGeneric\": e.g. \"Eastern Time\" or \"Singapore Standard Time\".\n *\n * These options correspond to TR35 tokens `z..zzz`, `zzzz`, `v`, and `vvvv` respectively: https://www.unicode.org/reports/tr35/tr35-dates.html#dfst-zone\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date object to get the time zone name for\n * @param format - Optional format of the time zone name. Defaults to \"long\". Can be \"short\", \"long\", \"shortGeneric\", or \"longGeneric\".\n *\n * @returns Time zone name (e.g. \"Singapore Standard Time\")\n */ function tzName(timeZone, date, format = \"long\") {\n    return new Intl.DateTimeFormat(\"en-US\", {\n        // Enforces engine to render the time. Without the option JavaScriptCore omits it.\n        hour: \"numeric\",\n        timeZone: timeZone,\n        timeZoneName: format\n    }).format(date).split(/\\s/g) // Format.JS uses non-breaking spaces\n    .slice(2) // Skip the hour and AM/PM parts\n    .join(\" \");\n}\nconst offsetFormatCache = {};\nconst offsetCache = {};\n/**\n * The function extracts UTC offset in minutes from the given date in specified\n * time zone.\n *\n * Unlike `Date.prototype.getTimezoneOffset`, this function returns the value\n * mirrored to the sign of the offset in the time zone. For Asia/Singapore\n * (UTC+8), `tzOffset` returns 480, while `getTimezoneOffset` returns -480.\n *\n * @param timeZone - Time zone name (IANA or UTC offset)\n * @param date - Date to check the offset for\n *\n * @returns UTC offset in minutes\n */ function tzOffset(timeZone, date) {\n    try {\n        var _offsetFormatCache, _timeZone;\n        const format = (_offsetFormatCache = offsetFormatCache)[_timeZone = timeZone] || (_offsetFormatCache[_timeZone] = new Intl.DateTimeFormat(\"en-US\", {\n            timeZone,\n            timeZoneName: \"longOffset\"\n        }).format);\n        const offsetStr = format(date).split(\"GMT\")[1];\n        if (offsetStr in offsetCache) return offsetCache[offsetStr];\n        return calcOffset(offsetStr, offsetStr.split(\":\"));\n    } catch  {\n        // Fallback to manual parsing if the runtime doesn't support ±HH:MM/±HHMM/±HH\n        // See: https://github.com/nodejs/node/issues/53419\n        if (timeZone in offsetCache) return offsetCache[timeZone];\n        const captures = timeZone?.match(offsetRe);\n        if (captures) return calcOffset(timeZone, captures.slice(1));\n        return NaN;\n    }\n}\nconst offsetRe = /([+-]\\d\\d):?(\\d\\d)?/;\nfunction calcOffset(cacheStr, values) {\n    const hours = +(values[0] || 0);\n    const minutes = +(values[1] || 0);\n    // Convert seconds to minutes by dividing by 60 to keep the function return in minutes.\n    const seconds = +(values[2] || 0) / 60;\n    return offsetCache[cacheStr] = hours * 60 + minutes > 0 ? hours * 60 + minutes + seconds : hours * 60 - minutes - seconds;\n}\nclass TZDateMini extends Date {\n    static tz(tz, ...args) {\n        return args.length ? new TZDateMini(...args, tz) : new TZDateMini(Date.now(), tz);\n    }\n    //#endregion\n    //#region time zone\n    withTimeZone(timeZone) {\n        return new TZDateMini(+this, timeZone);\n    }\n    getTimezoneOffset() {\n        const offset = -tzOffset(this.timeZone, this);\n        // Remove the seconds offset\n        // use Math.floor for negative GMT timezones and Math.ceil for positive GMT timezones.\n        return offset > 0 ? Math.floor(offset) : Math.ceil(offset);\n    }\n    //#endregion\n    //#region time\n    setTime(time) {\n        Date.prototype.setTime.apply(this, arguments);\n        syncToInternal(this);\n        return +this;\n    }\n    //#endregion\n    //#region date-fns integration\n    [Symbol.for(\"constructDateFrom\")](date) {\n        return new TZDateMini(+new Date(date), this.timeZone);\n    }\n    //#region static\n    constructor(...args){\n        super();\n        if (args.length > 1 && typeof args[args.length - 1] === \"string\") {\n            this.timeZone = args.pop();\n        }\n        this.internal = new Date();\n        if (isNaN(tzOffset(this.timeZone, this))) {\n            this.setTime(NaN);\n        } else {\n            if (!args.length) {\n                this.setTime(Date.now());\n            } else if (typeof args[0] === \"number\" && (args.length === 1 || args.length === 2 && typeof args[1] !== \"number\")) {\n                this.setTime(args[0]);\n            } else if (typeof args[0] === \"string\") {\n                this.setTime(+new Date(args[0]));\n            } else if (args[0] instanceof Date) {\n                this.setTime(+args[0]);\n            } else {\n                this.setTime(+new Date(...args));\n                adjustToSystemTZ(this);\n                syncToInternal(this);\n            }\n        }\n    }\n}\n// Assign getters and setters\nconst re = /^(get|set)(?!UTC)/;\nObject.getOwnPropertyNames(Date.prototype).forEach((method)=>{\n    if (!re.test(method)) return;\n    const utcMethod = method.replace(re, \"$1UTC\");\n    // Filter out methods without UTC counterparts\n    if (!TZDateMini.prototype[utcMethod]) return;\n    if (method.startsWith(\"get\")) {\n        // Delegate to internal date's UTC method\n        TZDateMini.prototype[method] = function() {\n            return this.internal[utcMethod]();\n        };\n    } else {\n        // Assign regular setter\n        TZDateMini.prototype[method] = function() {\n            Date.prototype[utcMethod].apply(this.internal, arguments);\n            syncFromInternal(this);\n            return +this;\n        };\n        // Assign UTC setter\n        TZDateMini.prototype[utcMethod] = function() {\n            Date.prototype[utcMethod].apply(this, arguments);\n            syncToInternal(this);\n            return +this;\n        };\n    }\n});\n/**\n * Function syncs time to internal date, applying the time zone offset.\n *\n * @param {Date} date - Date to sync\n */ function syncToInternal(date) {\n    date.internal.setTime(+date);\n    date.internal.setUTCSeconds(date.internal.getUTCSeconds() - Math.round(-tzOffset(date.timeZone, date) * 60));\n}\n/**\n * Function syncs the internal date UTC values to the date. It allows to get\n * accurate timestamp value.\n *\n * @param {Date} date - The date to sync\n */ function syncFromInternal(date) {\n    // First we transpose the internal values\n    Date.prototype.setFullYear.call(date, date.internal.getUTCFullYear(), date.internal.getUTCMonth(), date.internal.getUTCDate());\n    Date.prototype.setHours.call(date, date.internal.getUTCHours(), date.internal.getUTCMinutes(), date.internal.getUTCSeconds(), date.internal.getUTCMilliseconds());\n    // Now we have to adjust the date to the system time zone\n    adjustToSystemTZ(date);\n}\n/**\n * Function adjusts the date to the system time zone. It uses the time zone\n * differences to calculate the offset and adjust the date.\n *\n * @param {Date} date - Date to adjust\n */ function adjustToSystemTZ(date) {\n    // Save the time zone offset before all the adjustments\n    const baseOffset = tzOffset(date.timeZone, date);\n    // Remove the seconds offset\n    // use Math.floor for negative GMT timezones and Math.ceil for positive GMT timezones.\n    const offset = baseOffset > 0 ? Math.floor(baseOffset) : Math.ceil(baseOffset);\n    //#region System DST adjustment\n    // The biggest problem with using the system time zone is that when we create\n    // a date from internal values stored in UTC, the system time zone might end\n    // up on the DST hour:\n    //\n    //   $ TZ=America/New_York node\n    //   > new Date(2020, 2, 8, 1).toString()\n    //   'Sun Mar 08 2020 01:00:00 GMT-0500 (Eastern Standard Time)'\n    //   > new Date(2020, 2, 8, 2).toString()\n    //   'Sun Mar 08 2020 03:00:00 GMT-0400 (Eastern Daylight Time)'\n    //   > new Date(2020, 2, 8, 3).toString()\n    //   'Sun Mar 08 2020 03:00:00 GMT-0400 (Eastern Daylight Time)'\n    //   > new Date(2020, 2, 8, 4).toString()\n    //   'Sun Mar 08 2020 04:00:00 GMT-0400 (Eastern Daylight Time)'\n    //\n    // Here we get the same hour for both 2 and 3, because the system time zone\n    // has DST beginning at 8 March 2020, 2 a.m. and jumps to 3 a.m. So we have\n    // to adjust the internal date to reflect that.\n    //\n    // However we want to adjust only if that's the DST hour the change happenes,\n    // not the hour where DST moves to.\n    // We calculate the previous hour to see if the time zone offset has changed\n    // and we have landed on the DST hour.\n    const prevHour = new Date(+date);\n    // We use UTC methods here as we don't want to land on the same hour again\n    // in case of DST.\n    prevHour.setUTCHours(prevHour.getUTCHours() - 1);\n    // Calculate if we are on the system DST hour.\n    const systemOffset = -new Date(+date).getTimezoneOffset();\n    const prevHourSystemOffset = -new Date(+prevHour).getTimezoneOffset();\n    const systemDSTChange = systemOffset - prevHourSystemOffset;\n    // Detect the DST shift. System DST change will occur both on\n    const dstShift = Date.prototype.getHours.apply(date) !== date.internal.getUTCHours();\n    // Move the internal date when we are on the system DST hour.\n    if (systemDSTChange && dstShift) date.internal.setUTCMinutes(date.internal.getUTCMinutes() + systemDSTChange);\n    //#endregion\n    //#region System diff adjustment\n    // Now we need to adjust the date, since we just applied internal values.\n    // We need to calculate the difference between the system and date time zones\n    // and apply it to the date.\n    const offsetDiff = systemOffset - offset;\n    if (offsetDiff) Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + offsetDiff);\n    //#endregion\n    //#region Seconds System diff adjustment\n    const systemDate = new Date(+date);\n    // Set the UTC seconds to 0 to isolate the timezone offset in seconds.\n    systemDate.setUTCSeconds(0);\n    // For negative systemOffset, invert the seconds.\n    const systemSecondsOffset = systemOffset > 0 ? systemDate.getSeconds() : (systemDate.getSeconds() - 60) % 60;\n    // Calculate the seconds offset based on the timezone offset.\n    const secondsOffset = Math.round(-(tzOffset(date.timeZone, date) * 60)) % 60;\n    if (secondsOffset || systemSecondsOffset) {\n        date.internal.setUTCSeconds(date.internal.getUTCSeconds() + secondsOffset);\n        Date.prototype.setUTCSeconds.call(date, Date.prototype.getUTCSeconds.call(date) + secondsOffset + systemSecondsOffset);\n    }\n    //#endregion\n    //#region Post-adjustment DST fix\n    const postBaseOffset = tzOffset(date.timeZone, date);\n    // Remove the seconds offset\n    // use Math.floor for negative GMT timezones and Math.ceil for positive GMT timezones.\n    const postOffset = postBaseOffset > 0 ? Math.floor(postBaseOffset) : Math.ceil(postBaseOffset);\n    const postSystemOffset = -new Date(+date).getTimezoneOffset();\n    const postOffsetDiff = postSystemOffset - postOffset;\n    const offsetChanged = postOffset !== offset;\n    const postDiff = postOffsetDiff - offsetDiff;\n    if (offsetChanged && postDiff) {\n        Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + postDiff);\n        // Now we need to check if got offset change during the post-adjustment.\n        // If so, we also need both dates to reflect that.\n        const newBaseOffset = tzOffset(date.timeZone, date);\n        // Remove the seconds offset\n        // use Math.floor for negative GMT timezones and Math.ceil for positive GMT timezones.\n        const newOffset = newBaseOffset > 0 ? Math.floor(newBaseOffset) : Math.ceil(newBaseOffset);\n        const offsetChange = postOffset - newOffset;\n        if (offsetChange) {\n            date.internal.setUTCMinutes(date.internal.getUTCMinutes() + offsetChange);\n            Date.prototype.setUTCMinutes.call(date, Date.prototype.getUTCMinutes.call(date) + offsetChange);\n        }\n    }\n//#endregion\n}\nclass TZDate extends TZDateMini {\n    //#region static\n    static tz(tz, ...args) {\n        return args.length ? new TZDate(...args, tz) : new TZDate(Date.now(), tz);\n    }\n    //#endregion\n    //#region representation\n    toISOString() {\n        const [sign, hours, minutes] = this.tzComponents();\n        const tz = `${sign}${hours}:${minutes}`;\n        return this.internal.toISOString().slice(0, -1) + tz;\n    }\n    toString() {\n        // \"Tue Aug 13 2024 07:50:19 GMT+0800 (Singapore Standard Time)\";\n        return `${this.toDateString()} ${this.toTimeString()}`;\n    }\n    toDateString() {\n        // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n        const [day, date, month, year] = this.internal.toUTCString().split(\" \");\n        // \"Tue Aug 13 2024\"\n        return `${day?.slice(0, -1)} ${month} ${date} ${year}`;\n    }\n    toTimeString() {\n        // toUTCString returns RFC 7231 (\"Mon, 12 Aug 2024 23:36:08 GMT\")\n        const time = this.internal.toUTCString().split(\" \")[4];\n        const [sign, hours, minutes] = this.tzComponents();\n        // \"07:42:23 GMT+0800 (Singapore Standard Time)\"\n        return `${time} GMT${sign}${hours}${minutes} (${tzName(this.timeZone, this)})`;\n    }\n    toLocaleString(locales, options) {\n        return Date.prototype.toLocaleString.call(this, locales, {\n            ...options,\n            timeZone: options?.timeZone || this.timeZone\n        });\n    }\n    toLocaleDateString(locales, options) {\n        return Date.prototype.toLocaleDateString.call(this, locales, {\n            ...options,\n            timeZone: options?.timeZone || this.timeZone\n        });\n    }\n    toLocaleTimeString(locales, options) {\n        return Date.prototype.toLocaleTimeString.call(this, locales, {\n            ...options,\n            timeZone: options?.timeZone || this.timeZone\n        });\n    }\n    //#endregion\n    //#region private\n    tzComponents() {\n        const offset = this.getTimezoneOffset();\n        const sign = offset > 0 ? \"-\" : \"+\";\n        const hours = String(Math.floor(Math.abs(offset) / 60)).padStart(2, \"0\");\n        const minutes = String(Math.abs(offset) % 60).padStart(2, \"0\");\n        return [\n            sign,\n            hours,\n            minutes\n        ];\n    }\n    //#endregion\n    withTimeZone(timeZone) {\n        return new TZDate(+this, timeZone);\n    }\n    //#region date-fns integration\n    [Symbol.for(\"constructDateFrom\")](date) {\n        return new TZDate(+new Date(date), this.timeZone);\n    }\n}\nconst formatDistanceLocale = {\n    lessThanXSeconds: {\n        one: \"less than a second\",\n        other: \"less than {{count}} seconds\"\n    },\n    xSeconds: {\n        one: \"1 second\",\n        other: \"{{count}} seconds\"\n    },\n    halfAMinute: \"half a minute\",\n    lessThanXMinutes: {\n        one: \"less than a minute\",\n        other: \"less than {{count}} minutes\"\n    },\n    xMinutes: {\n        one: \"1 minute\",\n        other: \"{{count}} minutes\"\n    },\n    aboutXHours: {\n        one: \"about 1 hour\",\n        other: \"about {{count}} hours\"\n    },\n    xHours: {\n        one: \"1 hour\",\n        other: \"{{count}} hours\"\n    },\n    xDays: {\n        one: \"1 day\",\n        other: \"{{count}} days\"\n    },\n    aboutXWeeks: {\n        one: \"about 1 week\",\n        other: \"about {{count}} weeks\"\n    },\n    xWeeks: {\n        one: \"1 week\",\n        other: \"{{count}} weeks\"\n    },\n    aboutXMonths: {\n        one: \"about 1 month\",\n        other: \"about {{count}} months\"\n    },\n    xMonths: {\n        one: \"1 month\",\n        other: \"{{count}} months\"\n    },\n    aboutXYears: {\n        one: \"about 1 year\",\n        other: \"about {{count}} years\"\n    },\n    xYears: {\n        one: \"1 year\",\n        other: \"{{count}} years\"\n    },\n    overXYears: {\n        one: \"over 1 year\",\n        other: \"over {{count}} years\"\n    },\n    almostXYears: {\n        one: \"almost 1 year\",\n        other: \"almost {{count}} years\"\n    }\n};\nconst formatDistance = (token, count, options)=>{\n    let result;\n    const tokenValue = formatDistanceLocale[token];\n    if (typeof tokenValue === \"string\") {\n        result = tokenValue;\n    } else if (count === 1) {\n        result = tokenValue.one;\n    } else {\n        result = tokenValue.other.replace(\"{{count}}\", count.toString());\n    }\n    if (options?.addSuffix) {\n        if (options.comparison && options.comparison > 0) {\n            return \"in \" + result;\n        } else {\n            return result + \" ago\";\n        }\n    }\n    return result;\n};\nfunction buildFormatLongFn(args) {\n    return (options = {})=>{\n        // TODO: Remove String()\n        const width = options.width ? String(options.width) : args.defaultWidth;\n        const format = args.formats[width] || args.formats[args.defaultWidth];\n        return format;\n    };\n}\nconst dateFormats = {\n    full: \"EEEE, MMMM do, y\",\n    long: \"MMMM do, y\",\n    medium: \"MMM d, y\",\n    short: \"MM/dd/yyyy\"\n};\nconst timeFormats = {\n    full: \"h:mm:ss a zzzz\",\n    long: \"h:mm:ss a z\",\n    medium: \"h:mm:ss a\",\n    short: \"h:mm a\"\n};\nconst dateTimeFormats = {\n    full: \"{{date}} 'at' {{time}}\",\n    long: \"{{date}} 'at' {{time}}\",\n    medium: \"{{date}}, {{time}}\",\n    short: \"{{date}}, {{time}}\"\n};\nconst formatLong = {\n    date: buildFormatLongFn({\n        formats: dateFormats,\n        defaultWidth: \"full\"\n    }),\n    time: buildFormatLongFn({\n        formats: timeFormats,\n        defaultWidth: \"full\"\n    }),\n    dateTime: buildFormatLongFn({\n        formats: dateTimeFormats,\n        defaultWidth: \"full\"\n    })\n};\nconst formatRelativeLocale = {\n    lastWeek: \"'last' eeee 'at' p\",\n    yesterday: \"'yesterday at' p\",\n    today: \"'today at' p\",\n    tomorrow: \"'tomorrow at' p\",\n    nextWeek: \"eeee 'at' p\",\n    other: \"P\"\n};\nconst formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */ /**\n * The map of localized values for each width.\n */ /**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */ /**\n * Converts the unit value to the tuple of values.\n */ /**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */ /**\n * The tuple of localized quarter values. The first element represents Q1.\n */ /**\n * The tuple of localized day values. The first element represents Sunday.\n */ /**\n * The tuple of localized month values. The first element represents January.\n */ function buildLocalizeFn(args) {\n    return (value, options)=>{\n        const context = options?.context ? String(options.context) : \"standalone\";\n        let valuesArray;\n        if (context === \"formatting\" && args.formattingValues) {\n            const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n            const width = options?.width ? String(options.width) : defaultWidth;\n            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n        } else {\n            const defaultWidth = args.defaultWidth;\n            const width = options?.width ? String(options.width) : args.defaultWidth;\n            valuesArray = args.values[width] || args.values[defaultWidth];\n        }\n        const index = args.argumentCallback ? args.argumentCallback(value) : value;\n        // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n        return valuesArray[index];\n    };\n}\nconst eraValues = {\n    narrow: [\n        \"B\",\n        \"A\"\n    ],\n    abbreviated: [\n        \"BC\",\n        \"AD\"\n    ],\n    wide: [\n        \"Before Christ\",\n        \"Anno Domini\"\n    ]\n};\nconst quarterValues = {\n    narrow: [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\n    ],\n    abbreviated: [\n        \"Q1\",\n        \"Q2\",\n        \"Q3\",\n        \"Q4\"\n    ],\n    wide: [\n        \"1st quarter\",\n        \"2nd quarter\",\n        \"3rd quarter\",\n        \"4th quarter\"\n    ]\n};\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n    narrow: [\n        \"J\",\n        \"F\",\n        \"M\",\n        \"A\",\n        \"M\",\n        \"J\",\n        \"J\",\n        \"A\",\n        \"S\",\n        \"O\",\n        \"N\",\n        \"D\"\n    ],\n    abbreviated: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ],\n    wide: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\"\n    ]\n};\nconst dayValues = {\n    narrow: [\n        \"S\",\n        \"M\",\n        \"T\",\n        \"W\",\n        \"T\",\n        \"F\",\n        \"S\"\n    ],\n    short: [\n        \"Su\",\n        \"Mo\",\n        \"Tu\",\n        \"We\",\n        \"Th\",\n        \"Fr\",\n        \"Sa\"\n    ],\n    abbreviated: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    wide: [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ]\n};\nconst dayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"morning\",\n        afternoon: \"afternoon\",\n        evening: \"evening\",\n        night: \"night\"\n    }\n};\nconst formattingDayPeriodValues = {\n    narrow: {\n        am: \"a\",\n        pm: \"p\",\n        midnight: \"mi\",\n        noon: \"n\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    abbreviated: {\n        am: \"AM\",\n        pm: \"PM\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    },\n    wide: {\n        am: \"a.m.\",\n        pm: \"p.m.\",\n        midnight: \"midnight\",\n        noon: \"noon\",\n        morning: \"in the morning\",\n        afternoon: \"in the afternoon\",\n        evening: \"in the evening\",\n        night: \"at night\"\n    }\n};\nconst ordinalNumber = (dirtyNumber, _options)=>{\n    const number = Number(dirtyNumber);\n    // If ordinal numbers depend on context, for example,\n    // if they are different for different grammatical genders,\n    // use `options.unit`.\n    //\n    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n    // 'day', 'hour', 'minute', 'second'.\n    const rem100 = number % 100;\n    if (rem100 > 20 || rem100 < 10) {\n        switch(rem100 % 10){\n            case 1:\n                return number + \"st\";\n            case 2:\n                return number + \"nd\";\n            case 3:\n                return number + \"rd\";\n        }\n    }\n    return number + \"th\";\n};\nconst localize = {\n    ordinalNumber,\n    era: buildLocalizeFn({\n        values: eraValues,\n        defaultWidth: \"wide\"\n    }),\n    quarter: buildLocalizeFn({\n        values: quarterValues,\n        defaultWidth: \"wide\",\n        argumentCallback: (quarter)=>quarter - 1\n    }),\n    month: buildLocalizeFn({\n        values: monthValues,\n        defaultWidth: \"wide\"\n    }),\n    day: buildLocalizeFn({\n        values: dayValues,\n        defaultWidth: \"wide\"\n    }),\n    dayPeriod: buildLocalizeFn({\n        values: dayPeriodValues,\n        defaultWidth: \"wide\",\n        formattingValues: formattingDayPeriodValues,\n        defaultFormattingWidth: \"wide\"\n    })\n};\nfunction buildMatchFn(args) {\n    return (string, options = {})=>{\n        const width = options.width;\n        const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n        const matchResult = string.match(matchPattern);\n        if (!matchResult) {\n            return null;\n        }\n        const matchedString = matchResult[0];\n        const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n        const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern)=>pattern.test(matchedString)) : findKey(parsePatterns, (pattern)=>pattern.test(matchedString));\n        let value;\n        value = args.valueCallback ? args.valueCallback(key) : key;\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value,\n            rest\n        };\n    };\n}\nfunction findKey(object, predicate) {\n    for(const key in object){\n        if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n            return key;\n        }\n    }\n    return undefined;\n}\nfunction findIndex(array, predicate) {\n    for(let key = 0; key < array.length; key++){\n        if (predicate(array[key])) {\n            return key;\n        }\n    }\n    return undefined;\n}\nfunction buildMatchPatternFn(args) {\n    return (string, options = {})=>{\n        const matchResult = string.match(args.matchPattern);\n        if (!matchResult) return null;\n        const matchedString = matchResult[0];\n        const parseResult = string.match(args.parsePattern);\n        if (!parseResult) return null;\n        let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n        // [TODO] I challenge you to fix the type\n        value = options.valueCallback ? options.valueCallback(value) : value;\n        const rest = string.slice(matchedString.length);\n        return {\n            value,\n            rest\n        };\n    };\n}\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\nconst matchEraPatterns = {\n    narrow: /^(b|a)/i,\n    abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n    wide: /^(before christ|before common era|anno domini|common era)/i\n};\nconst parseEraPatterns = {\n    any: [\n        /^b/i,\n        /^(a|c)/i\n    ]\n};\nconst matchQuarterPatterns = {\n    narrow: /^[1234]/i,\n    abbreviated: /^q[1234]/i,\n    wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nconst parseQuarterPatterns = {\n    any: [\n        /1/i,\n        /2/i,\n        /3/i,\n        /4/i\n    ]\n};\nconst matchMonthPatterns = {\n    narrow: /^[jfmasond]/i,\n    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nconst parseMonthPatterns = {\n    narrow: [\n        /^j/i,\n        /^f/i,\n        /^m/i,\n        /^a/i,\n        /^m/i,\n        /^j/i,\n        /^j/i,\n        /^a/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ],\n    any: [\n        /^ja/i,\n        /^f/i,\n        /^mar/i,\n        /^ap/i,\n        /^may/i,\n        /^jun/i,\n        /^jul/i,\n        /^au/i,\n        /^s/i,\n        /^o/i,\n        /^n/i,\n        /^d/i\n    ]\n};\nconst matchDayPatterns = {\n    narrow: /^[smtwf]/i,\n    short: /^(su|mo|tu|we|th|fr|sa)/i,\n    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nconst parseDayPatterns = {\n    narrow: [\n        /^s/i,\n        /^m/i,\n        /^t/i,\n        /^w/i,\n        /^t/i,\n        /^f/i,\n        /^s/i\n    ],\n    any: [\n        /^su/i,\n        /^m/i,\n        /^tu/i,\n        /^w/i,\n        /^th/i,\n        /^f/i,\n        /^sa/i\n    ]\n};\nconst matchDayPeriodPatterns = {\n    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n    any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nconst parseDayPeriodPatterns = {\n    any: {\n        am: /^a/i,\n        pm: /^p/i,\n        midnight: /^mi/i,\n        noon: /^no/i,\n        morning: /morning/i,\n        afternoon: /afternoon/i,\n        evening: /evening/i,\n        night: /night/i\n    }\n};\nconst match = {\n    ordinalNumber: buildMatchPatternFn({\n        matchPattern: matchOrdinalNumberPattern,\n        parsePattern: parseOrdinalNumberPattern,\n        valueCallback: (value)=>parseInt(value, 10)\n    }),\n    era: buildMatchFn({\n        matchPatterns: matchEraPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseEraPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    quarter: buildMatchFn({\n        matchPatterns: matchQuarterPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseQuarterPatterns,\n        defaultParseWidth: \"any\",\n        valueCallback: (index)=>index + 1\n    }),\n    month: buildMatchFn({\n        matchPatterns: matchMonthPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseMonthPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    day: buildMatchFn({\n        matchPatterns: matchDayPatterns,\n        defaultMatchWidth: \"wide\",\n        parsePatterns: parseDayPatterns,\n        defaultParseWidth: \"any\"\n    }),\n    dayPeriod: buildMatchFn({\n        matchPatterns: matchDayPeriodPatterns,\n        defaultMatchWidth: \"any\",\n        parsePatterns: parseDayPeriodPatterns,\n        defaultParseWidth: \"any\"\n    })\n};\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */ const enUS = {\n    code: \"en-US\",\n    formatDistance: formatDistance,\n    formatLong: formatLong,\n    formatRelative: formatRelative,\n    localize: localize,\n    match: match,\n    options: {\n        weekStartsOn: 0 /* Sunday */ ,\n        firstWeekContainsDate: 1\n    }\n};\nconst FIVE_WEEKS = 5;\nconst FOUR_WEEKS = 4;\n/**\n * Returns the number of weeks to display in the broadcast calendar for a given\n * month.\n *\n * The broadcast calendar may have either 4 or 5 weeks in a month, depending on\n * the start and end dates of the broadcast weeks.\n *\n * @since 9.4.0\n * @param month The month for which to calculate the number of weeks.\n * @param dateLib The date library to use for date manipulation.\n * @returns The number of weeks in the broadcast calendar (4 or 5).\n */ function getBroadcastWeeksInMonth(month, dateLib) {\n    // Get the first day of the month\n    const firstDayOfMonth = dateLib.startOfMonth(month);\n    // Get the day of the week for the first day of the month (1-7, where 1 is Monday)\n    const firstDayOfWeek = firstDayOfMonth.getDay() > 0 ? firstDayOfMonth.getDay() : 7;\n    const broadcastStartDate = dateLib.addDays(month, -firstDayOfWeek + 1);\n    const lastDateOfLastWeek = dateLib.addDays(broadcastStartDate, FIVE_WEEKS * 7 - 1);\n    const numberOfWeeks = dateLib.getMonth(month) === dateLib.getMonth(lastDateOfLastWeek) ? FIVE_WEEKS : FOUR_WEEKS;\n    return numberOfWeeks;\n}\n/**\n * Returns the start date of the week in the broadcast calendar.\n *\n * The broadcast week starts on Monday. If the first day of the month is not a\n * Monday, this function calculates the previous Monday as the start of the\n * broadcast week.\n *\n * @since 9.4.0\n * @param date The date for which to calculate the start of the broadcast week.\n * @param dateLib The date library to use for date manipulation.\n * @returns The start date of the broadcast week.\n */ function startOfBroadcastWeek(date, dateLib) {\n    const firstOfMonth = dateLib.startOfMonth(date);\n    const dayOfWeek = firstOfMonth.getDay();\n    if (dayOfWeek === 1) {\n        return firstOfMonth;\n    } else if (dayOfWeek === 0) {\n        return dateLib.addDays(firstOfMonth, -1 * 6);\n    } else {\n        return dateLib.addDays(firstOfMonth, -1 * (dayOfWeek - 1));\n    }\n}\n/**\n * Returns the end date of the week in the broadcast calendar.\n *\n * The broadcast week ends on the last day of the last broadcast week for the\n * given date.\n *\n * @since 9.4.0\n * @param date The date for which to calculate the end of the broadcast week.\n * @param dateLib The date library to use for date manipulation.\n * @returns The end date of the broadcast week.\n */ function endOfBroadcastWeek(date, dateLib) {\n    const startDate = startOfBroadcastWeek(date, dateLib);\n    const numberOfWeeks = getBroadcastWeeksInMonth(date, dateLib);\n    const endDate = dateLib.addDays(startDate, numberOfWeeks * 7 - 1);\n    return endDate;\n}\n/**\n * A wrapper class around [date-fns](http://date-fns.org) that provides utility\n * methods for date manipulation and formatting.\n *\n * @since 9.2.0\n * @example\n *   const dateLib = new DateLib({ locale: es });\n *   const newDate = dateLib.addDays(new Date(), 5);\n */ class DateLib {\n    /**\n     * Generates a mapping of Arabic digits (0-9) to the target numbering system\n     * digits.\n     *\n     * @since 9.5.0\n     * @returns A record mapping Arabic digits to the target numerals.\n     */ getDigitMap() {\n        const { numerals = \"latn\" } = this.options;\n        // Use Intl.NumberFormat to create a formatter with the specified numbering system\n        const formatter = new Intl.NumberFormat(\"en-US\", {\n            numberingSystem: numerals\n        });\n        // Map Arabic digits (0-9) to the target numerals\n        const digitMap = {};\n        for(let i = 0; i < 10; i++){\n            digitMap[i.toString()] = formatter.format(i);\n        }\n        return digitMap;\n    }\n    /**\n     * Replaces Arabic digits in a string with the target numbering system digits.\n     *\n     * @since 9.5.0\n     * @param input The string containing Arabic digits.\n     * @returns The string with digits replaced.\n     */ replaceDigits(input) {\n        const digitMap = this.getDigitMap();\n        return input.replace(/\\d/g, (digit)=>digitMap[digit] || digit);\n    }\n    /**\n     * Formats a number using the configured numbering system.\n     *\n     * @since 9.5.0\n     * @param value The number to format.\n     * @returns The formatted number as a string.\n     */ formatNumber(value) {\n        return this.replaceDigits(value.toString());\n    }\n    /**\n     * Creates an instance of `DateLib`.\n     *\n     * @param options Configuration options for the date library.\n     * @param overrides Custom overrides for the date library functions.\n     */ constructor(options, overrides){\n        /**\n         * Reference to the built-in Date constructor.\n         *\n         * @deprecated Use `newDate()` or `today()`.\n         */ this.Date = Date;\n        /**\n         * Creates a new `Date` object representing today's date.\n         *\n         * @since 9.5.0\n         * @returns A `Date` object for today's date.\n         */ this.today = ()=>{\n            if (this.overrides?.today) {\n                return this.overrides.today();\n            }\n            if (this.options.timeZone) {\n                return TZDate.tz(this.options.timeZone);\n            }\n            return new this.Date();\n        };\n        /**\n         * Creates a new `Date` object with the specified year, month, and day.\n         *\n         * @since 9.5.0\n         * @param year The year.\n         * @param monthIndex The month (0-11).\n         * @param date The day of the month.\n         * @returns A new `Date` object.\n         */ this.newDate = (year, monthIndex, date)=>{\n            if (this.overrides?.newDate) {\n                return this.overrides.newDate(year, monthIndex, date);\n            }\n            if (this.options.timeZone) {\n                return new TZDate(year, monthIndex, date, this.options.timeZone);\n            }\n            return new Date(year, monthIndex, date);\n        };\n        /**\n         * Adds the specified number of days to the given date.\n         *\n         * @param date The date to add days to.\n         * @param amount The number of days to add.\n         * @returns The new date with the days added.\n         */ this.addDays = (date, amount)=>{\n            return this.overrides?.addDays ? this.overrides.addDays(date, amount) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_7__.addDays)(date, amount);\n        };\n        /**\n         * Adds the specified number of months to the given date.\n         *\n         * @param date The date to add months to.\n         * @param amount The number of months to add.\n         * @returns The new date with the months added.\n         */ this.addMonths = (date, amount)=>{\n            return this.overrides?.addMonths ? this.overrides.addMonths(date, amount) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_8__.addMonths)(date, amount);\n        };\n        /**\n         * Adds the specified number of weeks to the given date.\n         *\n         * @param date The date to add weeks to.\n         * @param amount The number of weeks to add.\n         * @returns The new date with the weeks added.\n         */ this.addWeeks = (date, amount)=>{\n            return this.overrides?.addWeeks ? this.overrides.addWeeks(date, amount) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_9__.addWeeks)(date, amount);\n        };\n        /**\n         * Adds the specified number of years to the given date.\n         *\n         * @param date The date to add years to.\n         * @param amount The number of years to add.\n         * @returns The new date with the years added.\n         */ this.addYears = (date, amount)=>{\n            return this.overrides?.addYears ? this.overrides.addYears(date, amount) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_10__.addYears)(date, amount);\n        };\n        /**\n         * Returns the number of calendar days between the given dates.\n         *\n         * @param dateLeft The later date.\n         * @param dateRight The earlier date.\n         * @returns The number of calendar days between the dates.\n         */ this.differenceInCalendarDays = (dateLeft, dateRight)=>{\n            return this.overrides?.differenceInCalendarDays ? this.overrides.differenceInCalendarDays(dateLeft, dateRight) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_11__.differenceInCalendarDays)(dateLeft, dateRight);\n        };\n        /**\n         * Returns the number of calendar months between the given dates.\n         *\n         * @param dateLeft The later date.\n         * @param dateRight The earlier date.\n         * @returns The number of calendar months between the dates.\n         */ this.differenceInCalendarMonths = (dateLeft, dateRight)=>{\n            return this.overrides?.differenceInCalendarMonths ? this.overrides.differenceInCalendarMonths(dateLeft, dateRight) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_12__.differenceInCalendarMonths)(dateLeft, dateRight);\n        };\n        /**\n         * Returns the months between the given dates.\n         *\n         * @param interval The interval to get the months for.\n         */ this.eachMonthOfInterval = (interval)=>{\n            return this.overrides?.eachMonthOfInterval ? this.overrides.eachMonthOfInterval(interval) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_13__.eachMonthOfInterval)(interval);\n        };\n        /**\n         * Returns the end of the broadcast week for the given date.\n         *\n         * @param date The original date.\n         * @returns The end of the broadcast week.\n         */ this.endOfBroadcastWeek = (date)=>{\n            return this.overrides?.endOfBroadcastWeek ? this.overrides.endOfBroadcastWeek(date) : endOfBroadcastWeek(date, this);\n        };\n        /**\n         * Returns the end of the ISO week for the given date.\n         *\n         * @param date The original date.\n         * @returns The end of the ISO week.\n         */ this.endOfISOWeek = (date)=>{\n            return this.overrides?.endOfISOWeek ? this.overrides.endOfISOWeek(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_14__.endOfISOWeek)(date);\n        };\n        /**\n         * Returns the end of the month for the given date.\n         *\n         * @param date The original date.\n         * @returns The end of the month.\n         */ this.endOfMonth = (date)=>{\n            return this.overrides?.endOfMonth ? this.overrides.endOfMonth(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_15__.endOfMonth)(date);\n        };\n        /**\n         * Returns the end of the week for the given date.\n         *\n         * @param date The original date.\n         * @returns The end of the week.\n         */ this.endOfWeek = (date, options)=>{\n            return this.overrides?.endOfWeek ? this.overrides.endOfWeek(date, options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_16__.endOfWeek)(date, this.options);\n        };\n        /**\n         * Returns the end of the year for the given date.\n         *\n         * @param date The original date.\n         * @returns The end of the year.\n         */ this.endOfYear = (date)=>{\n            return this.overrides?.endOfYear ? this.overrides.endOfYear(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_17__.endOfYear)(date);\n        };\n        /**\n         * Formats the given date using the specified format string.\n         *\n         * @param date The date to format.\n         * @param formatStr The format string.\n         * @returns The formatted date string.\n         */ this.format = (date, formatStr, _options)=>{\n            const formatted = this.overrides?.format ? this.overrides.format(date, formatStr, this.options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(date, formatStr, this.options);\n            if (this.options.numerals && this.options.numerals !== \"latn\") {\n                return this.replaceDigits(formatted);\n            }\n            return formatted;\n        };\n        /**\n         * Returns the ISO week number for the given date.\n         *\n         * @param date The date to get the ISO week number for.\n         * @returns The ISO week number.\n         */ this.getISOWeek = (date)=>{\n            return this.overrides?.getISOWeek ? this.overrides.getISOWeek(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_19__.getISOWeek)(date);\n        };\n        /**\n         * Returns the month of the given date.\n         *\n         * @param date The date to get the month for.\n         * @returns The month.\n         */ this.getMonth = (date, _options)=>{\n            return this.overrides?.getMonth ? this.overrides.getMonth(date, this.options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_20__.getMonth)(date, this.options);\n        };\n        /**\n         * Returns the year of the given date.\n         *\n         * @param date The date to get the year for.\n         * @returns The year.\n         */ this.getYear = (date, _options)=>{\n            return this.overrides?.getYear ? this.overrides.getYear(date, this.options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_21__.getYear)(date, this.options);\n        };\n        /**\n         * Returns the local week number for the given date.\n         *\n         * @param date The date to get the week number for.\n         * @returns The week number.\n         */ this.getWeek = (date, _options)=>{\n            return this.overrides?.getWeek ? this.overrides.getWeek(date, this.options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_22__.getWeek)(date, this.options);\n        };\n        /**\n         * Checks if the first date is after the second date.\n         *\n         * @param date The date to compare.\n         * @param dateToCompare The date to compare with.\n         * @returns True if the first date is after the second date.\n         */ this.isAfter = (date, dateToCompare)=>{\n            return this.overrides?.isAfter ? this.overrides.isAfter(date, dateToCompare) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_23__.isAfter)(date, dateToCompare);\n        };\n        /**\n         * Checks if the first date is before the second date.\n         *\n         * @param date The date to compare.\n         * @param dateToCompare The date to compare with.\n         * @returns True if the first date is before the second date.\n         */ this.isBefore = (date, dateToCompare)=>{\n            return this.overrides?.isBefore ? this.overrides.isBefore(date, dateToCompare) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_24__.isBefore)(date, dateToCompare);\n        };\n        /**\n         * Checks if the given value is a Date object.\n         *\n         * @param value The value to check.\n         * @returns True if the value is a Date object.\n         */ this.isDate = (value)=>{\n            return this.overrides?.isDate ? this.overrides.isDate(value) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_25__.isDate)(value);\n        };\n        /**\n         * Checks if the given dates are on the same day.\n         *\n         * @param dateLeft The first date to compare.\n         * @param dateRight The second date to compare.\n         * @returns True if the dates are on the same day.\n         */ this.isSameDay = (dateLeft, dateRight)=>{\n            return this.overrides?.isSameDay ? this.overrides.isSameDay(dateLeft, dateRight) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(dateLeft, dateRight);\n        };\n        /**\n         * Checks if the given dates are in the same month.\n         *\n         * @param dateLeft The first date to compare.\n         * @param dateRight The second date to compare.\n         * @returns True if the dates are in the same month.\n         */ this.isSameMonth = (dateLeft, dateRight)=>{\n            return this.overrides?.isSameMonth ? this.overrides.isSameMonth(dateLeft, dateRight) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_27__.isSameMonth)(dateLeft, dateRight);\n        };\n        /**\n         * Checks if the given dates are in the same year.\n         *\n         * @param dateLeft The first date to compare.\n         * @param dateRight The second date to compare.\n         * @returns True if the dates are in the same year.\n         */ this.isSameYear = (dateLeft, dateRight)=>{\n            return this.overrides?.isSameYear ? this.overrides.isSameYear(dateLeft, dateRight) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_28__.isSameYear)(dateLeft, dateRight);\n        };\n        /**\n         * Returns the latest date in the given array of dates.\n         *\n         * @param dates The array of dates to compare.\n         * @returns The latest date.\n         */ this.max = (dates)=>{\n            return this.overrides?.max ? this.overrides.max(dates) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_29__.max)(dates);\n        };\n        /**\n         * Returns the earliest date in the given array of dates.\n         *\n         * @param dates The array of dates to compare.\n         * @returns The earliest date.\n         */ this.min = (dates)=>{\n            return this.overrides?.min ? this.overrides.min(dates) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_30__.min)(dates);\n        };\n        /**\n         * Sets the month of the given date.\n         *\n         * @param date The date to set the month on.\n         * @param month The month to set (0-11).\n         * @returns The new date with the month set.\n         */ this.setMonth = (date, month)=>{\n            return this.overrides?.setMonth ? this.overrides.setMonth(date, month) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_31__.setMonth)(date, month);\n        };\n        /**\n         * Sets the year of the given date.\n         *\n         * @param date The date to set the year on.\n         * @param year The year to set.\n         * @returns The new date with the year set.\n         */ this.setYear = (date, year)=>{\n            return this.overrides?.setYear ? this.overrides.setYear(date, year) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_32__.setYear)(date, year);\n        };\n        /**\n         * Returns the start of the broadcast week for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the broadcast week.\n         */ this.startOfBroadcastWeek = (date, _dateLib)=>{\n            return this.overrides?.startOfBroadcastWeek ? this.overrides.startOfBroadcastWeek(date, this) : startOfBroadcastWeek(date, this);\n        };\n        /**\n         * Returns the start of the day for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the day.\n         */ this.startOfDay = (date)=>{\n            return this.overrides?.startOfDay ? this.overrides.startOfDay(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_33__.startOfDay)(date);\n        };\n        /**\n         * Returns the start of the ISO week for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the ISO week.\n         */ this.startOfISOWeek = (date)=>{\n            return this.overrides?.startOfISOWeek ? this.overrides.startOfISOWeek(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_34__.startOfISOWeek)(date);\n        };\n        /**\n         * Returns the start of the month for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the month.\n         */ this.startOfMonth = (date)=>{\n            return this.overrides?.startOfMonth ? this.overrides.startOfMonth(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_35__.startOfMonth)(date);\n        };\n        /**\n         * Returns the start of the week for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the week.\n         */ this.startOfWeek = (date, _options)=>{\n            return this.overrides?.startOfWeek ? this.overrides.startOfWeek(date, this.options) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_36__.startOfWeek)(date, this.options);\n        };\n        /**\n         * Returns the start of the year for the given date.\n         *\n         * @param date The original date.\n         * @returns The start of the year.\n         */ this.startOfYear = (date)=>{\n            return this.overrides?.startOfYear ? this.overrides.startOfYear(date) : (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_37__.startOfYear)(date);\n        };\n        this.options = {\n            locale: enUS,\n            ...options\n        };\n        this.overrides = overrides;\n    }\n}\n/**\n * The default date library with English locale.\n *\n * @since 9.2.0\n */ const defaultDateLib = new DateLib();\n/**\n * Represents a day displayed in the calendar.\n *\n * In DayPicker, a `CalendarDay` is a wrapper around a `Date` object that\n * provides additional information about the day, such as whether it belongs to\n * the displayed month.\n */ class CalendarDay {\n    /**\n     * Checks if this day is equal to another `CalendarDay`, considering both the\n     * date and the displayed month.\n     *\n     * @param day The `CalendarDay` to compare with.\n     * @returns `true` if the days are equal, otherwise `false`.\n     */ isEqualTo(day) {\n        return this.dateLib.isSameDay(day.date, this.date) && this.dateLib.isSameMonth(day.displayMonth, this.displayMonth);\n    }\n    constructor(date, displayMonth, dateLib = defaultDateLib){\n        this.date = date;\n        this.displayMonth = displayMonth;\n        this.outside = Boolean(displayMonth && !dateLib.isSameMonth(date, displayMonth));\n        this.dateLib = dateLib;\n    }\n}\n/**\n * Represents a month in a calendar year.\n *\n * A `CalendarMonth` contains the weeks within the month and the date of the\n * month.\n */ class CalendarMonth {\n    constructor(month, weeks){\n        this.date = month;\n        this.weeks = weeks;\n    }\n}\n/**\n * Represents a week in a calendar month.\n *\n * A `CalendarWeek` contains the days within the week and the week number.\n */ class CalendarWeek {\n    constructor(weekNumber, days){\n        this.days = days;\n        this.weekNumber = weekNumber;\n    }\n}\n/**\n * Render the button elements in the calendar.\n *\n * @private\n * @deprecated Use `PreviousMonthButton` or `@link NextMonthButton` instead.\n */ function Button(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n        ...props\n    });\n}\n/**\n * Render the label in the month caption.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function CaptionLabel(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        ...props\n    });\n}\n/**\n * Render the chevron icon used in the navigation buttons and dropdowns.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Chevron(props) {\n    const { size = 24, orientation = \"left\", className } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        className: className,\n        width: size,\n        height: size,\n        viewBox: \"0 0 24 24\"\n    }, orientation === \"up\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"polygon\", {\n        points: \"6.77 17 12.5 11.43 18.24 17 20 15.28 12.5 8 5 15.28\"\n    }), orientation === \"down\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"polygon\", {\n        points: \"6.77 8 12.5 13.57 18.24 8 20 9.72 12.5 17 5 9.72\"\n    }), orientation === \"left\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"polygon\", {\n        points: \"16 18.112 9.81111111 12 16 5.87733333 14.0888889 4 6 12 14.0888889 20\"\n    }), orientation === \"right\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"polygon\", {\n        points: \"8 18.112 14.18888889 12 8 5.87733333 9.91111111 4 18 12 9.91111111 20\"\n    }));\n}\n/**\n * Render a grid cell for a specific day in the calendar.\n *\n * Handles interaction and focus for the day. If you only need to change the\n * content of the day cell, consider swapping the `DayButton` component\n * instead.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Day(props) {\n    const { day, modifiers, ...tdProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        ...tdProps\n    });\n}\n/**\n * Render a button for a specific day in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function DayButton(props) {\n    const { day, modifiers, ...buttonProps } = props;\n    const ref = react__WEBPACK_IMPORTED_MODULE_1___default().useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect({\n        \"DayButton.useEffect\": ()=>{\n            if (modifiers.focused) ref.current?.focus();\n        }\n    }[\"DayButton.useEffect\"], [\n        modifiers.focused\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n        ref: ref,\n        ...buttonProps\n    });\n}\n/**\n * Enum representing the UI elements composing DayPicker. These elements are\n * mapped to {@link CustomComponents}, {@link ClassNames}, and {@link Styles}.\n *\n * Some elements are extended by flags and modifiers.\n */ var UI;\n(function(UI) {\n    /** The root component displaying the months and the navigation bar. */ UI[\"Root\"] = \"root\";\n    /** The Chevron SVG element used by navigation buttons and dropdowns. */ UI[\"Chevron\"] = \"chevron\";\n    /**\n     * The grid cell with the day's date. Extended by {@link DayFlag} and\n     * {@link SelectionState}.\n     */ UI[\"Day\"] = \"day\";\n    /** The button containing the formatted day's date, inside the grid cell. */ UI[\"DayButton\"] = \"day_button\";\n    /** The caption label of the month (when not showing the dropdown navigation). */ UI[\"CaptionLabel\"] = \"caption_label\";\n    /** The container of the dropdown navigation (when enabled). */ UI[\"Dropdowns\"] = \"dropdowns\";\n    /** The dropdown element to select for years and months. */ UI[\"Dropdown\"] = \"dropdown\";\n    /** The container element of the dropdown. */ UI[\"DropdownRoot\"] = \"dropdown_root\";\n    /** The root element of the footer. */ UI[\"Footer\"] = \"footer\";\n    /** The month grid. */ UI[\"MonthGrid\"] = \"month_grid\";\n    /** Contains the dropdown navigation or the caption label. */ UI[\"MonthCaption\"] = \"month_caption\";\n    /** The dropdown with the months. */ UI[\"MonthsDropdown\"] = \"months_dropdown\";\n    /** Wrapper of the month grid. */ UI[\"Month\"] = \"month\";\n    /** The container of the displayed months. */ UI[\"Months\"] = \"months\";\n    /** The navigation bar with the previous and next buttons. */ UI[\"Nav\"] = \"nav\";\n    /**\n     * The next month button in the navigation. *\n     *\n     * @since 9.1.0\n     */ UI[\"NextMonthButton\"] = \"button_next\";\n    /**\n     * The previous month button in the navigation.\n     *\n     * @since 9.1.0\n     */ UI[\"PreviousMonthButton\"] = \"button_previous\";\n    /** The row containing the week. */ UI[\"Week\"] = \"week\";\n    /** The group of row weeks in a month (`tbody`). */ UI[\"Weeks\"] = \"weeks\";\n    /** The column header with the weekday. */ UI[\"Weekday\"] = \"weekday\";\n    /** The row grouping the weekdays in the column headers. */ UI[\"Weekdays\"] = \"weekdays\";\n    /** The cell containing the week number. */ UI[\"WeekNumber\"] = \"week_number\";\n    /** The cell header of the week numbers column. */ UI[\"WeekNumberHeader\"] = \"week_number_header\";\n    /** The dropdown with the years. */ UI[\"YearsDropdown\"] = \"years_dropdown\";\n})(UI || (UI = {}));\n/** Enum representing flags for the {@link UI.Day} element. */ var DayFlag;\n(function(DayFlag) {\n    /** The day is disabled. */ DayFlag[\"disabled\"] = \"disabled\";\n    /** The day is hidden. */ DayFlag[\"hidden\"] = \"hidden\";\n    /** The day is outside the current month. */ DayFlag[\"outside\"] = \"outside\";\n    /** The day is focused. */ DayFlag[\"focused\"] = \"focused\";\n    /** The day is today. */ DayFlag[\"today\"] = \"today\";\n})(DayFlag || (DayFlag = {}));\n/**\n * Enum representing selection states that can be applied to the {@link UI.Day}\n * element in selection mode.\n */ var SelectionState;\n(function(SelectionState) {\n    /** The day is at the end of a selected range. */ SelectionState[\"range_end\"] = \"range_end\";\n    /** The day is at the middle of a selected range. */ SelectionState[\"range_middle\"] = \"range_middle\";\n    /** The day is at the start of a selected range. */ SelectionState[\"range_start\"] = \"range_start\";\n    /** The day is selected. */ SelectionState[\"selected\"] = \"selected\";\n})(SelectionState || (SelectionState = {}));\n/**\n * Enum representing different animation states for transitioning between\n * months.\n */ var Animation;\n(function(Animation) {\n    /** The entering weeks when they appear before the exiting month. */ Animation[\"weeks_before_enter\"] = \"weeks_before_enter\";\n    /** The exiting weeks when they disappear before the entering month. */ Animation[\"weeks_before_exit\"] = \"weeks_before_exit\";\n    /** The entering weeks when they appear after the exiting month. */ Animation[\"weeks_after_enter\"] = \"weeks_after_enter\";\n    /** The exiting weeks when they disappear after the entering month. */ Animation[\"weeks_after_exit\"] = \"weeks_after_exit\";\n    /** The entering caption when it appears after the exiting month. */ Animation[\"caption_after_enter\"] = \"caption_after_enter\";\n    /** The exiting caption when it disappears after the entering month. */ Animation[\"caption_after_exit\"] = \"caption_after_exit\";\n    /** The entering caption when it appears before the exiting month. */ Animation[\"caption_before_enter\"] = \"caption_before_enter\";\n    /** The exiting caption when it disappears before the entering month. */ Animation[\"caption_before_exit\"] = \"caption_before_exit\";\n})(Animation || (Animation = {}));\n/**\n * Render a dropdown component for navigation in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Dropdown(props) {\n    const { options, className, components, classNames, ...selectProps } = props;\n    const cssClassSelect = [\n        classNames[UI.Dropdown],\n        className\n    ].join(\" \");\n    const selectedOption = options?.find(({ value })=>value === selectProps.value);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        \"data-disabled\": selectProps.disabled,\n        className: classNames[UI.DropdownRoot]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Select, {\n        className: cssClassSelect,\n        ...selectProps\n    }, options?.map(({ value, label, disabled })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Option, {\n            key: value,\n            value: value,\n            disabled: disabled\n        }, label))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        className: classNames[UI.CaptionLabel],\n        \"aria-hidden\": true\n    }, selectedOption?.label, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Chevron, {\n        orientation: \"down\",\n        size: 18,\n        className: classNames[UI.Chevron]\n    })));\n}\n/**\n * Render the navigation dropdowns for the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function DropdownNav(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...props\n    });\n}\n/**\n * Render the footer of the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Footer(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...props\n    });\n}\n/**\n * Render the grid with the weekday header row and the weeks for a specific\n * month.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Month(props) {\n    const { calendarMonth, displayIndex, ...divProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...divProps\n    }, props.children);\n}\n/**\n * Render the caption for a month in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function MonthCaption(props) {\n    const { calendarMonth, displayIndex, ...divProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...divProps\n    });\n}\n/**\n * Render the grid of days for a specific month.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function MonthGrid(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"table\", {\n        ...props\n    });\n}\n/**\n * Render a container wrapping the month grids.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Months(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...props\n    });\n}\n/** @ignore */ const dayPickerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * Provides access to the DayPicker context, which includes properties and\n * methods to interact with the DayPicker component. This hook must be used\n * within a custom component.\n *\n * @template T - Use this type to refine the returned context type with a\n *   specific selection mode.\n * @returns The context to work with DayPicker.\n * @throws {Error} If the hook is used outside of a DayPicker provider.\n * @group Hooks\n * @see https://daypicker.dev/guides/custom-components\n */ function useDayPicker() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(dayPickerContext);\n    if (context === undefined) {\n        throw new Error(\"useDayPicker() must be used within a custom component.\");\n    }\n    return context;\n}\n/**\n * Render a dropdown to navigate between months in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function MonthsDropdown(props) {\n    const { components } = useDayPicker();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Dropdown, {\n        ...props\n    });\n}\n/**\n * Render the navigation toolbar with buttons to navigate between months.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Nav(props) {\n    const { onPreviousClick, onNextClick, previousMonth, nextMonth, ...navProps } = props;\n    const { components, classNames, labels: { labelPrevious, labelNext } } = useDayPicker();\n    const handleNextClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Nav.useCallback[handleNextClick]\": (e)=>{\n            if (nextMonth) {\n                onNextClick?.(e);\n            }\n        }\n    }[\"Nav.useCallback[handleNextClick]\"], [\n        nextMonth,\n        onNextClick\n    ]);\n    const handlePreviousClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Nav.useCallback[handlePreviousClick]\": (e)=>{\n            if (previousMonth) {\n                onPreviousClick?.(e);\n            }\n        }\n    }[\"Nav.useCallback[handlePreviousClick]\"], [\n        previousMonth,\n        onPreviousClick\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"nav\", {\n        ...navProps\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.PreviousMonthButton, {\n        type: \"button\",\n        className: classNames[UI.PreviousMonthButton],\n        tabIndex: previousMonth ? undefined : -1,\n        \"aria-disabled\": previousMonth ? undefined : true,\n        \"aria-label\": labelPrevious(previousMonth),\n        onClick: handlePreviousClick\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Chevron, {\n        disabled: previousMonth ? undefined : true,\n        className: classNames[UI.Chevron],\n        orientation: \"left\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.NextMonthButton, {\n        type: \"button\",\n        className: classNames[UI.NextMonthButton],\n        tabIndex: nextMonth ? undefined : -1,\n        \"aria-disabled\": nextMonth ? undefined : true,\n        \"aria-label\": labelNext(nextMonth),\n        onClick: handleNextClick\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Chevron, {\n        disabled: nextMonth ? undefined : true,\n        orientation: \"right\",\n        className: classNames[UI.Chevron]\n    })));\n}\n/**\n * Render the button to navigate to the next month in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function NextMonthButton(props) {\n    const { components } = useDayPicker();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Button, {\n        ...props\n    });\n}\n/**\n * Render an `option` element.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Option(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"option\", {\n        ...props\n    });\n}\n/**\n * Render the button to navigate to the previous month in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function PreviousMonthButton(props) {\n    const { components } = useDayPicker();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Button, {\n        ...props\n    });\n}\n/**\n * Render the root element of the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Root$1(props) {\n    const { rootRef, ...rest } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ...rest,\n        ref: rootRef\n    });\n}\n/**\n * Render a `select` element.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Select$1(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"select\", {\n        ...props\n    });\n}\n/**\n * Render a table row representing a week in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Week(props) {\n    const { week, ...trProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        ...trProps\n    });\n}\n/**\n * Render a table header cell with the name of a weekday (e.g., \"Mo\", \"Tu\").\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Weekday(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"th\", {\n        ...props\n    });\n}\n/**\n * Render the table row containing the weekday names.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Weekdays(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"thead\", {\n        \"aria-hidden\": true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        ...props\n    }));\n}\n/**\n * Render a table cell displaying the number of the week.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function WeekNumber(props) {\n    const { week, ...thProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"th\", {\n        ...thProps\n    });\n}\n/**\n * Render the header cell for the week numbers column.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function WeekNumberHeader(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"th\", {\n        ...props\n    });\n}\n/**\n * Render the container for the weeks in the month grid.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function Weeks(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tbody\", {\n        ...props\n    });\n}\n/**\n * Render a dropdown to navigate between years in the calendar.\n *\n * @group Components\n * @see https://daypicker.dev/guides/custom-components\n */ function YearsDropdown(props) {\n    const { components } = useDayPicker();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Dropdown, {\n        ...props\n    });\n}\nvar components = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Button: Button,\n    CaptionLabel: CaptionLabel,\n    Chevron: Chevron,\n    Day: Day,\n    DayButton: DayButton,\n    Dropdown: Dropdown,\n    DropdownNav: DropdownNav,\n    Footer: Footer,\n    Month: Month,\n    MonthCaption: MonthCaption,\n    MonthGrid: MonthGrid,\n    Months: Months,\n    MonthsDropdown: MonthsDropdown,\n    Nav: Nav,\n    NextMonthButton: NextMonthButton,\n    Option: Option,\n    PreviousMonthButton: PreviousMonthButton,\n    Root: Root$1,\n    Select: Select$1,\n    Week: Week,\n    WeekNumber: WeekNumber,\n    WeekNumberHeader: WeekNumberHeader,\n    Weekday: Weekday,\n    Weekdays: Weekdays,\n    Weeks: Weeks,\n    YearsDropdown: YearsDropdown\n});\n/**\n * Checks if a given date is within a specified date range.\n *\n * @since 9.0.0\n * @param range - The date range to check against.\n * @param date - The date to check.\n * @param excludeEnds - If `true`, the range's start and end dates are excluded.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the date is within the range, otherwise `false`.\n * @group Utilities\n */ function rangeIncludesDate(range, date, excludeEnds = false, dateLib = defaultDateLib) {\n    let { from, to } = range;\n    const { differenceInCalendarDays, isSameDay } = dateLib;\n    if (from && to) {\n        const isRangeInverted = differenceInCalendarDays(to, from) < 0;\n        if (isRangeInverted) {\n            [from, to] = [\n                to,\n                from\n            ];\n        }\n        const isInRange = differenceInCalendarDays(date, from) >= (excludeEnds ? 1 : 0) && differenceInCalendarDays(to, date) >= (excludeEnds ? 1 : 0);\n        return isInRange;\n    }\n    if (!excludeEnds && to) {\n        return isSameDay(to, date);\n    }\n    if (!excludeEnds && from) {\n        return isSameDay(from, date);\n    }\n    return false;\n}\n/**\n * Checks if the given value is of type {@link DateInterval}.\n *\n * @param matcher - The value to check.\n * @returns `true` if the value is a {@link DateInterval}, otherwise `false`.\n * @group Utilities\n */ function isDateInterval(matcher) {\n    return Boolean(matcher && typeof matcher === \"object\" && \"before\" in matcher && \"after\" in matcher);\n}\n/**\n * Checks if the given value is of type {@link DateRange}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateRange}, otherwise `false`.\n * @group Utilities\n */ function isDateRange(value) {\n    return Boolean(value && typeof value === \"object\" && \"from\" in value);\n}\n/**\n * Checks if the given value is of type {@link DateAfter}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateAfter}, otherwise `false`.\n * @group Utilities\n */ function isDateAfterType(value) {\n    return Boolean(value && typeof value === \"object\" && \"after\" in value);\n}\n/**\n * Checks if the given value is of type {@link DateBefore}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DateBefore}, otherwise `false`.\n * @group Utilities\n */ function isDateBeforeType(value) {\n    return Boolean(value && typeof value === \"object\" && \"before\" in value);\n}\n/**\n * Checks if the given value is of type {@link DayOfWeek}.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a {@link DayOfWeek}, otherwise `false`.\n * @group Utilities\n */ function isDayOfWeekType(value) {\n    return Boolean(value && typeof value === \"object\" && \"dayOfWeek\" in value);\n}\n/**\n * Checks if the given value is an array of valid dates.\n *\n * @private\n * @param value - The value to check.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the value is an array of valid dates, otherwise `false`.\n */ function isDatesArray(value, dateLib) {\n    return Array.isArray(value) && value.every(dateLib.isDate);\n}\n/**\n * Checks if a given date matches at least one of the specified {@link Matcher}.\n *\n * @param date - The date to check.\n * @param matchers - The matchers to check against.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the date matches any of the matchers, otherwise `false`.\n * @group Utilities\n */ function dateMatchModifiers(date, matchers, dateLib = defaultDateLib) {\n    const matchersArr = !Array.isArray(matchers) ? [\n        matchers\n    ] : matchers;\n    const { isSameDay, differenceInCalendarDays, isAfter } = dateLib;\n    return matchersArr.some((matcher)=>{\n        if (typeof matcher === \"boolean\") {\n            return matcher;\n        }\n        if (dateLib.isDate(matcher)) {\n            return isSameDay(date, matcher);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.includes(date);\n        }\n        if (isDateRange(matcher)) {\n            return rangeIncludesDate(matcher, date, false, dateLib);\n        }\n        if (isDayOfWeekType(matcher)) {\n            if (!Array.isArray(matcher.dayOfWeek)) {\n                return matcher.dayOfWeek === date.getDay();\n            }\n            return matcher.dayOfWeek.includes(date.getDay());\n        }\n        if (isDateInterval(matcher)) {\n            const diffBefore = differenceInCalendarDays(matcher.before, date);\n            const diffAfter = differenceInCalendarDays(matcher.after, date);\n            const isDayBefore = diffBefore > 0;\n            const isDayAfter = diffAfter < 0;\n            const isClosedInterval = isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return isDayAfter && isDayBefore;\n            } else {\n                return isDayBefore || isDayAfter;\n            }\n        }\n        if (isDateAfterType(matcher)) {\n            return differenceInCalendarDays(date, matcher.after) > 0;\n        }\n        if (isDateBeforeType(matcher)) {\n            return differenceInCalendarDays(matcher.before, date) > 0;\n        }\n        if (typeof matcher === \"function\") {\n            return matcher(date);\n        }\n        return false;\n    });\n}\n/**\n * Creates a function to retrieve the modifiers for a given day.\n *\n * This function calculates both internal and custom modifiers for each day\n * based on the provided calendar days and DayPicker props.\n *\n * @private\n * @param days The array of `CalendarDay` objects to process.\n * @param props The DayPicker props, including modifiers and configuration\n *   options.\n * @param dateLib The date library to use for date manipulation.\n * @returns A function that retrieves the modifiers for a given `CalendarDay`.\n */ function createGetModifiers(days, props, navStart, navEnd, dateLib) {\n    const { disabled, hidden, modifiers, showOutsideDays, broadcastCalendar, today } = props;\n    const { isSameDay, isSameMonth, startOfMonth, isBefore, endOfMonth, isAfter } = dateLib;\n    const computedNavStart = navStart && startOfMonth(navStart);\n    const computedNavEnd = navEnd && endOfMonth(navEnd);\n    const internalModifiersMap = {\n        [DayFlag.focused]: [],\n        [DayFlag.outside]: [],\n        [DayFlag.disabled]: [],\n        [DayFlag.hidden]: [],\n        [DayFlag.today]: []\n    };\n    const customModifiersMap = {};\n    for (const day of days){\n        const { date, displayMonth } = day;\n        const isOutside = Boolean(displayMonth && !isSameMonth(date, displayMonth));\n        const isBeforeNavStart = Boolean(computedNavStart && isBefore(date, computedNavStart));\n        const isAfterNavEnd = Boolean(computedNavEnd && isAfter(date, computedNavEnd));\n        const isDisabled = Boolean(disabled && dateMatchModifiers(date, disabled, dateLib));\n        const isHidden = Boolean(hidden && dateMatchModifiers(date, hidden, dateLib)) || isBeforeNavStart || isAfterNavEnd || // Broadcast calendar will show outside days as default\n        !broadcastCalendar && !showOutsideDays && isOutside || broadcastCalendar && showOutsideDays === false && isOutside;\n        const isToday = isSameDay(date, today ?? dateLib.today());\n        if (isOutside) internalModifiersMap.outside.push(day);\n        if (isDisabled) internalModifiersMap.disabled.push(day);\n        if (isHidden) internalModifiersMap.hidden.push(day);\n        if (isToday) internalModifiersMap.today.push(day);\n        // Add custom modifiers\n        if (modifiers) {\n            Object.keys(modifiers).forEach((name)=>{\n                const modifierValue = modifiers?.[name];\n                const isMatch = modifierValue ? dateMatchModifiers(date, modifierValue, dateLib) : false;\n                if (!isMatch) return;\n                if (customModifiersMap[name]) {\n                    customModifiersMap[name].push(day);\n                } else {\n                    customModifiersMap[name] = [\n                        day\n                    ];\n                }\n            });\n        }\n    }\n    return (day)=>{\n        // Initialize all the modifiers to false\n        const dayFlags = {\n            [DayFlag.focused]: false,\n            [DayFlag.disabled]: false,\n            [DayFlag.hidden]: false,\n            [DayFlag.outside]: false,\n            [DayFlag.today]: false\n        };\n        const customModifiers = {};\n        // Find the modifiers for the given day\n        for(const name in internalModifiersMap){\n            const days = internalModifiersMap[name];\n            dayFlags[name] = days.some((d)=>d === day);\n        }\n        for(const name in customModifiersMap){\n            customModifiers[name] = customModifiersMap[name].some((d)=>d === day);\n        }\n        return {\n            ...dayFlags,\n            // custom modifiers should override all the previous ones\n            ...customModifiers\n        };\n    };\n}\n/**\n * Returns the class names for a day based on its modifiers.\n *\n * This function combines the base class name for the day with any class names\n * associated with active modifiers.\n *\n * @param modifiers The modifiers applied to the day.\n * @param classNames The base class names for the calendar elements.\n * @param modifiersClassNames The class names associated with specific\n *   modifiers.\n * @returns An array of class names for the day.\n */ function getClassNamesForModifiers(modifiers, classNames, modifiersClassNames = {}) {\n    const modifierClassNames = Object.entries(modifiers).filter(([, active])=>active === true).reduce((previousValue, [key])=>{\n        if (modifiersClassNames[key]) {\n            previousValue.push(modifiersClassNames[key]);\n        } else if (classNames[DayFlag[key]]) {\n            previousValue.push(classNames[DayFlag[key]]);\n        } else if (classNames[SelectionState[key]]) {\n            previousValue.push(classNames[SelectionState[key]]);\n        }\n        return previousValue;\n    }, [\n        classNames[UI.Day]\n    ]);\n    return modifierClassNames;\n}\n/**\n * Merges custom components from the props with the default components.\n *\n * This function ensures that any custom components provided in the props\n * override the default components.\n *\n * @param customComponents The custom components provided in the DayPicker\n *   props.\n * @returns An object containing the merged components.\n */ function getComponents(customComponents) {\n    return {\n        ...components,\n        ...customComponents\n    };\n}\n/**\n * Extracts `data-` attributes from the DayPicker props.\n *\n * This function collects all `data-` attributes from the props and adds\n * additional attributes based on the DayPicker configuration.\n *\n * @param props The DayPicker props.\n * @returns An object containing the `data-` attributes.\n */ function getDataAttributes(props) {\n    const dataAttributes = {\n        \"data-mode\": props.mode ?? undefined,\n        \"data-required\": \"required\" in props ? props.required : undefined,\n        \"data-multiple-months\": props.numberOfMonths && props.numberOfMonths > 1 || undefined,\n        \"data-week-numbers\": props.showWeekNumber || undefined,\n        \"data-broadcast-calendar\": props.broadcastCalendar || undefined,\n        \"data-nav-layout\": props.navLayout || undefined\n    };\n    Object.entries(props).forEach(([key, val])=>{\n        if (key.startsWith(\"data-\")) {\n            dataAttributes[key] = val;\n        }\n    });\n    return dataAttributes;\n}\n/**\n * Returns the default class names for the UI elements.\n *\n * This function generates a mapping of default class names for various UI\n * elements, day flags, selection states, and animations.\n *\n * @returns An object containing the default class names.\n * @group Utilities\n */ function getDefaultClassNames() {\n    const classNames = {};\n    for(const key in UI){\n        classNames[UI[key]] = `rdp-${UI[key]}`;\n    }\n    for(const key in DayFlag){\n        classNames[DayFlag[key]] = `rdp-${DayFlag[key]}`;\n    }\n    for(const key in SelectionState){\n        classNames[SelectionState[key]] = `rdp-${SelectionState[key]}`;\n    }\n    for(const key in Animation){\n        classNames[Animation[key]] = `rdp-${Animation[key]}`;\n    }\n    return classNames;\n}\n/**\n * Formats the caption of the month.\n *\n * @defaultValue `LLLL y` (e.g., \"November 2022\").\n * @param month The date representing the month.\n * @param options Configuration options for the date library.\n * @param dateLib The date library to use for formatting. If not provided, a new\n *   instance is created.\n * @returns The formatted caption as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatCaption(month, options, dateLib) {\n    return (dateLib ?? new DateLib(options)).format(month, \"LLLL y\");\n}\n/**\n * @private\n * @deprecated Use {@link formatCaption} instead.\n * @group Formatters\n */ const formatMonthCaption = formatCaption;\n/**\n * Formats the day date shown in the day cell.\n *\n * @defaultValue `d` (e.g., \"1\").\n * @param date The date to format.\n * @param options Configuration options for the date library.\n * @param dateLib The date library to use for formatting. If not provided, a new\n *   instance is created.\n * @returns The formatted day as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatDay(date, options, dateLib) {\n    return (dateLib ?? new DateLib(options)).format(date, \"d\");\n}\n/**\n * Formats the month for the dropdown option label.\n *\n * @defaultValue The localized full month name.\n * @param month The date representing the month.\n * @param dateLib The date library to use for formatting. Defaults to\n *   `defaultDateLib`.\n * @returns The formatted month name as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatMonthDropdown(month, dateLib = defaultDateLib) {\n    return dateLib.format(month, \"LLLL\");\n}\n/**\n * Formats the name of a weekday to be displayed in the weekdays header.\n *\n * @defaultValue `cccccc` (e.g., \"Mo\" for Monday).\n * @param weekday The date representing the weekday.\n * @param options Configuration options for the date library.\n * @param dateLib The date library to use for formatting. If not provided, a new\n *   instance is created.\n * @returns The formatted weekday name as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatWeekdayName(weekday, options, dateLib) {\n    return (dateLib ?? new DateLib(options)).format(weekday, \"cccccc\");\n}\n/**\n * Formats the week number.\n *\n * @defaultValue The week number as a string, with a leading zero for single-digit numbers.\n * @param weekNumber The week number to format.\n * @param dateLib The date library to use for formatting. Defaults to\n *   `defaultDateLib`.\n * @returns The formatted week number as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatWeekNumber(weekNumber, dateLib = defaultDateLib) {\n    if (weekNumber < 10) {\n        return dateLib.formatNumber(`0${weekNumber.toLocaleString()}`);\n    }\n    return dateLib.formatNumber(`${weekNumber.toLocaleString()}`);\n}\n/**\n * Formats the header for the week number column.\n *\n * @defaultValue An empty string `\"\"`.\n * @returns The formatted week number header as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatWeekNumberHeader() {\n    return ``;\n}\n/**\n * Formats the year for the dropdown option label.\n *\n * @param year The year to format.\n * @param dateLib The date library to use for formatting. Defaults to\n *   `defaultDateLib`.\n * @returns The formatted year as a string.\n * @group Formatters\n * @see https://daypicker.dev/docs/translation#custom-formatters\n */ function formatYearDropdown(year, dateLib = defaultDateLib) {\n    return dateLib.format(year, \"yyyy\");\n}\n/**\n * @private\n * @deprecated Use `formatYearDropdown` instead.\n * @group Formatters\n */ const formatYearCaption = formatYearDropdown;\nvar defaultFormatters = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    formatCaption: formatCaption,\n    formatDay: formatDay,\n    formatMonthCaption: formatMonthCaption,\n    formatMonthDropdown: formatMonthDropdown,\n    formatWeekNumber: formatWeekNumber,\n    formatWeekNumberHeader: formatWeekNumberHeader,\n    formatWeekdayName: formatWeekdayName,\n    formatYearCaption: formatYearCaption,\n    formatYearDropdown: formatYearDropdown\n});\n/**\n * Merges custom formatters from the props with the default formatters.\n *\n * @param customFormatters The custom formatters provided in the DayPicker\n *   props.\n * @returns The merged formatters object.\n */ function getFormatters(customFormatters) {\n    if (customFormatters?.formatMonthCaption && !customFormatters.formatCaption) {\n        customFormatters.formatCaption = customFormatters.formatMonthCaption;\n    }\n    if (customFormatters?.formatYearCaption && !customFormatters.formatYearDropdown) {\n        customFormatters.formatYearDropdown = customFormatters.formatYearCaption;\n    }\n    return {\n        ...defaultFormatters,\n        ...customFormatters\n    };\n}\n/**\n * Returns the months to show in the dropdown.\n *\n * This function generates a list of months for the current year, formatted\n * using the provided formatter, and determines whether each month should be\n * disabled based on the navigation range.\n *\n * @param displayMonth The currently displayed month.\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the month labels.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dropdown options representing the months, or `undefined`\n *   if no months are available.\n */ function getMonthOptions(displayMonth, navStart, navEnd, formatters, dateLib) {\n    const { startOfMonth, startOfYear, endOfYear, eachMonthOfInterval, getMonth } = dateLib;\n    const months = eachMonthOfInterval({\n        start: startOfYear(displayMonth),\n        end: endOfYear(displayMonth)\n    });\n    const options = months.map((month)=>{\n        const label = formatters.formatMonthDropdown(month, dateLib);\n        const value = getMonth(month);\n        const disabled = navStart && month < startOfMonth(navStart) || navEnd && month > startOfMonth(navEnd) || false;\n        return {\n            value,\n            label,\n            disabled\n        };\n    });\n    return options;\n}\n/**\n * Returns the computed style for a day based on its modifiers.\n *\n * This function merges the base styles for the day with any styles associated\n * with active modifiers.\n *\n * @param dayModifiers The modifiers applied to the day.\n * @param styles The base styles for the calendar elements.\n * @param modifiersStyles The styles associated with specific modifiers.\n * @returns The computed style for the day.\n */ function getStyleForModifiers(dayModifiers, styles = {}, modifiersStyles = {}) {\n    let style = {\n        ...styles?.[UI.Day]\n    };\n    Object.entries(dayModifiers).filter(([, active])=>active === true).forEach(([modifier])=>{\n        style = {\n            ...style,\n            ...modifiersStyles?.[modifier]\n        };\n    });\n    return style;\n}\n/**\n * Generates a series of 7 days, starting from the beginning of the week, to use\n * for formatting weekday names (e.g., Monday, Tuesday, etc.).\n *\n * @param dateLib The date library to use for date manipulation.\n * @param ISOWeek Whether to use ISO week numbering (weeks start on Monday).\n * @param broadcastCalendar Whether to use the broadcast calendar (weeks start\n *   on Monday, but may include adjustments for broadcast-specific rules).\n * @returns An array of 7 dates representing the weekdays.\n */ function getWeekdays(dateLib, ISOWeek, broadcastCalendar) {\n    const today = dateLib.today();\n    const start = ISOWeek ? dateLib.startOfISOWeek(today) : dateLib.startOfWeek(today);\n    const days = [];\n    for(let i = 0; i < 7; i++){\n        const day = dateLib.addDays(start, i);\n        days.push(day);\n    }\n    return days;\n}\n/**\n * Returns the years to display in the dropdown.\n *\n * This function generates a list of years between the navigation start and end\n * dates, formatted using the provided formatter.\n *\n * @param navStart The start date for navigation.\n * @param navEnd The end date for navigation.\n * @param formatters The formatters to use for formatting the year labels.\n * @param dateLib The date library to use for date manipulation.\n * @param reverse If true, reverses the order of the years (descending).\n * @returns An array of dropdown options representing the years, or `undefined`\n *   if `navStart` or `navEnd` is not provided.\n */ function getYearOptions(navStart, navEnd, formatters, dateLib, reverse = false) {\n    if (!navStart) return undefined;\n    if (!navEnd) return undefined;\n    const { startOfYear, endOfYear, addYears, getYear, isBefore, isSameYear } = dateLib;\n    const firstNavYear = startOfYear(navStart);\n    const lastNavYear = endOfYear(navEnd);\n    const years = [];\n    let year = firstNavYear;\n    while(isBefore(year, lastNavYear) || isSameYear(year, lastNavYear)){\n        years.push(year);\n        year = addYears(year, 1);\n    }\n    if (reverse) years.reverse();\n    return years.map((year)=>{\n        const label = formatters.formatYearDropdown(year, dateLib);\n        return {\n            value: getYear(year),\n            label,\n            disabled: false\n        };\n    });\n}\n/**\n * Generates the ARIA label for a day button.\n *\n * Use the `modifiers` argument to provide additional context for the label,\n * such as indicating if the day is \"today\" or \"selected.\"\n *\n * @defaultValue The formatted date.\n * @param date - The date to format.\n * @param modifiers - The modifiers providing context for the day.\n * @param options - Optional configuration for the date formatting library.\n * @param dateLib - An optional instance of the date formatting library.\n * @returns The ARIA label for the day button.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelDayButton(date, modifiers, options, dateLib) {\n    let label = (dateLib ?? new DateLib(options)).format(date, \"PPPP\");\n    if (modifiers.today) label = `Today, ${label}`;\n    if (modifiers.selected) label = `${label}, selected`;\n    return label;\n}\n/**\n * @ignore\n * @deprecated Use `labelDayButton` instead.\n */ const labelDay = labelDayButton;\n/**\n * Generates the ARIA label for the month grid, which is announced when entering\n * the grid.\n *\n * @defaultValue `LLLL y` (e.g., \"November 2022\").\n * @param date - The date representing the month.\n * @param options - Optional configuration for the date formatting library.\n * @param dateLib - An optional instance of the date formatting library.\n * @returns The ARIA label for the month grid.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelGrid(date, options, dateLib) {\n    return (dateLib ?? new DateLib(options)).format(date, \"LLLL y\");\n}\n/**\n * @ignore\n * @deprecated Use {@link labelGrid} instead.\n */ const labelCaption = labelGrid;\n/**\n * Generates the label for a day grid cell when the calendar is not interactive.\n *\n * @param date - The date to format.\n * @param modifiers - Optional modifiers providing context for the day.\n * @param options - Optional configuration for the date formatting library.\n * @param dateLib - An optional instance of the date formatting library.\n * @returns The label for the day grid cell.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelGridcell(date, modifiers, options, dateLib) {\n    let label = (dateLib ?? new DateLib(options)).format(date, \"PPPP\");\n    if (modifiers?.today) {\n        label = `Today, ${label}`;\n    }\n    return label;\n}\n/**\n * Generates the ARIA label for the months dropdown.\n *\n * @defaultValue `\"Choose the Month\"`\n * @param options - Optional configuration for the date formatting library.\n * @returns The ARIA label for the months dropdown.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelMonthDropdown(_options) {\n    return \"Choose the Month\";\n}\n/**\n * Generates the ARIA label for the navigation toolbar.\n *\n * @defaultValue `\"\"`\n * @returns The ARIA label for the navigation toolbar.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelNav() {\n    return \"\";\n}\n/**\n * Generates the ARIA label for the \"next month\" button.\n *\n * @defaultValue `\"Go to the Next Month\"`\n * @param month - The date representing the next month, or `undefined` if there\n *   is no next month.\n * @returns The ARIA label for the \"next month\" button.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelNext(_month) {\n    return \"Go to the Next Month\";\n}\n/**\n * Generates the ARIA label for the \"previous month\" button.\n *\n * @defaultValue `\"Go to the Previous Month\"`\n * @param month - The date representing the previous month, or `undefined` if\n *   there is no previous month.\n * @returns The ARIA label for the \"previous month\" button.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelPrevious(_month) {\n    return \"Go to the Previous Month\";\n}\n/**\n * Generates the ARIA label for a weekday column header.\n *\n * @defaultValue `\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"`\n * @param date - The date representing the weekday.\n * @param options - Optional configuration for the date formatting library.\n * @param dateLib - An optional instance of the date formatting library.\n * @returns The ARIA label for the weekday column header.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelWeekday(date, options, dateLib) {\n    return (dateLib ?? new DateLib(options)).format(date, \"cccc\");\n}\n/**\n * Generates the ARIA label for the week number cell (the first cell in a row).\n *\n * @defaultValue `Week ${weekNumber}`\n * @param weekNumber - The number of the week.\n * @param options - Optional configuration for the date formatting library.\n * @returns The ARIA label for the week number cell.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelWeekNumber(weekNumber, _options) {\n    return `Week ${weekNumber}`;\n}\n/**\n * Generates the ARIA label for the week number header element.\n *\n * @defaultValue `\"Week Number\"`\n * @param options - Optional configuration for the date formatting library.\n * @returns The ARIA label for the week number header.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelWeekNumberHeader(_options) {\n    return \"Week Number\";\n}\n/**\n * Generates the ARIA label for the years dropdown.\n *\n * @defaultValue `\"Choose the Year\"`\n * @param options - Optional configuration for the date formatting library.\n * @returns The ARIA label for the years dropdown.\n * @group Labels\n * @see https://daypicker.dev/docs/translation#aria-labels\n */ function labelYearDropdown(_options) {\n    return \"Choose the Year\";\n}\nvar defaultLabels = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    labelCaption: labelCaption,\n    labelDay: labelDay,\n    labelDayButton: labelDayButton,\n    labelGrid: labelGrid,\n    labelGridcell: labelGridcell,\n    labelMonthDropdown: labelMonthDropdown,\n    labelNav: labelNav,\n    labelNext: labelNext,\n    labelPrevious: labelPrevious,\n    labelWeekNumber: labelWeekNumber,\n    labelWeekNumberHeader: labelWeekNumberHeader,\n    labelWeekday: labelWeekday,\n    labelYearDropdown: labelYearDropdown\n});\nconst asHtmlElement = (element)=>{\n    if (element instanceof HTMLElement) return element;\n    return null;\n};\nconst queryMonthEls = (element)=>[\n        ...element.querySelectorAll(\"[data-animated-month]\") ?? []\n    ];\nconst queryMonthEl = (element)=>asHtmlElement(element.querySelector(\"[data-animated-month]\"));\nconst queryCaptionEl = (element)=>asHtmlElement(element.querySelector(\"[data-animated-caption]\"));\nconst queryWeeksEl = (element)=>asHtmlElement(element.querySelector(\"[data-animated-weeks]\"));\nconst queryNavEl = (element)=>asHtmlElement(element.querySelector(\"[data-animated-nav]\"));\nconst queryWeekdaysEl = (element)=>asHtmlElement(element.querySelector(\"[data-animated-weekdays]\"));\n/**\n * Handles animations for transitioning between months in the DayPicker\n * component.\n *\n * @private\n * @param rootElRef - A reference to the root element of the DayPicker\n *   component.\n * @param enabled - Whether animations are enabled.\n * @param options - Configuration options for the animation, including class\n *   names, months, focused day, and the date utility library.\n */ function useAnimation(rootElRef, enabled, { classNames, months, focused, dateLib }) {\n    const previousRootElSnapshotRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const previousMonthsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(months);\n    const animatingRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect)({\n        \"useAnimation.useLayoutEffect\": ()=>{\n            // get previous months before updating the previous months ref\n            const previousMonths = previousMonthsRef.current;\n            // update previous months ref for next effect trigger\n            previousMonthsRef.current = months;\n            if (!enabled || !rootElRef.current || // safety check because the ref can be set to anything by consumers\n            !(rootElRef.current instanceof HTMLElement) || // validation required for the animation to work as expected\n            months.length === 0 || previousMonths.length === 0 || months.length !== previousMonths.length) {\n                return;\n            }\n            const isSameMonth = dateLib.isSameMonth(months[0].date, previousMonths[0].date);\n            const isAfterPreviousMonth = dateLib.isAfter(months[0].date, previousMonths[0].date);\n            const captionAnimationClass = isAfterPreviousMonth ? classNames[Animation.caption_after_enter] : classNames[Animation.caption_before_enter];\n            const weeksAnimationClass = isAfterPreviousMonth ? classNames[Animation.weeks_after_enter] : classNames[Animation.weeks_before_enter];\n            // get previous root element snapshot before updating the snapshot ref\n            const previousRootElSnapshot = previousRootElSnapshotRef.current;\n            // update snapshot for next effect trigger\n            const rootElSnapshot = rootElRef.current.cloneNode(true);\n            if (rootElSnapshot instanceof HTMLElement) {\n                // if this effect is triggered while animating, we need to clean up the new root snapshot\n                // to put it in the same state as when not animating, to correctly animate the next month change\n                const currentMonthElsSnapshot = queryMonthEls(rootElSnapshot);\n                currentMonthElsSnapshot.forEach({\n                    \"useAnimation.useLayoutEffect\": (currentMonthElSnapshot)=>{\n                        if (!(currentMonthElSnapshot instanceof HTMLElement)) return;\n                        // remove the old month snapshots from the new root snapshot\n                        const previousMonthElSnapshot = queryMonthEl(currentMonthElSnapshot);\n                        if (previousMonthElSnapshot && currentMonthElSnapshot.contains(previousMonthElSnapshot)) {\n                            currentMonthElSnapshot.removeChild(previousMonthElSnapshot);\n                        }\n                        // remove animation classes from the new month snapshots\n                        const captionEl = queryCaptionEl(currentMonthElSnapshot);\n                        if (captionEl) {\n                            captionEl.classList.remove(captionAnimationClass);\n                        }\n                        const weeksEl = queryWeeksEl(currentMonthElSnapshot);\n                        if (weeksEl) {\n                            weeksEl.classList.remove(weeksAnimationClass);\n                        }\n                    }\n                }[\"useAnimation.useLayoutEffect\"]);\n                previousRootElSnapshotRef.current = rootElSnapshot;\n            } else {\n                previousRootElSnapshotRef.current = null;\n            }\n            if (animatingRef.current || isSameMonth || // skip animation if a day is focused because it can cause issues to the animation and is better for a11y\n            focused) {\n                return;\n            }\n            const previousMonthEls = previousRootElSnapshot instanceof HTMLElement ? queryMonthEls(previousRootElSnapshot) : [];\n            const currentMonthEls = queryMonthEls(rootElRef.current);\n            if (currentMonthEls?.every({\n                \"useAnimation.useLayoutEffect\": (el)=>el instanceof HTMLElement\n            }[\"useAnimation.useLayoutEffect\"]) && previousMonthEls && previousMonthEls.every({\n                \"useAnimation.useLayoutEffect\": (el)=>el instanceof HTMLElement\n            }[\"useAnimation.useLayoutEffect\"])) {\n                animatingRef.current = true;\n                // set isolation to isolate to isolate the stacking context during animation\n                rootElRef.current.style.isolation = \"isolate\";\n                // set z-index to 1 to ensure the nav is clickable over the other elements being animated\n                const navEl = queryNavEl(rootElRef.current);\n                if (navEl) {\n                    navEl.style.zIndex = \"1\";\n                }\n                currentMonthEls.forEach({\n                    \"useAnimation.useLayoutEffect\": (currentMonthEl, index)=>{\n                        const previousMonthEl = previousMonthEls[index];\n                        if (!previousMonthEl) {\n                            return;\n                        }\n                        // animate new displayed month\n                        currentMonthEl.style.position = \"relative\";\n                        currentMonthEl.style.overflow = \"hidden\";\n                        const captionEl = queryCaptionEl(currentMonthEl);\n                        if (captionEl) {\n                            captionEl.classList.add(captionAnimationClass);\n                        }\n                        const weeksEl = queryWeeksEl(currentMonthEl);\n                        if (weeksEl) {\n                            weeksEl.classList.add(weeksAnimationClass);\n                        }\n                        // animate new displayed month end\n                        const cleanUp = {\n                            \"useAnimation.useLayoutEffect.cleanUp\": ()=>{\n                                animatingRef.current = false;\n                                if (rootElRef.current) {\n                                    rootElRef.current.style.isolation = \"\";\n                                }\n                                if (navEl) {\n                                    navEl.style.zIndex = \"\";\n                                }\n                                if (captionEl) {\n                                    captionEl.classList.remove(captionAnimationClass);\n                                }\n                                if (weeksEl) {\n                                    weeksEl.classList.remove(weeksAnimationClass);\n                                }\n                                currentMonthEl.style.position = \"\";\n                                currentMonthEl.style.overflow = \"\";\n                                if (currentMonthEl.contains(previousMonthEl)) {\n                                    currentMonthEl.removeChild(previousMonthEl);\n                                }\n                            }\n                        }[\"useAnimation.useLayoutEffect.cleanUp\"];\n                        // animate old displayed month\n                        previousMonthEl.style.pointerEvents = \"none\";\n                        previousMonthEl.style.position = \"absolute\";\n                        previousMonthEl.style.overflow = \"hidden\";\n                        previousMonthEl.setAttribute(\"aria-hidden\", \"true\");\n                        // hide the weekdays container of the old month and only the new one\n                        const previousWeekdaysEl = queryWeekdaysEl(previousMonthEl);\n                        if (previousWeekdaysEl) {\n                            previousWeekdaysEl.style.opacity = \"0\";\n                        }\n                        const previousCaptionEl = queryCaptionEl(previousMonthEl);\n                        if (previousCaptionEl) {\n                            previousCaptionEl.classList.add(isAfterPreviousMonth ? classNames[Animation.caption_before_exit] : classNames[Animation.caption_after_exit]);\n                            previousCaptionEl.addEventListener(\"animationend\", cleanUp);\n                        }\n                        const previousWeeksEl = queryWeeksEl(previousMonthEl);\n                        if (previousWeeksEl) {\n                            previousWeeksEl.classList.add(isAfterPreviousMonth ? classNames[Animation.weeks_before_exit] : classNames[Animation.weeks_after_exit]);\n                        }\n                        currentMonthEl.insertBefore(previousMonthEl, currentMonthEl.firstChild);\n                    }\n                }[\"useAnimation.useLayoutEffect\"]);\n            }\n        }\n    }[\"useAnimation.useLayoutEffect\"]);\n}\n/**\n * Returns all the dates to display in the calendar.\n *\n * This function calculates the range of dates to display based on the provided\n * display months, constraints, and calendar configuration.\n *\n * @param displayMonths The months to display in the calendar.\n * @param maxDate The maximum date to include in the range.\n * @param props The DayPicker props, including calendar configuration options.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dates to display in the calendar.\n */ function getDates(displayMonths, maxDate, props, dateLib) {\n    const firstMonth = displayMonths[0];\n    const lastMonth = displayMonths[displayMonths.length - 1];\n    const { ISOWeek, fixedWeeks, broadcastCalendar } = props ?? {};\n    const { addDays, differenceInCalendarDays, differenceInCalendarMonths, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, isAfter, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;\n    const startWeekFirstDate = broadcastCalendar ? startOfBroadcastWeek(firstMonth, dateLib) : ISOWeek ? startOfISOWeek(firstMonth) : startOfWeek(firstMonth);\n    const endWeekLastDate = broadcastCalendar ? endOfBroadcastWeek(lastMonth) : ISOWeek ? endOfISOWeek(endOfMonth(lastMonth)) : endOfWeek(endOfMonth(lastMonth));\n    const nOfDays = differenceInCalendarDays(endWeekLastDate, startWeekFirstDate);\n    const nOfMonths = differenceInCalendarMonths(lastMonth, firstMonth) + 1;\n    const dates = [];\n    for(let i = 0; i <= nOfDays; i++){\n        const date = addDays(startWeekFirstDate, i);\n        if (maxDate && isAfter(date, maxDate)) {\n            break;\n        }\n        dates.push(date);\n    }\n    // If fixed weeks is enabled, add the extra dates to the array\n    const nrOfDaysWithFixedWeeks = broadcastCalendar ? 35 : 42;\n    const extraDates = nrOfDaysWithFixedWeeks * nOfMonths;\n    if (fixedWeeks && dates.length < extraDates) {\n        const daysToAdd = extraDates - dates.length;\n        for(let i = 0; i < daysToAdd; i++){\n            const date = addDays(dates[dates.length - 1], 1);\n            dates.push(date);\n        }\n    }\n    return dates;\n}\n/**\n * Returns all the days belonging to the calendar by merging the days in the\n * weeks for each month.\n *\n * @param calendarMonths The array of calendar months.\n * @returns An array of `CalendarDay` objects representing all the days in the\n *   calendar.\n */ function getDays(calendarMonths) {\n    const initialDays = [];\n    return calendarMonths.reduce((days, month)=>{\n        const weekDays = month.weeks.reduce((weekDays, week)=>{\n            return weekDays.concat(week.days.slice());\n        }, initialDays.slice());\n        return days.concat(weekDays.slice());\n    }, initialDays.slice());\n}\n/**\n * Returns the months to display in the calendar.\n *\n * @param firstDisplayedMonth The first month currently displayed in the\n *   calendar.\n * @param calendarEndMonth The latest month the user can navigate to.\n * @param props The DayPicker props, including `numberOfMonths`.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of dates representing the months to display.\n */ function getDisplayMonths(firstDisplayedMonth, calendarEndMonth, props, dateLib) {\n    const { numberOfMonths = 1 } = props;\n    const months = [];\n    for(let i = 0; i < numberOfMonths; i++){\n        const month = dateLib.addMonths(firstDisplayedMonth, i);\n        if (calendarEndMonth && month > calendarEndMonth) {\n            break;\n        }\n        months.push(month);\n    }\n    return months;\n}\n/**\n * Determines the initial month to display in the calendar based on the provided\n * props.\n *\n * This function calculates the starting month, considering constraints such as\n * `startMonth`, `endMonth`, and the number of months to display.\n *\n * @param props The DayPicker props, including navigation and date constraints.\n * @param dateLib The date library to use for date manipulation.\n * @returns The initial month to display.\n */ function getInitialMonth(props, navStart, navEnd, dateLib) {\n    const { month, defaultMonth, today = dateLib.today(), numberOfMonths = 1 } = props;\n    let initialMonth = month || defaultMonth || today;\n    const { differenceInCalendarMonths, addMonths, startOfMonth } = dateLib;\n    if (navEnd && differenceInCalendarMonths(navEnd, initialMonth) < numberOfMonths - 1) {\n        const offset = -1 * (numberOfMonths - 1);\n        initialMonth = addMonths(navEnd, offset);\n    }\n    if (navStart && differenceInCalendarMonths(initialMonth, navStart) < 0) {\n        initialMonth = navStart;\n    }\n    return startOfMonth(initialMonth);\n}\n/**\n * Returns the months to display in the calendar.\n *\n * This function generates `CalendarMonth` objects for each month to be\n * displayed, including their weeks and days, based on the provided display\n * months and dates.\n *\n * @param displayMonths The months (as dates) to display in the calendar.\n * @param dates The dates to display in the calendar.\n * @param props Options from the DayPicker props context.\n * @param dateLib The date library to use for date manipulation.\n * @returns An array of `CalendarMonth` objects representing the months to\n *   display.\n */ function getMonths(displayMonths, dates, props, dateLib) {\n    const { addDays, endOfBroadcastWeek, endOfISOWeek, endOfMonth, endOfWeek, getISOWeek, getWeek, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;\n    const dayPickerMonths = displayMonths.reduce((months, month)=>{\n        const firstDateOfFirstWeek = props.broadcastCalendar ? startOfBroadcastWeek(month, dateLib) : props.ISOWeek ? startOfISOWeek(month) : startOfWeek(month);\n        const lastDateOfLastWeek = props.broadcastCalendar ? endOfBroadcastWeek(month) : props.ISOWeek ? endOfISOWeek(endOfMonth(month)) : endOfWeek(endOfMonth(month));\n        /** The dates to display in the month. */ const monthDates = dates.filter((date)=>{\n            return date >= firstDateOfFirstWeek && date <= lastDateOfLastWeek;\n        });\n        const nrOfDaysWithFixedWeeks = props.broadcastCalendar ? 35 : 42;\n        if (props.fixedWeeks && monthDates.length < nrOfDaysWithFixedWeeks) {\n            const extraDates = dates.filter((date)=>{\n                const daysToAdd = nrOfDaysWithFixedWeeks - monthDates.length;\n                return date > lastDateOfLastWeek && date <= addDays(lastDateOfLastWeek, daysToAdd);\n            });\n            monthDates.push(...extraDates);\n        }\n        const weeks = monthDates.reduce((weeks, date)=>{\n            const weekNumber = props.ISOWeek ? getISOWeek(date) : getWeek(date);\n            const week = weeks.find((week)=>week.weekNumber === weekNumber);\n            const day = new CalendarDay(date, month, dateLib);\n            if (!week) {\n                weeks.push(new CalendarWeek(weekNumber, [\n                    day\n                ]));\n            } else {\n                week.days.push(day);\n            }\n            return weeks;\n        }, []);\n        const dayPickerMonth = new CalendarMonth(month, weeks);\n        months.push(dayPickerMonth);\n        return months;\n    }, []);\n    if (!props.reverseMonths) {\n        return dayPickerMonths;\n    } else {\n        return dayPickerMonths.reverse();\n    }\n}\n/**\n * Returns the start and end months for calendar navigation.\n *\n * @param props The DayPicker props, including navigation and layout options.\n * @param dateLib The date library to use for date manipulation.\n * @returns A tuple containing the start and end months for navigation.\n */ function getNavMonths(props, dateLib) {\n    let { startMonth, endMonth } = props;\n    const { startOfYear, startOfDay, startOfMonth, endOfMonth, addYears, endOfYear, newDate, today } = dateLib;\n    // Handle deprecated code\n    const { fromYear, toYear, fromMonth, toMonth } = props;\n    if (!startMonth && fromMonth) {\n        startMonth = fromMonth;\n    }\n    if (!startMonth && fromYear) {\n        startMonth = dateLib.newDate(fromYear, 0, 1);\n    }\n    if (!endMonth && toMonth) {\n        endMonth = toMonth;\n    }\n    if (!endMonth && toYear) {\n        endMonth = newDate(toYear, 11, 31);\n    }\n    const hasYearDropdown = props.captionLayout === \"dropdown\" || props.captionLayout === \"dropdown-years\";\n    if (startMonth) {\n        startMonth = startOfMonth(startMonth);\n    } else if (fromYear) {\n        startMonth = newDate(fromYear, 0, 1);\n    } else if (!startMonth && hasYearDropdown) {\n        startMonth = startOfYear(addYears(props.today ?? today(), -100));\n    }\n    if (endMonth) {\n        endMonth = endOfMonth(endMonth);\n    } else if (toYear) {\n        endMonth = newDate(toYear, 11, 31);\n    } else if (!endMonth && hasYearDropdown) {\n        endMonth = endOfYear(props.today ?? today());\n    }\n    return [\n        startMonth ? startOfDay(startMonth) : startMonth,\n        endMonth ? startOfDay(endMonth) : endMonth\n    ];\n}\n/**\n * Returns the next month the user can navigate to, based on the given options.\n *\n * The next month is not always the next calendar month:\n *\n * - If it is after the `calendarEndMonth`, it returns `undefined`.\n * - If paged navigation is enabled, it skips forward by the number of displayed\n *   months.\n *\n * @param firstDisplayedMonth The first month currently displayed in the\n *   calendar.\n * @param calendarEndMonth The latest month the user can navigate to.\n * @param options Navigation options, including `numberOfMonths` and\n *   `pagedNavigation`.\n * @param dateLib The date library to use for date manipulation.\n * @returns The next month, or `undefined` if navigation is not possible.\n */ function getNextMonth(firstDisplayedMonth, calendarEndMonth, options, dateLib) {\n    if (options.disableNavigation) {\n        return undefined;\n    }\n    const { pagedNavigation, numberOfMonths = 1 } = options;\n    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;\n    const offset = pagedNavigation ? numberOfMonths : 1;\n    const month = startOfMonth(firstDisplayedMonth);\n    if (!calendarEndMonth) {\n        return addMonths(month, offset);\n    }\n    const monthsDiff = differenceInCalendarMonths(calendarEndMonth, firstDisplayedMonth);\n    if (monthsDiff < numberOfMonths) {\n        return undefined;\n    }\n    return addMonths(month, offset);\n}\n/**\n * Returns the previous month the user can navigate to, based on the given\n * options.\n *\n * The previous month is not always the previous calendar month:\n *\n * - If it is before the `calendarStartMonth`, it returns `undefined`.\n * - If paged navigation is enabled, it skips back by the number of displayed\n *   months.\n *\n * @param firstDisplayedMonth The first month currently displayed in the\n *   calendar.\n * @param calendarStartMonth The earliest month the user can navigate to.\n * @param options Navigation options, including `numberOfMonths` and\n *   `pagedNavigation`.\n * @param dateLib The date library to use for date manipulation.\n * @returns The previous month, or `undefined` if navigation is not possible.\n */ function getPreviousMonth(firstDisplayedMonth, calendarStartMonth, options, dateLib) {\n    if (options.disableNavigation) {\n        return undefined;\n    }\n    const { pagedNavigation, numberOfMonths } = options;\n    const { startOfMonth, addMonths, differenceInCalendarMonths } = dateLib;\n    const offset = pagedNavigation ? numberOfMonths ?? 1 : 1;\n    const month = startOfMonth(firstDisplayedMonth);\n    if (!calendarStartMonth) {\n        return addMonths(month, -offset);\n    }\n    const monthsDiff = differenceInCalendarMonths(month, calendarStartMonth);\n    if (monthsDiff <= 0) {\n        return undefined;\n    }\n    return addMonths(month, -offset);\n}\n/**\n * Returns an array of calendar weeks from an array of calendar months.\n *\n * @param months The array of calendar months.\n * @returns An array of calendar weeks.\n */ function getWeeks(months) {\n    const initialWeeks = [];\n    return months.reduce((weeks, month)=>{\n        return weeks.concat(month.weeks.slice());\n    }, initialWeeks.slice());\n}\n/**\n * A custom hook for managing both controlled and uncontrolled component states.\n *\n * This hook allows a component to support both controlled and uncontrolled\n * states by determining whether the `controlledValue` is provided. If it is\n * undefined, the hook falls back to using the internal state.\n *\n * @example\n *   // Uncontrolled usage\n *   const [value, setValue] = useControlledValue(0, undefined);\n *\n *   // Controlled usage\n *   const [value, setValue] = useControlledValue(0, props.value);\n *\n * @template T - The type of the value.\n * @param defaultValue The initial value for the uncontrolled state.\n * @param controlledValue The value for the controlled state. If undefined, the\n *   component will use the uncontrolled state.\n * @returns A tuple where the first element is the current value (either\n *   controlled or uncontrolled) and the second element is a setter function to\n *   update the value.\n */ function useControlledValue(defaultValue, controlledValue) {\n    const [uncontrolledValue, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultValue);\n    const value = controlledValue === undefined ? uncontrolledValue : controlledValue;\n    return [\n        value,\n        setValue\n    ];\n}\n/**\n * Provides the calendar object to work with the calendar in custom components.\n *\n * @private\n * @param props - The DayPicker props related to calendar configuration.\n * @param dateLib - The date utility library instance.\n * @returns The calendar object containing displayed days, weeks, months, and\n *   navigation methods.\n */ function useCalendar(props, dateLib) {\n    const [navStart, navEnd] = getNavMonths(props, dateLib);\n    const { startOfMonth, endOfMonth } = dateLib;\n    const initialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n    const [firstMonth, setFirstMonth] = useControlledValue(initialMonth, props.month ? initialMonth : undefined);\n    // biome-ignore lint/correctness/useExhaustiveDependencies: change the initial month when the time zone changes.\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useCalendar.useEffect\": ()=>{\n            const newInitialMonth = getInitialMonth(props, navStart, navEnd, dateLib);\n            setFirstMonth(newInitialMonth);\n        }\n    }[\"useCalendar.useEffect\"], [\n        props.timeZone\n    ]);\n    /** The months displayed in the calendar. */ const displayMonths = getDisplayMonths(firstMonth, navEnd, props, dateLib);\n    /** The dates displayed in the calendar. */ const dates = getDates(displayMonths, props.endMonth ? endOfMonth(props.endMonth) : undefined, props, dateLib);\n    /** The Months displayed in the calendar. */ const months = getMonths(displayMonths, dates, props, dateLib);\n    /** The Weeks displayed in the calendar. */ const weeks = getWeeks(months);\n    /** The Days displayed in the calendar. */ const days = getDays(months);\n    const previousMonth = getPreviousMonth(firstMonth, navStart, props, dateLib);\n    const nextMonth = getNextMonth(firstMonth, navEnd, props, dateLib);\n    const { disableNavigation, onMonthChange } = props;\n    const isDayInCalendar = (day)=>weeks.some((week)=>week.days.some((d)=>d.isEqualTo(day)));\n    const goToMonth = (date)=>{\n        if (disableNavigation) {\n            return;\n        }\n        let newMonth = startOfMonth(date);\n        // if month is before start, use the first month instead\n        if (navStart && newMonth < startOfMonth(navStart)) {\n            newMonth = startOfMonth(navStart);\n        }\n        // if month is after endMonth, use the last month instead\n        if (navEnd && newMonth > startOfMonth(navEnd)) {\n            newMonth = startOfMonth(navEnd);\n        }\n        setFirstMonth(newMonth);\n        onMonthChange?.(newMonth);\n    };\n    const goToDay = (day)=>{\n        // is this check necessary?\n        if (isDayInCalendar(day)) {\n            return;\n        }\n        goToMonth(day.date);\n    };\n    const calendar = {\n        months,\n        weeks,\n        days,\n        navStart,\n        navEnd,\n        previousMonth,\n        nextMonth,\n        goToMonth,\n        goToDay\n    };\n    return calendar;\n}\nvar FocusTargetPriority;\n(function(FocusTargetPriority) {\n    FocusTargetPriority[FocusTargetPriority[\"Today\"] = 0] = \"Today\";\n    FocusTargetPriority[FocusTargetPriority[\"Selected\"] = 1] = \"Selected\";\n    FocusTargetPriority[FocusTargetPriority[\"LastFocused\"] = 2] = \"LastFocused\";\n    FocusTargetPriority[FocusTargetPriority[\"FocusedModifier\"] = 3] = \"FocusedModifier\";\n})(FocusTargetPriority || (FocusTargetPriority = {}));\n/**\n * Determines if a day is focusable based on its modifiers.\n *\n * A day is considered focusable if it is not disabled, hidden, or outside the\n * displayed month.\n *\n * @param modifiers The modifiers applied to the day.\n * @returns `true` if the day is focusable, otherwise `false`.\n */ function isFocusableDay(modifiers) {\n    return !modifiers[DayFlag.disabled] && !modifiers[DayFlag.hidden] && !modifiers[DayFlag.outside];\n}\n/**\n * Calculates the focus target day based on priority.\n *\n * This function determines the day that should receive focus in the calendar,\n * prioritizing days with specific modifiers (e.g., \"focused\", \"today\") or\n * selection states.\n *\n * @param days The array of `CalendarDay` objects to evaluate.\n * @param getModifiers A function to retrieve the modifiers for a given day.\n * @param isSelected A function to determine if a day is selected.\n * @param lastFocused The last focused day, if any.\n * @returns The `CalendarDay` that should receive focus, or `undefined` if no\n *   focusable day is found.\n */ function calculateFocusTarget(days, getModifiers, isSelected, lastFocused) {\n    let focusTarget;\n    let foundFocusTargetPriority = -1;\n    for (const day of days){\n        const modifiers = getModifiers(day);\n        if (isFocusableDay(modifiers)) {\n            if (modifiers[DayFlag.focused] && foundFocusTargetPriority < FocusTargetPriority.FocusedModifier) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.FocusedModifier;\n            } else if (lastFocused?.isEqualTo(day) && foundFocusTargetPriority < FocusTargetPriority.LastFocused) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.LastFocused;\n            } else if (isSelected(day.date) && foundFocusTargetPriority < FocusTargetPriority.Selected) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.Selected;\n            } else if (modifiers[DayFlag.today] && foundFocusTargetPriority < FocusTargetPriority.Today) {\n                focusTarget = day;\n                foundFocusTargetPriority = FocusTargetPriority.Today;\n            }\n        }\n    }\n    if (!focusTarget) {\n        // Return the first day that is focusable\n        focusTarget = days.find((day)=>isFocusableDay(getModifiers(day)));\n    }\n    return focusTarget;\n}\n/**\n * Calculates the next date that should be focused in the calendar.\n *\n * This function determines the next focusable date based on the movement\n * direction, constraints, and calendar configuration.\n *\n * @param moveBy The unit of movement (e.g., \"day\", \"week\").\n * @param moveDir The direction of movement (\"before\" or \"after\").\n * @param refDate The reference date from which to calculate the next focusable\n *   date.\n * @param navStart The earliest date the user can navigate to.\n * @param navEnd The latest date the user can navigate to.\n * @param props The DayPicker props, including calendar configuration options.\n * @param dateLib The date library to use for date manipulation.\n * @returns The next focusable date.\n */ function getFocusableDate(moveBy, moveDir, refDate, navStart, navEnd, props, dateLib) {\n    const { ISOWeek, broadcastCalendar } = props;\n    const { addDays, addMonths, addWeeks, addYears, endOfBroadcastWeek, endOfISOWeek, endOfWeek, max, min, startOfBroadcastWeek, startOfISOWeek, startOfWeek } = dateLib;\n    const moveFns = {\n        day: addDays,\n        week: addWeeks,\n        month: addMonths,\n        year: addYears,\n        startOfWeek: (date)=>broadcastCalendar ? startOfBroadcastWeek(date, dateLib) : ISOWeek ? startOfISOWeek(date) : startOfWeek(date),\n        endOfWeek: (date)=>broadcastCalendar ? endOfBroadcastWeek(date) : ISOWeek ? endOfISOWeek(date) : endOfWeek(date)\n    };\n    let focusableDate = moveFns[moveBy](refDate, moveDir === \"after\" ? 1 : -1);\n    if (moveDir === \"before\" && navStart) {\n        focusableDate = max([\n            navStart,\n            focusableDate\n        ]);\n    } else if (moveDir === \"after\" && navEnd) {\n        focusableDate = min([\n            navEnd,\n            focusableDate\n        ]);\n    }\n    return focusableDate;\n}\n/**\n * Determines the next focusable day in the calendar.\n *\n * This function recursively calculates the next focusable day based on the\n * movement direction and modifiers applied to the days.\n *\n * @param moveBy The unit of movement (e.g., \"day\", \"week\").\n * @param moveDir The direction of movement (\"before\" or \"after\").\n * @param refDay The currently focused day.\n * @param calendarStartMonth The earliest month the user can navigate to.\n * @param calendarEndMonth The latest month the user can navigate to.\n * @param props The DayPicker props, including modifiers and configuration\n *   options.\n * @param dateLib The date library to use for date manipulation.\n * @param attempt The current recursion attempt (used to limit recursion depth).\n * @returns The next focusable day, or `undefined` if no focusable day is found.\n */ function getNextFocus(moveBy, moveDir, refDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt = 0) {\n    if (attempt > 365) {\n        // Limit the recursion to 365 attempts\n        return undefined;\n    }\n    const focusableDate = getFocusableDate(moveBy, moveDir, refDay.date, calendarStartMonth, calendarEndMonth, props, dateLib);\n    const isDisabled = Boolean(props.disabled && dateMatchModifiers(focusableDate, props.disabled, dateLib));\n    const isHidden = Boolean(props.hidden && dateMatchModifiers(focusableDate, props.hidden, dateLib));\n    const targetMonth = focusableDate;\n    const focusDay = new CalendarDay(focusableDate, targetMonth, dateLib);\n    if (!isDisabled && !isHidden) {\n        return focusDay;\n    }\n    // Recursively attempt to find the next focusable date\n    return getNextFocus(moveBy, moveDir, focusDay, calendarStartMonth, calendarEndMonth, props, dateLib, attempt + 1);\n}\n/**\n * Manages focus behavior for the DayPicker component, including setting,\n * moving, and blurring focus on calendar days.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param calendar - The calendar object containing the displayed days and\n *   months.\n * @param getModifiers - A function to retrieve modifiers for a given day.\n * @param isSelected - A function to check if a date is selected.\n * @param dateLib - The date utility library instance.\n * @returns An object containing focus-related methods and the currently focused\n *   day.\n */ function useFocus(props, calendar, getModifiers, isSelected, dateLib) {\n    const { autoFocus } = props;\n    const [lastFocused, setLastFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const focusTarget = calculateFocusTarget(calendar.days, getModifiers, isSelected || (()=>false), lastFocused);\n    const [focusedDay, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(autoFocus ? focusTarget : undefined);\n    const blur = ()=>{\n        setLastFocused(focusedDay);\n        setFocused(undefined);\n    };\n    const moveFocus = (moveBy, moveDir)=>{\n        if (!focusedDay) return;\n        const nextFocus = getNextFocus(moveBy, moveDir, focusedDay, calendar.navStart, calendar.navEnd, props, dateLib);\n        if (!nextFocus) return;\n        calendar.goToDay(nextFocus);\n        setFocused(nextFocus);\n    };\n    const isFocusTarget = (day)=>{\n        return Boolean(focusTarget?.isEqualTo(day));\n    };\n    const useFocus = {\n        isFocusTarget,\n        setFocused,\n        focused: focusedDay,\n        blur,\n        moveFocus\n    };\n    return useFocus;\n}\n/**\n * Hook to manage multiple-date selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected dates, a function to select dates,\n *   and a function to check if a date is selected.\n */ function useMulti(props, dateLib) {\n    const { selected: initiallySelected, required, onSelect } = props;\n    const [internallySelected, setSelected] = useControlledValue(initiallySelected, onSelect ? initiallySelected : undefined);\n    const selected = !onSelect ? internallySelected : initiallySelected;\n    const { isSameDay } = dateLib;\n    const isSelected = (date)=>{\n        return selected?.some((d)=>isSameDay(d, date)) ?? false;\n    };\n    const { min, max } = props;\n    const select = (triggerDate, modifiers, e)=>{\n        let newDates = [\n            ...selected ?? []\n        ];\n        if (isSelected(triggerDate)) {\n            if (selected?.length === min) {\n                // Min value reached, do nothing\n                return;\n            }\n            if (required && selected?.length === 1) {\n                // Required value already selected do nothing\n                return;\n            }\n            newDates = selected?.filter((d)=>!isSameDay(d, triggerDate));\n        } else {\n            if (selected?.length === max) {\n                // Max value reached, reset the selection to date\n                newDates = [\n                    triggerDate\n                ];\n            } else {\n                // Add the date to the selection\n                newDates = [\n                    ...newDates,\n                    triggerDate\n                ];\n            }\n        }\n        if (!onSelect) {\n            setSelected(newDates);\n        }\n        onSelect?.(newDates, triggerDate, modifiers, e);\n        return newDates;\n    };\n    return {\n        selected,\n        select,\n        isSelected\n    };\n}\n/**\n * Adds a date to an existing range, considering constraints like minimum and\n * maximum range size.\n *\n * @param date - The date to add to the range.\n * @param initialRange - The initial range to which the date will be added.\n * @param min - The minimum number of days in the range.\n * @param max - The maximum number of days in the range.\n * @param required - Whether the range must always include at least one date.\n * @param dateLib - The date utility library instance.\n * @returns The updated date range, or `undefined` if the range is cleared.\n * @group Utilities\n */ function addToRange(date, initialRange, min = 0, max = 0, required = false, dateLib = defaultDateLib) {\n    const { from, to } = initialRange || {};\n    const { isSameDay, isAfter, isBefore } = dateLib;\n    let range;\n    if (!from && !to) {\n        // the range is empty, add the date\n        range = {\n            from: date,\n            to: min > 0 ? undefined : date\n        };\n    } else if (from && !to) {\n        // adding date to an incomplete range\n        if (isSameDay(from, date)) {\n            // adding a date equal to the start of the range\n            if (min === 0) {\n                range = {\n                    from,\n                    to: date\n                };\n            } else if (required) {\n                range = {\n                    from,\n                    to: undefined\n                };\n            } else {\n                range = undefined;\n            }\n        } else if (isBefore(date, from)) {\n            // adding a date before the start of the range\n            range = {\n                from: date,\n                to: from\n            };\n        } else {\n            // adding a date after the start of the range\n            range = {\n                from,\n                to: date\n            };\n        }\n    } else if (from && to) {\n        // adding date to a complete range\n        if (isSameDay(from, date) && isSameDay(to, date)) {\n            // adding a date that is equal to both start and end of the range\n            if (required) {\n                range = {\n                    from,\n                    to\n                };\n            } else {\n                range = undefined;\n            }\n        } else if (isSameDay(from, date)) {\n            // adding a date equal to the the start of the range\n            range = {\n                from,\n                to: min > 0 ? undefined : date\n            };\n        } else if (isSameDay(to, date)) {\n            // adding a dare equal to the end of the range\n            range = {\n                from: date,\n                to: min > 0 ? undefined : date\n            };\n        } else if (isBefore(date, from)) {\n            // adding a date before the start of the range\n            range = {\n                from: date,\n                to: to\n            };\n        } else if (isAfter(date, from)) {\n            // adding a date after the start of the range\n            range = {\n                from,\n                to: date\n            };\n        } else if (isAfter(date, to)) {\n            // adding a date after the end of the range\n            range = {\n                from,\n                to: date\n            };\n        } else {\n            throw new Error(\"Invalid range\");\n        }\n    }\n    // check for min / max\n    if (range?.from && range?.to) {\n        const diff = dateLib.differenceInCalendarDays(range.to, range.from);\n        if (max > 0 && diff > max) {\n            range = {\n                from: date,\n                to: undefined\n            };\n        } else if (min > 1 && diff < min) {\n            range = {\n                from: date,\n                to: undefined\n            };\n        }\n    }\n    return range;\n}\n/**\n * Checks if a date range contains one or more specified days of the week.\n *\n * @since 9.2.2\n * @param range - The date range to check.\n * @param dayOfWeek - The day(s) of the week to check for (`0-6`, where `0` is\n *   Sunday).\n * @param dateLib - The date utility library instance.\n * @returns `true` if the range contains the specified day(s) of the week,\n *   otherwise `false`.\n * @group Utilities\n */ function rangeContainsDayOfWeek(range, dayOfWeek, dateLib = defaultDateLib) {\n    const dayOfWeekArr = !Array.isArray(dayOfWeek) ? [\n        dayOfWeek\n    ] : dayOfWeek;\n    let date = range.from;\n    const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);\n    // iterate at maximum one week or the total days if the range is shorter than one week\n    const totalDaysLimit = Math.min(totalDays, 6);\n    for(let i = 0; i <= totalDaysLimit; i++){\n        if (dayOfWeekArr.includes(date.getDay())) {\n            return true;\n        }\n        date = dateLib.addDays(date, 1);\n    }\n    return false;\n}\n/**\n * Determines if two date ranges overlap.\n *\n * @since 9.2.2\n * @param rangeLeft - The first date range.\n * @param rangeRight - The second date range.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the ranges overlap, otherwise `false`.\n * @group Utilities\n */ function rangeOverlaps(rangeLeft, rangeRight, dateLib = defaultDateLib) {\n    return rangeIncludesDate(rangeLeft, rangeRight.from, false, dateLib) || rangeIncludesDate(rangeLeft, rangeRight.to, false, dateLib) || rangeIncludesDate(rangeRight, rangeLeft.from, false, dateLib) || rangeIncludesDate(rangeRight, rangeLeft.to, false, dateLib);\n}\n/**\n * Checks if a date range contains dates that match the given modifiers.\n *\n * @since 9.2.2\n * @param range - The date range to check.\n * @param modifiers - The modifiers to match against.\n * @param dateLib - The date utility library instance.\n * @returns `true` if the range contains matching dates, otherwise `false`.\n * @group Utilities\n */ function rangeContainsModifiers(range, modifiers, dateLib = defaultDateLib) {\n    const matchers = Array.isArray(modifiers) ? modifiers : [\n        modifiers\n    ];\n    // Defer function matchers evaluation as they are the least performant.\n    const nonFunctionMatchers = matchers.filter((matcher)=>typeof matcher !== \"function\");\n    const nonFunctionMatchersResult = nonFunctionMatchers.some((matcher)=>{\n        if (typeof matcher === \"boolean\") return matcher;\n        if (dateLib.isDate(matcher)) {\n            return rangeIncludesDate(range, matcher, false, dateLib);\n        }\n        if (isDatesArray(matcher, dateLib)) {\n            return matcher.some((date)=>rangeIncludesDate(range, date, false, dateLib));\n        }\n        if (isDateRange(matcher)) {\n            if (matcher.from && matcher.to) {\n                return rangeOverlaps(range, {\n                    from: matcher.from,\n                    to: matcher.to\n                }, dateLib);\n            }\n            return false;\n        }\n        if (isDayOfWeekType(matcher)) {\n            return rangeContainsDayOfWeek(range, matcher.dayOfWeek, dateLib);\n        }\n        if (isDateInterval(matcher)) {\n            const isClosedInterval = dateLib.isAfter(matcher.before, matcher.after);\n            if (isClosedInterval) {\n                return rangeOverlaps(range, {\n                    from: dateLib.addDays(matcher.after, 1),\n                    to: dateLib.addDays(matcher.before, -1)\n                }, dateLib);\n            }\n            return dateMatchModifiers(range.from, matcher, dateLib) || dateMatchModifiers(range.to, matcher, dateLib);\n        }\n        if (isDateAfterType(matcher) || isDateBeforeType(matcher)) {\n            return dateMatchModifiers(range.from, matcher, dateLib) || dateMatchModifiers(range.to, matcher, dateLib);\n        }\n        return false;\n    });\n    if (nonFunctionMatchersResult) {\n        return true;\n    }\n    const functionMatchers = matchers.filter((matcher)=>typeof matcher === \"function\");\n    if (functionMatchers.length) {\n        let date = range.from;\n        const totalDays = dateLib.differenceInCalendarDays(range.to, range.from);\n        for(let i = 0; i <= totalDays; i++){\n            if (functionMatchers.some((matcher)=>matcher(date))) {\n                return true;\n            }\n            date = dateLib.addDays(date, 1);\n        }\n    }\n    return false;\n}\n/**\n * Hook to manage range selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected range, a function to select a\n *   range, and a function to check if a date is within the range.\n */ function useRange(props, dateLib) {\n    const { disabled, excludeDisabled, selected: initiallySelected, required, onSelect } = props;\n    const [internallySelected, setSelected] = useControlledValue(initiallySelected, onSelect ? initiallySelected : undefined);\n    const selected = !onSelect ? internallySelected : initiallySelected;\n    const isSelected = (date)=>selected && rangeIncludesDate(selected, date, false, dateLib);\n    const select = (triggerDate, modifiers, e)=>{\n        const { min, max } = props;\n        const newRange = triggerDate ? addToRange(triggerDate, selected, min, max, required, dateLib) : undefined;\n        if (excludeDisabled && disabled && newRange?.from && newRange.to) {\n            if (rangeContainsModifiers({\n                from: newRange.from,\n                to: newRange.to\n            }, disabled, dateLib)) {\n                // if a disabled days is found, the range is reset\n                newRange.from = triggerDate;\n                newRange.to = undefined;\n            }\n        }\n        if (!onSelect) {\n            setSelected(newRange);\n        }\n        onSelect?.(newRange, triggerDate, modifiers, e);\n        return newRange;\n    };\n    return {\n        selected,\n        select,\n        isSelected\n    };\n}\n/**\n * Hook to manage single-date selection in the DayPicker component.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns An object containing the selected date, a function to select a date,\n *   and a function to check if a date is selected.\n */ function useSingle(props, dateLib) {\n    const { selected: initiallySelected, required, onSelect } = props;\n    const [internallySelected, setSelected] = useControlledValue(initiallySelected, onSelect ? initiallySelected : undefined);\n    const selected = !onSelect ? internallySelected : initiallySelected;\n    const { isSameDay } = dateLib;\n    const isSelected = (compareDate)=>{\n        return selected ? isSameDay(selected, compareDate) : false;\n    };\n    const select = (triggerDate, modifiers, e)=>{\n        let newDate = triggerDate;\n        if (!required && selected && selected && isSameDay(triggerDate, selected)) {\n            // If the date is the same, clear the selection.\n            newDate = undefined;\n        }\n        if (!onSelect) {\n            setSelected(newDate);\n        }\n        if (required) {\n            onSelect?.(newDate, triggerDate, modifiers, e);\n        } else {\n            onSelect?.(newDate, triggerDate, modifiers, e);\n        }\n        return newDate;\n    };\n    return {\n        selected,\n        select,\n        isSelected\n    };\n}\n/**\n * Determines the appropriate selection hook to use based on the selection mode\n * and returns the corresponding selection object.\n *\n * @template T - The type of DayPicker props.\n * @param props - The DayPicker props.\n * @param dateLib - The date utility library instance.\n * @returns The selection object for the specified mode, or `undefined` if no\n *   mode is set.\n */ function useSelection(props, dateLib) {\n    const single = useSingle(props, dateLib);\n    const multi = useMulti(props, dateLib);\n    const range = useRange(props, dateLib);\n    switch(props.mode){\n        case \"single\":\n            return single;\n        case \"multiple\":\n            return multi;\n        case \"range\":\n            return range;\n        default:\n            return undefined;\n    }\n}\n/**\n * Renders the DayPicker calendar component.\n *\n * @param initialProps - The props for the DayPicker component.\n * @returns The rendered DayPicker component.\n * @group DayPicker\n * @see https://daypicker.dev\n */ function DayPicker(initialProps) {\n    let props = initialProps;\n    if (props.timeZone) {\n        props = {\n            ...initialProps\n        };\n        if (props.today) {\n            props.today = new TZDate(props.today, props.timeZone);\n        }\n        if (props.month) {\n            props.month = new TZDate(props.month, props.timeZone);\n        }\n        if (props.defaultMonth) {\n            props.defaultMonth = new TZDate(props.defaultMonth, props.timeZone);\n        }\n        if (props.startMonth) {\n            props.startMonth = new TZDate(props.startMonth, props.timeZone);\n        }\n        if (props.endMonth) {\n            props.endMonth = new TZDate(props.endMonth, props.timeZone);\n        }\n        if (props.mode === \"single\" && props.selected) {\n            props.selected = new TZDate(props.selected, props.timeZone);\n        } else if (props.mode === \"multiple\" && props.selected) {\n            props.selected = props.selected?.map((date)=>new TZDate(date, props.timeZone));\n        } else if (props.mode === \"range\" && props.selected) {\n            props.selected = {\n                from: props.selected.from ? new TZDate(props.selected.from, props.timeZone) : undefined,\n                to: props.selected.to ? new TZDate(props.selected.to, props.timeZone) : undefined\n            };\n        }\n    }\n    const { components, formatters, labels, dateLib, locale, classNames } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"DayPicker.useMemo\": ()=>{\n            const locale = {\n                ...enUS,\n                ...props.locale\n            };\n            const dateLib = new DateLib({\n                locale,\n                weekStartsOn: props.broadcastCalendar ? 1 : props.weekStartsOn,\n                firstWeekContainsDate: props.firstWeekContainsDate,\n                useAdditionalWeekYearTokens: props.useAdditionalWeekYearTokens,\n                useAdditionalDayOfYearTokens: props.useAdditionalDayOfYearTokens,\n                timeZone: props.timeZone,\n                numerals: props.numerals\n            }, props.dateLib);\n            return {\n                dateLib,\n                components: getComponents(props.components),\n                formatters: getFormatters(props.formatters),\n                labels: {\n                    ...defaultLabels,\n                    ...props.labels\n                },\n                locale,\n                classNames: {\n                    ...getDefaultClassNames(),\n                    ...props.classNames\n                }\n            };\n        }\n    }[\"DayPicker.useMemo\"], [\n        props.locale,\n        props.broadcastCalendar,\n        props.weekStartsOn,\n        props.firstWeekContainsDate,\n        props.useAdditionalWeekYearTokens,\n        props.useAdditionalDayOfYearTokens,\n        props.timeZone,\n        props.numerals,\n        props.dateLib,\n        props.components,\n        props.formatters,\n        props.labels,\n        props.classNames\n    ]);\n    const { captionLayout, mode, navLayout, numberOfMonths = 1, onDayBlur, onDayClick, onDayFocus, onDayKeyDown, onDayMouseEnter, onDayMouseLeave, onNextClick, onPrevClick, showWeekNumber, styles } = props;\n    const { formatCaption, formatDay, formatMonthDropdown, formatWeekNumber, formatWeekNumberHeader, formatWeekdayName, formatYearDropdown } = formatters;\n    const calendar = useCalendar(props, dateLib);\n    const { days, months, navStart, navEnd, previousMonth, nextMonth, goToMonth } = calendar;\n    const getModifiers = createGetModifiers(days, props, navStart, navEnd, dateLib);\n    const { isSelected, select, selected: selectedValue } = useSelection(props, dateLib) ?? {};\n    const { blur, focused, isFocusTarget, moveFocus, setFocused } = useFocus(props, calendar, getModifiers, isSelected ?? ({\n        \"DayPicker.useFocus\": ()=>false\n    })[\"DayPicker.useFocus\"], dateLib);\n    const { labelDayButton, labelGridcell, labelGrid, labelMonthDropdown, labelNav, labelPrevious, labelNext, labelWeekday, labelWeekNumber, labelWeekNumberHeader, labelYearDropdown } = labels;\n    const weekdays = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"DayPicker.useMemo[weekdays]\": ()=>getWeekdays(dateLib, props.ISOWeek)\n    }[\"DayPicker.useMemo[weekdays]\"], [\n        dateLib,\n        props.ISOWeek\n    ]);\n    const isInteractive = mode !== undefined || onDayClick !== undefined;\n    const handlePreviousClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handlePreviousClick]\": ()=>{\n            if (!previousMonth) return;\n            goToMonth(previousMonth);\n            onPrevClick?.(previousMonth);\n        }\n    }[\"DayPicker.useCallback[handlePreviousClick]\"], [\n        previousMonth,\n        goToMonth,\n        onPrevClick\n    ]);\n    const handleNextClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleNextClick]\": ()=>{\n            if (!nextMonth) return;\n            goToMonth(nextMonth);\n            onNextClick?.(nextMonth);\n        }\n    }[\"DayPicker.useCallback[handleNextClick]\"], [\n        goToMonth,\n        nextMonth,\n        onNextClick\n    ]);\n    const handleDayClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayClick]\": (day, m)=>({\n                \"DayPicker.useCallback[handleDayClick]\": (e)=>{\n                    e.preventDefault();\n                    e.stopPropagation();\n                    setFocused(day);\n                    select?.(day.date, m, e);\n                    onDayClick?.(day.date, m, e);\n                }\n            })[\"DayPicker.useCallback[handleDayClick]\"]\n    }[\"DayPicker.useCallback[handleDayClick]\"], [\n        select,\n        onDayClick,\n        setFocused\n    ]);\n    const handleDayFocus = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayFocus]\": (day, m)=>({\n                \"DayPicker.useCallback[handleDayFocus]\": (e)=>{\n                    setFocused(day);\n                    onDayFocus?.(day.date, m, e);\n                }\n            })[\"DayPicker.useCallback[handleDayFocus]\"]\n    }[\"DayPicker.useCallback[handleDayFocus]\"], [\n        onDayFocus,\n        setFocused\n    ]);\n    const handleDayBlur = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayBlur]\": (day, m)=>({\n                \"DayPicker.useCallback[handleDayBlur]\": (e)=>{\n                    blur();\n                    onDayBlur?.(day.date, m, e);\n                }\n            })[\"DayPicker.useCallback[handleDayBlur]\"]\n    }[\"DayPicker.useCallback[handleDayBlur]\"], [\n        blur,\n        onDayBlur\n    ]);\n    const handleDayKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayKeyDown]\": (day, modifiers)=>({\n                \"DayPicker.useCallback[handleDayKeyDown]\": (e)=>{\n                    const keyMap = {\n                        ArrowLeft: [\n                            e.shiftKey ? \"month\" : \"day\",\n                            props.dir === \"rtl\" ? \"after\" : \"before\"\n                        ],\n                        ArrowRight: [\n                            e.shiftKey ? \"month\" : \"day\",\n                            props.dir === \"rtl\" ? \"before\" : \"after\"\n                        ],\n                        ArrowDown: [\n                            e.shiftKey ? \"year\" : \"week\",\n                            \"after\"\n                        ],\n                        ArrowUp: [\n                            e.shiftKey ? \"year\" : \"week\",\n                            \"before\"\n                        ],\n                        PageUp: [\n                            e.shiftKey ? \"year\" : \"month\",\n                            \"before\"\n                        ],\n                        PageDown: [\n                            e.shiftKey ? \"year\" : \"month\",\n                            \"after\"\n                        ],\n                        Home: [\n                            \"startOfWeek\",\n                            \"before\"\n                        ],\n                        End: [\n                            \"endOfWeek\",\n                            \"after\"\n                        ]\n                    };\n                    if (keyMap[e.key]) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        const [moveBy, moveDir] = keyMap[e.key];\n                        moveFocus(moveBy, moveDir);\n                    }\n                    onDayKeyDown?.(day.date, modifiers, e);\n                }\n            })[\"DayPicker.useCallback[handleDayKeyDown]\"]\n    }[\"DayPicker.useCallback[handleDayKeyDown]\"], [\n        moveFocus,\n        onDayKeyDown,\n        props.dir\n    ]);\n    const handleDayMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayMouseEnter]\": (day, modifiers)=>({\n                \"DayPicker.useCallback[handleDayMouseEnter]\": (e)=>{\n                    onDayMouseEnter?.(day.date, modifiers, e);\n                }\n            })[\"DayPicker.useCallback[handleDayMouseEnter]\"]\n    }[\"DayPicker.useCallback[handleDayMouseEnter]\"], [\n        onDayMouseEnter\n    ]);\n    const handleDayMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleDayMouseLeave]\": (day, modifiers)=>({\n                \"DayPicker.useCallback[handleDayMouseLeave]\": (e)=>{\n                    onDayMouseLeave?.(day.date, modifiers, e);\n                }\n            })[\"DayPicker.useCallback[handleDayMouseLeave]\"]\n    }[\"DayPicker.useCallback[handleDayMouseLeave]\"], [\n        onDayMouseLeave\n    ]);\n    const handleMonthChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleMonthChange]\": (date)=>({\n                \"DayPicker.useCallback[handleMonthChange]\": (e)=>{\n                    const selectedMonth = Number(e.target.value);\n                    const month = dateLib.setMonth(dateLib.startOfMonth(date), selectedMonth);\n                    goToMonth(month);\n                }\n            })[\"DayPicker.useCallback[handleMonthChange]\"]\n    }[\"DayPicker.useCallback[handleMonthChange]\"], [\n        dateLib,\n        goToMonth\n    ]);\n    const handleYearChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"DayPicker.useCallback[handleYearChange]\": (date)=>({\n                \"DayPicker.useCallback[handleYearChange]\": (e)=>{\n                    const selectedYear = Number(e.target.value);\n                    const month = dateLib.setYear(dateLib.startOfMonth(date), selectedYear);\n                    goToMonth(month);\n                }\n            })[\"DayPicker.useCallback[handleYearChange]\"]\n    }[\"DayPicker.useCallback[handleYearChange]\"], [\n        dateLib,\n        goToMonth\n    ]);\n    const { className, style } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"DayPicker.useMemo\": ()=>({\n                className: [\n                    classNames[UI.Root],\n                    props.className\n                ].filter(Boolean).join(\" \"),\n                style: {\n                    ...styles?.[UI.Root],\n                    ...props.style\n                }\n            })\n    }[\"DayPicker.useMemo\"], [\n        classNames,\n        props.className,\n        props.style,\n        styles\n    ]);\n    const dataAttributes = getDataAttributes(props);\n    const rootElRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    useAnimation(rootElRef, Boolean(props.animate), {\n        classNames,\n        months,\n        focused,\n        dateLib\n    });\n    const contextValue = {\n        dayPickerProps: props,\n        selected: selectedValue,\n        select: select,\n        isSelected,\n        months,\n        nextMonth,\n        previousMonth,\n        goToMonth,\n        getModifiers,\n        components,\n        classNames,\n        styles,\n        labels,\n        formatters\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(dayPickerContext.Provider, {\n        value: contextValue\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Root, {\n        rootRef: props.animate ? rootElRef : undefined,\n        className: className,\n        style: style,\n        dir: props.dir,\n        id: props.id,\n        lang: props.lang,\n        nonce: props.nonce,\n        title: props.title,\n        role: props.role,\n        \"aria-label\": props[\"aria-label\"],\n        ...dataAttributes\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Months, {\n        className: classNames[UI.Months],\n        style: styles?.[UI.Months]\n    }, !props.hideNavigation && !navLayout && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Nav, {\n        \"data-animated-nav\": props.animate ? \"true\" : undefined,\n        className: classNames[UI.Nav],\n        style: styles?.[UI.Nav],\n        \"aria-label\": labelNav(),\n        onPreviousClick: handlePreviousClick,\n        onNextClick: handleNextClick,\n        previousMonth: previousMonth,\n        nextMonth: nextMonth\n    }), months.map((calendarMonth, displayIndex)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Month, {\n            \"data-animated-month\": props.animate ? \"true\" : undefined,\n            className: classNames[UI.Month],\n            style: styles?.[UI.Month],\n            // biome-ignore lint/suspicious/noArrayIndexKey: breaks animation\n            key: displayIndex,\n            displayIndex: displayIndex,\n            calendarMonth: calendarMonth\n        }, navLayout === \"around\" && !props.hideNavigation && displayIndex === 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.PreviousMonthButton, {\n            type: \"button\",\n            className: classNames[UI.PreviousMonthButton],\n            tabIndex: previousMonth ? undefined : -1,\n            \"aria-disabled\": previousMonth ? undefined : true,\n            \"aria-label\": labelPrevious(previousMonth),\n            onClick: handlePreviousClick,\n            \"data-animated-button\": props.animate ? \"true\" : undefined\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Chevron, {\n            disabled: previousMonth ? undefined : true,\n            className: classNames[UI.Chevron],\n            orientation: props.dir === \"rtl\" ? \"right\" : \"left\"\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.MonthCaption, {\n            \"data-animated-caption\": props.animate ? \"true\" : undefined,\n            className: classNames[UI.MonthCaption],\n            style: styles?.[UI.MonthCaption],\n            calendarMonth: calendarMonth,\n            displayIndex: displayIndex\n        }, captionLayout?.startsWith(\"dropdown\") ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.DropdownNav, {\n            className: classNames[UI.Dropdowns],\n            style: styles?.[UI.Dropdowns]\n        }, captionLayout === \"dropdown\" || captionLayout === \"dropdown-months\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.MonthsDropdown, {\n            className: classNames[UI.MonthsDropdown],\n            \"aria-label\": labelMonthDropdown(),\n            classNames: classNames,\n            components: components,\n            disabled: Boolean(props.disableNavigation),\n            onChange: handleMonthChange(calendarMonth.date),\n            options: getMonthOptions(calendarMonth.date, navStart, navEnd, formatters, dateLib),\n            style: styles?.[UI.Dropdown],\n            value: dateLib.getMonth(calendarMonth.date)\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, formatMonthDropdown(calendarMonth.date, dateLib)), captionLayout === \"dropdown\" || captionLayout === \"dropdown-years\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.YearsDropdown, {\n            className: classNames[UI.YearsDropdown],\n            \"aria-label\": labelYearDropdown(dateLib.options),\n            classNames: classNames,\n            components: components,\n            disabled: Boolean(props.disableNavigation),\n            onChange: handleYearChange(calendarMonth.date),\n            options: getYearOptions(navStart, navEnd, formatters, dateLib, Boolean(props.reverseYears)),\n            style: styles?.[UI.Dropdown],\n            value: dateLib.getYear(calendarMonth.date)\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, formatYearDropdown(calendarMonth.date, dateLib)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            role: \"status\",\n            \"aria-live\": \"polite\",\n            style: {\n                border: 0,\n                clip: \"rect(0 0 0 0)\",\n                height: \"1px\",\n                margin: \"-1px\",\n                overflow: \"hidden\",\n                padding: 0,\n                position: \"absolute\",\n                width: \"1px\",\n                whiteSpace: \"nowrap\",\n                wordWrap: \"normal\"\n            }\n        }, formatCaption(calendarMonth.date, dateLib.options, dateLib))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.CaptionLabel, {\n            className: classNames[UI.CaptionLabel],\n            role: \"status\",\n            \"aria-live\": \"polite\"\n        }, formatCaption(calendarMonth.date, dateLib.options, dateLib))), navLayout === \"around\" && !props.hideNavigation && displayIndex === numberOfMonths - 1 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.NextMonthButton, {\n            type: \"button\",\n            className: classNames[UI.NextMonthButton],\n            tabIndex: nextMonth ? undefined : -1,\n            \"aria-disabled\": nextMonth ? undefined : true,\n            \"aria-label\": labelNext(nextMonth),\n            onClick: handleNextClick,\n            \"data-animated-button\": props.animate ? \"true\" : undefined\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Chevron, {\n            disabled: nextMonth ? undefined : true,\n            className: classNames[UI.Chevron],\n            orientation: props.dir === \"rtl\" ? \"left\" : \"right\"\n        })), displayIndex === numberOfMonths - 1 && navLayout === \"after\" && !props.hideNavigation && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Nav, {\n            \"data-animated-nav\": props.animate ? \"true\" : undefined,\n            className: classNames[UI.Nav],\n            style: styles?.[UI.Nav],\n            \"aria-label\": labelNav(),\n            onPreviousClick: handlePreviousClick,\n            onNextClick: handleNextClick,\n            previousMonth: previousMonth,\n            nextMonth: nextMonth\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.MonthGrid, {\n            role: \"grid\",\n            \"aria-multiselectable\": mode === \"multiple\" || mode === \"range\",\n            \"aria-label\": labelGrid(calendarMonth.date, dateLib.options, dateLib) || undefined,\n            className: classNames[UI.MonthGrid],\n            style: styles?.[UI.MonthGrid]\n        }, !props.hideWeekdays && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Weekdays, {\n            \"data-animated-weekdays\": props.animate ? \"true\" : undefined,\n            className: classNames[UI.Weekdays],\n            style: styles?.[UI.Weekdays]\n        }, showWeekNumber && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.WeekNumberHeader, {\n            \"aria-label\": labelWeekNumberHeader(dateLib.options),\n            className: classNames[UI.WeekNumberHeader],\n            style: styles?.[UI.WeekNumberHeader],\n            scope: \"col\"\n        }, formatWeekNumberHeader()), weekdays.map((weekday)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Weekday, {\n                \"aria-label\": labelWeekday(weekday, dateLib.options, dateLib),\n                className: classNames[UI.Weekday],\n                key: String(weekday),\n                style: styles?.[UI.Weekday],\n                scope: \"col\"\n            }, formatWeekdayName(weekday, dateLib.options, dateLib)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Weeks, {\n            \"data-animated-weeks\": props.animate ? \"true\" : undefined,\n            className: classNames[UI.Weeks],\n            style: styles?.[UI.Weeks]\n        }, calendarMonth.weeks.map((week)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Week, {\n                className: classNames[UI.Week],\n                key: week.weekNumber,\n                style: styles?.[UI.Week],\n                week: week\n            }, showWeekNumber && // biome-ignore lint/a11y/useSemanticElements: react component\n            /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.WeekNumber, {\n                week: week,\n                style: styles?.[UI.WeekNumber],\n                \"aria-label\": labelWeekNumber(week.weekNumber, {\n                    locale\n                }),\n                className: classNames[UI.WeekNumber],\n                scope: \"row\",\n                role: \"rowheader\"\n            }, formatWeekNumber(week.weekNumber, dateLib)), week.days.map((day)=>{\n                const { date } = day;\n                const modifiers = getModifiers(day);\n                modifiers[DayFlag.focused] = !modifiers.hidden && Boolean(focused?.isEqualTo(day));\n                modifiers[SelectionState.selected] = isSelected?.(date) || modifiers.selected;\n                if (isDateRange(selectedValue)) {\n                    // add range modifiers\n                    const { from, to } = selectedValue;\n                    modifiers[SelectionState.range_start] = Boolean(from && to && dateLib.isSameDay(date, from));\n                    modifiers[SelectionState.range_end] = Boolean(from && to && dateLib.isSameDay(date, to));\n                    modifiers[SelectionState.range_middle] = rangeIncludesDate(selectedValue, date, true, dateLib);\n                }\n                const style = getStyleForModifiers(modifiers, styles, props.modifiersStyles);\n                const className = getClassNamesForModifiers(modifiers, classNames, props.modifiersClassNames);\n                const ariaLabel = !isInteractive && !modifiers.hidden ? labelGridcell(date, modifiers, dateLib.options, dateLib) : undefined;\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Day, {\n                    key: `${dateLib.format(date, \"yyyy-MM-dd\")}_${dateLib.format(day.displayMonth, \"yyyy-MM\")}`,\n                    day: day,\n                    modifiers: modifiers,\n                    className: className.join(\" \"),\n                    style: style,\n                    role: \"gridcell\",\n                    \"aria-selected\": modifiers.selected || undefined,\n                    \"aria-label\": ariaLabel,\n                    \"data-day\": dateLib.format(date, \"yyyy-MM-dd\"),\n                    \"data-month\": day.outside ? dateLib.format(date, \"yyyy-MM\") : undefined,\n                    \"data-selected\": modifiers.selected || undefined,\n                    \"data-disabled\": modifiers.disabled || undefined,\n                    \"data-hidden\": modifiers.hidden || undefined,\n                    \"data-outside\": day.outside || undefined,\n                    \"data-focused\": modifiers.focused || undefined,\n                    \"data-today\": modifiers.today || undefined\n                }, !modifiers.hidden && isInteractive ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.DayButton, {\n                    className: classNames[UI.DayButton],\n                    style: styles?.[UI.DayButton],\n                    type: \"button\",\n                    day: day,\n                    modifiers: modifiers,\n                    disabled: modifiers.disabled || undefined,\n                    tabIndex: isFocusTarget(day) ? 0 : -1,\n                    \"aria-label\": labelDayButton(date, modifiers, dateLib.options, dateLib),\n                    onClick: handleDayClick(day, modifiers),\n                    onBlur: handleDayBlur(day, modifiers),\n                    onFocus: handleDayFocus(day, modifiers),\n                    onKeyDown: handleDayKeyDown(day, modifiers),\n                    onMouseEnter: handleDayMouseEnter(day, modifiers),\n                    onMouseLeave: handleDayMouseLeave(day, modifiers)\n                }, formatDay(date, dateLib.options, dateLib)) : !modifiers.hidden && formatDay(day.date, dateLib.options, dateLib));\n            }));\n        }))));\n    })), props.footer && // biome-ignore lint/a11y/useSemanticElements: react component\n    /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(components.Footer, {\n        className: classNames[UI.Footer],\n        style: styles?.[UI.Footer],\n        role: \"status\",\n        \"aria-live\": \"polite\"\n    }, props.footer)));\n}\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DayPicker, {\n        showOutsideDays: showOutsideDays,\n        className: cn(\"p-3 schengen-calendar\", className),\n        classNames: {\n            months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n            month: \"space-y-4\",\n            caption: \"flex justify-center pt-1 relative items-center\",\n            caption_label: \"text-sm font-medium\",\n            nav: \"space-x-1 flex items-center\",\n            nav_button: cn(buttonVariants({\n                variant: \"outline\",\n                size: \"icon\"\n            }), \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 mobile-touch-target\"),\n            nav_button_previous: \"absolute left-1\",\n            nav_button_next: \"absolute right-1\",\n            table: \"w-full border-collapse space-y-1\",\n            head_row: \"flex\",\n            head_cell: \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem] sm:w-9\",\n            row: \"flex w-full mt-2\",\n            cell: cn(\"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-middle)]:rounded-none\", \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"),\n            day: cn(buttonVariants({\n                variant: \"ghost\",\n                size: \"icon\"\n            }), \"h-8 w-8 p-0 font-normal aria-selected:opacity-100 sm:h-9 sm:w-9 mobile-calendar-day\"),\n            day_range_start: \"day-range-start\",\n            day_range_end: \"day-range-end\",\n            day_selected: \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground schengen-selected-date\",\n            day_today: \"bg-accent text-accent-foreground font-semibold\",\n            day_outside: \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n            day_disabled: \"text-muted-foreground opacity-50 cursor-not-allowed\",\n            day_range_middle: \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n            day_hidden: \"invisible\",\n            ...classNames\n        },\n        components: {\n            IconLeft: ({ ...props })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ChevronLeft, {\n                    className: \"h-4 w-4\"\n                }),\n            IconRight: ({ ...props })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ChevronRight, {\n                    className: \"h-4 w-4\"\n                })\n        },\n        ...props\n    });\n}\nCalendar.displayName = \"Calendar\";\nconst Card = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: ref,\n        className: cn(\"rounded-xl border bg-card text-card-foreground shadow schengen-shadow\", className),\n        ...props\n    }));\nCard.displayName = \"Card\";\nconst CardHeader = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: ref,\n        className: cn(\"flex flex-col space-y-1.5 p-6\", className),\n        ...props\n    }));\nCardHeader.displayName = \"CardHeader\";\nconst CardTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"h3\", {\n        ref: ref,\n        className: cn(\"font-semibold leading-none tracking-tight\", className),\n        ...props\n    }));\nCardTitle.displayName = \"CardTitle\";\nconst CardDescription = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        ref: ref,\n        className: cn(\"text-sm text-muted-foreground\", className),\n        ...props\n    }));\nCardDescription.displayName = \"CardDescription\";\nconst CardContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: ref,\n        className: cn(\"p-6 pt-0\", className),\n        ...props\n    }));\nCardContent.displayName = \"CardContent\";\nconst CardFooter = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: ref,\n        className: cn(\"flex items-center p-6 pt-0\", className),\n        ...props\n    }));\nCardFooter.displayName = \"CardFooter\";\nconst Input = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, type, leftIcon, rightIcon, error = false, helperText, ...props }, ref)=>{\n    const inputId = react__WEBPACK_IMPORTED_MODULE_1__.useId();\n    const helperTextId = `${inputId}-helper`;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"w-full\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"relative\"\n    }, leftIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n    }, leftIcon), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"input\", {\n        type: type,\n        className: cn(\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors\", \"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground\", \"placeholder:text-muted-foreground\", \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2\", \"disabled:cursor-not-allowed disabled:opacity-50\", leftIcon && \"pl-10\", rightIcon && \"pr-10\", error && \"border-red-500 focus-visible:ring-red-500/50\", \"min-h-[44px] md:min-h-[36px]\", className),\n        ref: ref,\n        \"aria-describedby\": helperText ? helperTextId : undefined,\n        \"aria-invalid\": error,\n        ...props\n    }), rightIcon && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n    }, rightIcon)), helperText && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        id: helperTextId,\n        className: cn(\"mt-1 text-xs\", error ? \"text-red-500\" : \"text-gray-500\")\n    }, helperText));\n});\nInput.displayName = \"Input\";\n// src/primitive.tsx\nvar NODES = [\n    \"a\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"select\",\n    \"span\",\n    \"svg\",\n    \"ul\"\n];\nvar Primitive = NODES.reduce((primitive, node)=>{\n    const Slot = createSlot(`Primitive.${node}`);\n    const Node = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? Slot : node;\n        if (false) {}\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node.displayName = `Primitive.${node}`;\n    return {\n        ...primitive,\n        [node]: Node\n    };\n}, {});\nvar NAME = \"Label\";\nvar Label$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Primitive.label, {\n        ...props,\n        ref: forwardedRef,\n        onMouseDown: (event)=>{\n            const target = event.target;\n            if (target.closest(\"button, input, select, textarea\")) return;\n            props.onMouseDown?.(event);\n            if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n        }\n    });\n});\nLabel$1.displayName = NAME;\nvar Root = Label$1;\nconst labelVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_3__.cva)(\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\", {\n    variants: {\n        variant: {\n            default: \"\",\n            required: \"after:content-['*'] after:ml-0.5 after:text-red-500\",\n            optional: \"after:content-['(optional)'] after:ml-1 after:text-gray-400 after:font-normal after:text-xs\"\n        },\n        size: {\n            default: \"text-sm\",\n            sm: \"text-xs\",\n            lg: \"text-base\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nconst Label = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, variant, size, ...props }, ref)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Root, {\n        ref: ref,\n        className: cn(labelVariants({\n            variant,\n            size\n        }), className),\n        ...props\n    }));\nLabel.displayName = Root.displayName;\nconst badgeVariants = (0,class_variance_authority__WEBPACK_IMPORTED_MODULE_3__.cva)(\"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\", {\n    variants: {\n        variant: {\n            default: \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n            secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            destructive: \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n            outline: \"text-foreground\",\n            success: \"border-transparent bg-green-500 text-white shadow hover:bg-green-500/80\",\n            warning: \"border-transparent bg-amber-500 text-white shadow hover:bg-amber-500/80\",\n            info: \"border-transparent bg-blue-500 text-white shadow hover:bg-blue-500/80\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\"\n    }\n});\nfunction Badge({ className, variant, ...props }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: cn(badgeVariants({\n            variant\n        }), className),\n        ...props\n    });\n}\nfunction Header({ onLoginClick, onSignupClick, className = \"\" }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"header\", {\n        className: `w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 ${className}`\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"container mx-auto px-4 sm:px-6 lg:px-8\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex h-16 items-center justify-between\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center space-x-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex h-8 w-8 items-center justify-center rounded-lg bg-primary\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(MapPin, {\n        className: \"h-5 w-5 text-primary-foreground\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex flex-col\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        className: \"text-lg font-bold text-foreground leading-none\"\n    }, \"Schengen Calculator\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        className: \"text-xs text-muted-foreground leading-none\"\n    }, \"90/180 Day Rule Checker\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"nav\", {\n        className: \"hidden md:flex items-center space-x-6\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n        href: \"#calculator\",\n        className: \"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\"\n    }, \"Calculator\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n        href: \"#about\",\n        className: \"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\"\n    }, \"About 90/180 Rule\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", {\n        href: \"#help\",\n        className: \"text-sm font-medium text-muted-foreground hover:text-foreground transition-colors\"\n    }, \"Help\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center space-x-3\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"sm\",\n        onClick: onLoginClick,\n        className: \"hidden sm:inline-flex\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(User, {\n        className: \"h-4 w-4 mr-2\"\n    }), \"Log In\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n        variant: \"default\",\n        size: \"sm\",\n        onClick: onSignupClick,\n        className: \"schengen-brand-gradient\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(UserPlus, {\n        className: \"h-4 w-4 mr-2\"\n    }), \"Sign Up\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"sm\",\n        className: \"md:hidden\",\n        \"aria-label\": \"Open menu\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        className: \"h-6 w-6\",\n        fill: \"none\",\n        viewBox: \"0 0 24 24\",\n        stroke: \"currentColor\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 2,\n        d: \"M4 6h16M4 12h16M4 18h16\"\n    })))))));\n}\nfunction Select({ options, value, placeholder = \"Select an option...\", onValueChange, disabled = false, className = \"\", searchable = false }) {\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [highlightedIndex, setHighlightedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(-1);\n    const [dropdownPosition, setDropdownPosition] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        top: 0,\n        left: 0,\n        width: 0\n    });\n    const selectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const searchInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // Filter options based on search query\n    const filteredOptions = searchable ? options.filter((option)=>option.label.toLowerCase().includes(searchQuery.toLowerCase())) : options;\n    // Find selected option\n    const selectedOption = options.find((option)=>option.value === value);\n    // Calculate dropdown position for portal rendering with enhanced accuracy\n    const calculateDropdownPosition = ()=>{\n        if (!selectRef.current) return;\n        const rect = selectRef.current.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const viewportWidth = window.innerWidth;\n        // Use viewport-relative positioning for better accuracy\n        const spaceBelow = viewportHeight - rect.bottom;\n        const spaceAbove = rect.top;\n        const dropdownHeight = 240 // max-h-60 = 15rem = 240px\n        ;\n        // Determine if dropdown should open upwards\n        const shouldOpenUp = spaceBelow < dropdownHeight && spaceAbove > dropdownHeight;\n        // Calculate position relative to viewport (fixed positioning)\n        const top = shouldOpenUp ? Math.max(10, rect.top - dropdownHeight - 4) // 4px gap\n         : Math.min(viewportHeight - dropdownHeight - 10, rect.bottom + 4) // 4px gap\n        ;\n        // Ensure dropdown doesn't overflow horizontally\n        let left = rect.left;\n        const rightEdge = left + rect.width;\n        if (rightEdge > viewportWidth) {\n            left = Math.max(10, viewportWidth - rect.width - 10); // 10px margin\n        }\n        setDropdownPosition({\n            top: top,\n            left: Math.max(10, left),\n            width: rect.width\n        });\n    };\n    // Close dropdown when clicking outside\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Select.useEffect\": ()=>{\n            function handleClickOutside(event) {\n                const target = event.target;\n                // Check if click is outside both the select trigger and the dropdown\n                if (selectRef.current && !selectRef.current.contains(target)) {\n                    // Also check if the click is not within the dropdown portal\n                    const dropdownElement = document.querySelector('[data-dropdown-portal]');\n                    if (!dropdownElement || !dropdownElement.contains(target)) {\n                        setIsOpen(false);\n                        setSearchQuery(\"\");\n                        setHighlightedIndex(-1);\n                    }\n                }\n            }\n            if (isOpen) {\n                document.addEventListener('mousedown', handleClickOutside);\n                return ({\n                    \"Select.useEffect\": ()=>document.removeEventListener('mousedown', handleClickOutside)\n                })[\"Select.useEffect\"];\n            }\n        }\n    }[\"Select.useEffect\"], [\n        isOpen\n    ]);\n    // Focus search input when dropdown opens\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Select.useEffect\": ()=>{\n            if (isOpen && searchable && searchInputRef.current) {\n                searchInputRef.current.focus();\n            }\n        }\n    }[\"Select.useEffect\"], [\n        isOpen,\n        searchable\n    ]);\n    // Recalculate position on window resize\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Select.useEffect\": ()=>{\n            const handleResize = {\n                \"Select.useEffect.handleResize\": ()=>{\n                    if (isOpen) {\n                        calculateDropdownPosition();\n                    }\n                }\n            }[\"Select.useEffect.handleResize\"];\n            if (isOpen) {\n                window.addEventListener('resize', handleResize);\n                window.addEventListener('scroll', handleResize);\n                return ({\n                    \"Select.useEffect\": ()=>{\n                        window.removeEventListener('resize', handleResize);\n                        window.removeEventListener('scroll', handleResize);\n                    }\n                })[\"Select.useEffect\"];\n            }\n        }\n    }[\"Select.useEffect\"], [\n        isOpen\n    ]);\n    // Handle keyboard navigation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Select.useEffect\": ()=>{\n            function handleKeyDown(event) {\n                if (!isOpen) return;\n                switch(event.key){\n                    case 'Escape':\n                        setIsOpen(false);\n                        setSearchQuery(\"\");\n                        setHighlightedIndex(-1);\n                        break;\n                    case 'ArrowDown':\n                        event.preventDefault();\n                        setHighlightedIndex({\n                            \"Select.useEffect.handleKeyDown\": (prev)=>prev < filteredOptions.length - 1 ? prev + 1 : 0\n                        }[\"Select.useEffect.handleKeyDown\"]);\n                        break;\n                    case 'ArrowUp':\n                        event.preventDefault();\n                        setHighlightedIndex({\n                            \"Select.useEffect.handleKeyDown\": (prev)=>prev > 0 ? prev - 1 : filteredOptions.length - 1\n                        }[\"Select.useEffect.handleKeyDown\"]);\n                        break;\n                    case 'Enter':\n                        event.preventDefault();\n                        if (highlightedIndex >= 0 && highlightedIndex < filteredOptions.length) {\n                            const selectedOption = filteredOptions[highlightedIndex];\n                            if (!selectedOption.disabled) {\n                                onValueChange?.(selectedOption.value);\n                                setIsOpen(false);\n                                setSearchQuery(\"\");\n                                setHighlightedIndex(-1);\n                            }\n                        }\n                        break;\n                }\n            }\n            if (isOpen) {\n                document.addEventListener('keydown', handleKeyDown);\n                return ({\n                    \"Select.useEffect\": ()=>document.removeEventListener('keydown', handleKeyDown)\n                })[\"Select.useEffect\"];\n            }\n        }\n    }[\"Select.useEffect\"], [\n        isOpen,\n        highlightedIndex,\n        filteredOptions,\n        onValueChange\n    ]);\n    const handleToggle = ()=>{\n        if (disabled) return;\n        if (!isOpen) {\n            setIsOpen(true);\n            setSearchQuery(\"\");\n            setHighlightedIndex(-1);\n            // Calculate position after state update\n            requestAnimationFrame(()=>{\n                calculateDropdownPosition();\n            });\n        } else {\n            setIsOpen(false);\n        }\n    };\n    const handleOptionClick = (option)=>{\n        if (option.disabled) return;\n        onValueChange?.(option.value);\n        setIsOpen(false);\n        setSearchQuery(\"\");\n        setHighlightedIndex(-1);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        ref: selectRef,\n        className: cn(\"relative\", className)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n        type: \"button\",\n        onClick: handleToggle,\n        disabled: disabled,\n        className: cn(\"flex w-full items-center rounded-md border border-input bg-background px-3 py-2 text-sm transition-colors\", \"focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary\", \"disabled:cursor-not-allowed disabled:opacity-50\", \"hover:bg-accent hover:text-accent-foreground\", \"mobile-touch-target\", selectedOption ? \"justify-center text-center\" : \"justify-between text-left\"),\n        \"aria-expanded\": isOpen,\n        \"aria-haspopup\": \"listbox\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        className: cn(selectedOption ? \"text-foreground font-medium\" : \"text-muted-foreground\")\n    }, selectedOption ? selectedOption.label : placeholder), !selectedOption && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ChevronDown, {\n        className: cn(\"h-4 w-4 shrink-0 transition-transform duration-200\", isOpen && \"transform rotate-180\")\n    })), isOpen && \"undefined\" !== 'undefined' && /*#__PURE__*/ 0);\n}\nfunction CircularProgress({ value, max = 90, size = 120, strokeWidth = 8, progressColor = \"#10b981\", backgroundColor = \"#e5e7eb\", textColor = \"#374151\", className, label, showPercentage = false, animationDuration = 1000 }) {\n    // Calculate progress percentage\n    const percentage = Math.min(Math.max(value / max * 100, 0), 100);\n    // Calculate circle properties\n    const radius = (size - strokeWidth) / 2;\n    const circumference = radius * 2 * Math.PI;\n    const offset = circumference - percentage / 100 * circumference;\n    // Display value\n    const displayValue = showPercentage ? `${Math.round(percentage)}%` : Math.round(value).toString();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: cn(\"relative inline-flex items-center justify-center\", className)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"svg\", {\n        width: size,\n        height: size,\n        className: \"transform -rotate-90\",\n        \"aria-labelledby\": \"circular-progress-title\",\n        role: \"progressbar\",\n        \"aria-valuenow\": value,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": max\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"title\", {\n        id: \"circular-progress-title\"\n    }, label ? `${label}: ${displayValue}` : `Progress: ${displayValue}`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"circle\", {\n        cx: size / 2,\n        cy: size / 2,\n        r: radius,\n        stroke: backgroundColor,\n        strokeWidth: strokeWidth,\n        fill: \"transparent\",\n        className: \"opacity-30\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"circle\", {\n        cx: size / 2,\n        cy: size / 2,\n        r: radius,\n        stroke: progressColor,\n        strokeWidth: strokeWidth,\n        fill: \"transparent\",\n        strokeDasharray: circumference,\n        strokeDashoffset: offset,\n        strokeLinecap: \"round\",\n        className: \"transition-all duration-1000 ease-out\",\n        style: {\n            animationDuration: `${animationDuration}ms`\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"absolute inset-0 flex flex-col items-center justify-center\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"text-3xl font-bold tabular-nums\",\n        style: {\n            color: textColor\n        }\n    }, displayValue), label && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"text-sm font-medium mt-1\",\n        style: {\n            color: textColor\n        }\n    }, label)));\n}\nfunction CalendarModal({ isOpen, onClose, onDateRangeSelect, initialRange, disabledDates = [], minDate, maxDate, className }) {\n    const [currentMonth, setCurrentMonth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Date());\n    const [selectedRange, setSelectedRange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialRange || {\n        startDate: null,\n        endDate: null\n    });\n    const [selectingEnd, setSelectingEnd] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Reset when modal opens/closes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"CalendarModal.useEffect\": ()=>{\n            if (isOpen) {\n                setSelectedRange(initialRange || {\n                    startDate: null,\n                    endDate: null\n                });\n                setSelectingEnd(false);\n            }\n        }\n    }[\"CalendarModal.useEffect\"], [\n        isOpen,\n        initialRange\n    ]);\n    // Handle date click\n    const handleDateClick = (date)=>{\n        // Check if date is disabled\n        if (isDateDisabled(date)) return;\n        if (!selectedRange.startDate || selectingEnd) {\n            // Select start date or reset and select new start date\n            if (selectingEnd && selectedRange.startDate && date < selectedRange.startDate) {\n                // If clicking before start date while selecting end, reset\n                setSelectedRange({\n                    startDate: date,\n                    endDate: null\n                });\n                setSelectingEnd(false);\n            } else if (!selectedRange.startDate) {\n                // First selection - start date\n                setSelectedRange({\n                    startDate: date,\n                    endDate: null\n                });\n                setSelectingEnd(true);\n            } else {\n                // Selecting end date\n                setSelectedRange({\n                    ...selectedRange,\n                    endDate: date\n                });\n                setSelectingEnd(false);\n            }\n        } else {\n            // Start date exists, this is end date selection\n            if (date >= selectedRange.startDate) {\n                setSelectedRange({\n                    ...selectedRange,\n                    endDate: date\n                });\n                setSelectingEnd(false);\n            } else {\n                // If clicked date is before start, make it the new start\n                setSelectedRange({\n                    startDate: date,\n                    endDate: null\n                });\n                setSelectingEnd(true);\n            }\n        }\n    };\n    // Check if date is disabled\n    const isDateDisabled = (date)=>{\n        if (minDate && date < minDate) return true;\n        if (maxDate && date > maxDate) return true;\n        return disabledDates.some((disabledDate)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, disabledDate));\n    };\n    // Check if date is in selected range\n    const isDateInRange = (date)=>{\n        if (!selectedRange.startDate) return false;\n        if (!selectedRange.endDate) return (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, selectedRange.startDate);\n        return date >= selectedRange.startDate && date <= selectedRange.endDate;\n    };\n    // Check if date is range boundary\n    const isRangeStart = (date)=>{\n        return selectedRange.startDate && (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, selectedRange.startDate);\n    };\n    const isRangeEnd = (date)=>{\n        return selectedRange.endDate && (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, selectedRange.endDate);\n    };\n    // Handle clear\n    const handleClear = ()=>{\n        setSelectedRange({\n            startDate: null,\n            endDate: null\n        });\n        setSelectingEnd(false);\n    };\n    // Handle done\n    const handleDone = ()=>{\n        onDateRangeSelect(selectedRange);\n        onClose();\n    };\n    // Navigation functions\n    const goToPrevMonth = ()=>setCurrentMonth((prev)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_38__.subMonths)(prev, 1));\n    const goToNextMonth = ()=>setCurrentMonth((prev)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_8__.addMonths)(prev, 1));\n    // Render calendar month\n    const renderMonth = (monthDate)=>{\n        const monthStart = (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_35__.startOfMonth)(monthDate);\n        const monthEnd = (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_15__.endOfMonth)(monthDate);\n        // Get all days in the month\n        const monthDays = (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_39__.eachDayOfInterval)({\n            start: monthStart,\n            end: monthEnd\n        });\n        // Add padding days from previous month\n        const startPadding = monthStart.getDay();\n        const paddingDays = [];\n        for(let i = startPadding - 1; i >= 0; i--){\n            const paddingDate = new Date(monthStart);\n            paddingDate.setDate(paddingDate.getDate() - (i + 1));\n            paddingDays.push(paddingDate);\n        }\n        // Add padding days from next month\n        const endPadding = 6 - monthEnd.getDay();\n        const endPaddingDays = [];\n        for(let i = 1; i <= endPadding; i++){\n            const paddingDate = new Date(monthEnd);\n            paddingDate.setDate(paddingDate.getDate() + i);\n            endPaddingDays.push(paddingDate);\n        }\n        const allDays = [\n            ...paddingDays,\n            ...monthDays,\n            ...endPaddingDays\n        ];\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-center font-semibold text-lg mb-4\"\n        }, (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(monthDate, 'MMMM yyyy')), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"grid grid-cols-7 gap-1 mb-2\"\n        }, [\n            'Su',\n            'Mo',\n            'Tu',\n            'We',\n            'Th',\n            'Fr',\n            'Sa'\n        ].map((day)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: day,\n                className: \"text-center text-sm font-medium text-gray-500 p-2\"\n            }, day))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"grid grid-cols-7 gap-1\"\n        }, allDays.map((date, index)=>{\n            const isCurrentMonth = (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_27__.isSameMonth)(date, monthDate);\n            const disabled = isDateDisabled(date);\n            const inRange = isDateInRange(date);\n            const rangeStart = isRangeStart(date);\n            const rangeEnd = isRangeEnd(date);\n            const today = (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_40__.isToday)(date);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n                key: index,\n                onClick: ()=>handleDateClick(date),\n                disabled: disabled || !isCurrentMonth,\n                className: cn(\"h-10 w-10 text-sm font-medium rounded-lg transition-colors\", \"hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary/50\", {\n                    // Current month styling\n                    \"text-gray-900\": isCurrentMonth && !disabled,\n                    \"text-gray-400\": !isCurrentMonth,\n                    // Disabled styling\n                    \"text-gray-300 cursor-not-allowed\": disabled,\n                    // Today styling\n                    \"bg-blue-100 text-blue-900\": today && !inRange && isCurrentMonth,\n                    // Range styling\n                    \"bg-primary/20\": inRange && !rangeStart && !rangeEnd,\n                    \"bg-primary text-white\": rangeStart || rangeEnd,\n                    // Hover effects\n                    \"hover:bg-primary/10\": !disabled && !inRange && isCurrentMonth,\n                    \"hover:bg-primary/90\": (rangeStart || rangeEnd) && !disabled\n                })\n            }, date.getDate());\n        })));\n    };\n    if (!isOpen) return null;\n    return  false ? /*#__PURE__*/ 0 : null;\n}\nfunction AnimatedCounter({ value, duration = 800, className = \"\", suffix = \"\", prefix = \"\" }) {\n    const [displayValue, setDisplayValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const frameRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const startTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const startValueRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AnimatedCounter.useEffect\": ()=>{\n            if (value === displayValue) return;\n            setIsAnimating(true);\n            startValueRef.current = displayValue;\n            startTimeRef.current = Date.now();\n            const animate = {\n                \"AnimatedCounter.useEffect.animate\": ()=>{\n                    const now = Date.now();\n                    const elapsed = now - (startTimeRef.current || now);\n                    const progress = Math.min(elapsed / duration, 1);\n                    // Easing function (ease-out cubic)\n                    const easeOut = 1 - Math.pow(1 - progress, 3);\n                    const currentValue = startValueRef.current + (value - startValueRef.current) * easeOut;\n                    setDisplayValue(Math.round(currentValue));\n                    if (progress < 1) {\n                        frameRef.current = requestAnimationFrame(animate);\n                    } else {\n                        setDisplayValue(value);\n                        setIsAnimating(false);\n                    }\n                }\n            }[\"AnimatedCounter.useEffect.animate\"];\n            frameRef.current = requestAnimationFrame(animate);\n            return ({\n                \"AnimatedCounter.useEffect\": ()=>{\n                    if (frameRef.current) {\n                        cancelAnimationFrame(frameRef.current);\n                    }\n                }\n            })[\"AnimatedCounter.useEffect\"];\n        }\n    }[\"AnimatedCounter.useEffect\"], [\n        value,\n        duration,\n        displayValue\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n        className: `${className} ${isAnimating ? 'transition-transform duration-150 scale-105' : 'transition-transform duration-150 scale-100'}`\n    }, prefix, displayValue, suffix);\n}\nfunction SchengenCalendar({ existingTrips = [], selected, selectedRange, mode = \"single\", onSelect, onRangeSelect, showOccupiedDates = true, showConflictWarnings = true, showAlternativeSuggestions = false, validatorConfig = {}, className, fromDate, toDate, disabled, customClassNames = {}, showValidationMessages = true, renderValidationMessage, ...props }) {\n    // Stable validator configuration to prevent recreation\n    const validatorConfigStringified = JSON.stringify(validatorConfig);\n    const validator = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SchengenCalendar.useMemo[validator]\": ()=>new _schengen_calculator__WEBPACK_IMPORTED_MODULE_5__.DateOverlapValidator(validatorConfig)\n    }[\"SchengenCalendar.useMemo[validator]\"], [\n        validatorConfigStringified\n    ]);\n    // Create stable reference for existingTrips to prevent infinite loops\n    const stableTripsRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    const tripsStringified = JSON.stringify(existingTrips);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SchengenCalendar.useEffect\": ()=>{\n            stableTripsRef.current = existingTrips;\n        }\n    }[\"SchengenCalendar.useEffect\"], [\n        tripsStringified\n    ]);\n    const occupiedDates = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SchengenCalendar.useMemo[occupiedDates]\": ()=>validator.getAllOccupiedDates(stableTripsRef.current)\n    }[\"SchengenCalendar.useMemo[occupiedDates]\"], [\n        validator,\n        tripsStringified\n    ]);\n    const [validationResult, setValidationResult] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const [alternativeDates, setAlternativeDates] = react__WEBPACK_IMPORTED_MODULE_1__.useState([]);\n    // Validate current selection\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SchengenCalendar.useEffect\": ()=>{\n            const trips = stableTripsRef.current;\n            if (mode === \"single\" && selected) {\n                const range = {\n                    start: (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_33__.startOfDay)(selected),\n                    end: (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_41__.endOfDay)(selected)\n                };\n                const result = validator.validateDateRange(range, trips);\n                setValidationResult(result);\n                if (!result.isValid && showAlternativeSuggestions) {\n                    const alternatives = validator.suggestAlternativeDates(range, 1, trips);\n                    setAlternativeDates(alternatives);\n                } else {\n                    setAlternativeDates([]);\n                }\n            } else if (mode === \"range\" && selectedRange) {\n                const result = validator.validateDateRange(selectedRange, trips);\n                setValidationResult(result);\n                if (!result.isValid && showAlternativeSuggestions) {\n                    const duration = Math.ceil((selectedRange.end.getTime() - selectedRange.start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                    const alternatives = validator.suggestAlternativeDates(selectedRange, duration, trips);\n                    setAlternativeDates(alternatives);\n                } else {\n                    setAlternativeDates([]);\n                }\n            } else {\n                setValidationResult(null);\n                setAlternativeDates([]);\n            }\n        }\n    }[\"SchengenCalendar.useEffect\"], [\n        selected,\n        selectedRange,\n        tripsStringified,\n        validator,\n        mode,\n        showAlternativeSuggestions\n    ]);\n    // Check if a date is occupied\n    const isDateOccupied = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[isDateOccupied]\": (date)=>{\n            return occupiedDates.some({\n                \"SchengenCalendar.useCallback[isDateOccupied]\": (occupiedDate)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, occupiedDate)\n            }[\"SchengenCalendar.useCallback[isDateOccupied]\"]);\n        }\n    }[\"SchengenCalendar.useCallback[isDateOccupied]\"], [\n        occupiedDates\n    ]);\n    // Check if a date has conflicts\n    const isDateConflicted = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[isDateConflicted]\": (date)=>{\n            if (!validationResult || validationResult.isValid) return false;\n            if (mode === \"single\" && selected) {\n                return (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, selected);\n            } else if (mode === \"range\" && selectedRange) {\n                return isDateInRange(date, selectedRange.start, selectedRange.end);\n            }\n            return false;\n        }\n    }[\"SchengenCalendar.useCallback[isDateConflicted]\"], [\n        validationResult,\n        mode,\n        selected,\n        selectedRange\n    ]);\n    // MANDATORY visual states per CLAUDE.md requirements\n    const DATE_VISUAL_STATES = {\n        occupied: 'bg-gray-200 text-gray-600 line-through cursor-not-allowed opacity-60 hover:bg-gray-200',\n        available: 'bg-gray-50 hover:bg-primary/10 cursor-pointer transition-colors',\n        selected: 'bg-primary text-primary-foreground cursor-pointer hover:bg-primary/90',\n        conflict: 'bg-red-100 text-red-700 cursor-not-allowed border border-red-200'\n    };\n    // Custom day class names with mandatory visual requirements\n    const getDayClassNames = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[getDayClassNames]\": (date)=>{\n            const classes = [];\n            // CRITICAL: Occupied dates MUST be greyed out with strikethrough (CLAUDE.md requirement)\n            if (showOccupiedDates && isDateOccupied(date)) {\n                classes.push(\"schengen-occupied-date\", DATE_VISUAL_STATES.occupied, customClassNames.occupied || \"\");\n            } else {\n                classes.push(\"schengen-available-date\", DATE_VISUAL_STATES.available, customClassNames.available || \"\");\n            }\n            // Conflict styling with red indicators\n            if (showConflictWarnings && isDateConflicted(date)) {\n                classes.push(\"schengen-conflict-date\", DATE_VISUAL_STATES.conflict, customClassNames.conflict || \"\");\n            }\n            // Selected date styling\n            if (mode === \"single\" && selected && (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, selected) || mode === \"range\" && selectedRange && isDateInRange(date, selectedRange.start, selectedRange.end)) {\n                classes.push(\"schengen-selected-date\", DATE_VISUAL_STATES.selected, customClassNames.selected || \"\");\n            }\n            return classes.filter(Boolean).join(\" \");\n        }\n    }[\"SchengenCalendar.useCallback[getDayClassNames]\"], [\n        showOccupiedDates,\n        showConflictWarnings,\n        isDateOccupied,\n        isDateConflicted,\n        mode,\n        selected,\n        selectedRange,\n        customClassNames\n    ]);\n    // Handle date selection with validation and helpful error messages\n    const handleDateSelect = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[handleDateSelect]\": (date)=>{\n            if (!date) {\n                onSelect?.(undefined);\n                return;\n            }\n            // CRITICAL: Occupied date interaction prevention with helpful error message (CLAUDE.md requirement)\n            if (showOccupiedDates && isDateOccupied(date)) {\n                const tripsOnDate = validator.getTripsOnDate(date, stableTripsRef.current);\n                const tripNames = tripsOnDate.map({\n                    \"SchengenCalendar.useCallback[handleDateSelect].tripNames\": (t)=>t.country\n                }[\"SchengenCalendar.useCallback[handleDateSelect].tripNames\"]).join(', ');\n                // Show helpful error message as required by CLAUDE.md\n                alert(`This date is occupied by existing trip${tripsOnDate.length > 1 ? 's' : ''}: ${tripNames}\\n\\nPlease select a different date or modify your existing trip.`);\n                return;\n            }\n            onSelect?.(date);\n        }\n    }[\"SchengenCalendar.useCallback[handleDateSelect]\"], [\n        onSelect,\n        showOccupiedDates,\n        isDateOccupied,\n        validator,\n        tripsStringified\n    ]);\n    // Handle range selection with validation and helpful error messages\n    const handleRangeSelect = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[handleRangeSelect]\": (range)=>{\n            if (!range?.from) {\n                onRangeSelect?.(undefined);\n                return;\n            }\n            const dateRange = {\n                start: range.from,\n                end: range.to || range.from\n            };\n            // CRITICAL: Check for occupied dates in range with helpful error message (CLAUDE.md requirement)\n            if (showOccupiedDates) {\n                const occupiedInRange = occupiedDates.filter({\n                    \"SchengenCalendar.useCallback[handleRangeSelect].occupiedInRange\": (occupiedDate)=>isDateInRange(occupiedDate, dateRange.start, dateRange.end)\n                }[\"SchengenCalendar.useCallback[handleRangeSelect].occupiedInRange\"]);\n                if (occupiedInRange.length > 0) {\n                    const conflictDates = occupiedInRange.map({\n                        \"SchengenCalendar.useCallback[handleRangeSelect].conflictDates\": (date)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(date, 'MMM d')\n                    }[\"SchengenCalendar.useCallback[handleRangeSelect].conflictDates\"]).join(', ');\n                    alert(`Selected date range contains ${occupiedInRange.length} occupied date${occupiedInRange.length > 1 ? 's' : ''}: ${conflictDates}\\n\\nPlease select a different date range or modify your existing trips.`);\n                    return;\n                }\n            }\n            onRangeSelect?.(dateRange);\n        }\n    }[\"SchengenCalendar.useCallback[handleRangeSelect]\"], [\n        onRangeSelect,\n        showOccupiedDates,\n        occupiedDates\n    ]);\n    // Disabled dates logic\n    const isDateDisabled = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"SchengenCalendar.useCallback[isDateDisabled]\": (date)=>{\n            // Check custom disabled logic\n            if (typeof disabled === \"function\") {\n                if (disabled(date)) return true;\n            } else if (Array.isArray(disabled)) {\n                if (disabled.some({\n                    \"SchengenCalendar.useCallback[isDateDisabled]\": (disabledDate)=>(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(date, disabledDate)\n                }[\"SchengenCalendar.useCallback[isDateDisabled]\"])) return true;\n            }\n            // Check date range bounds\n            if (fromDate && date < fromDate) return true;\n            if (toDate && date > toDate) return true;\n            // Optionally disable occupied dates\n            if (showOccupiedDates && isDateOccupied(date)) {\n                return true;\n            }\n            return false;\n        }\n    }[\"SchengenCalendar.useCallback[isDateDisabled]\"], [\n        disabled,\n        fromDate,\n        toDate,\n        showOccupiedDates,\n        isDateOccupied\n    ]);\n    const calendarProps = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"SchengenCalendar.useMemo[calendarProps]\": ()=>{\n            const baseProps = {\n                className: cn(\"schengen-calendar\", className),\n                disabled: isDateDisabled,\n                fromDate,\n                toDate,\n                modifiers: {\n                    occupied: {\n                        \"SchengenCalendar.useMemo[calendarProps]\": (date)=>showOccupiedDates && isDateOccupied(date)\n                    }[\"SchengenCalendar.useMemo[calendarProps]\"],\n                    conflicted: {\n                        \"SchengenCalendar.useMemo[calendarProps]\": (date)=>showConflictWarnings && isDateConflicted(date)\n                    }[\"SchengenCalendar.useMemo[calendarProps]\"]\n                },\n                modifiersClassNames: {\n                    occupied: DATE_VISUAL_STATES.occupied,\n                    conflicted: DATE_VISUAL_STATES.conflict\n                },\n                ...props\n            };\n            if (mode === \"single\") {\n                return {\n                    ...baseProps,\n                    mode: \"single\",\n                    selected,\n                    onSelect: handleDateSelect\n                };\n            } else {\n                return {\n                    ...baseProps,\n                    mode: \"range\",\n                    selected: selectedRange ? {\n                        from: selectedRange.start,\n                        to: selectedRange.end\n                    } : undefined,\n                    onSelect: handleRangeSelect\n                };\n            }\n        }\n    }[\"SchengenCalendar.useMemo[calendarProps]\"], [\n        className,\n        isDateDisabled,\n        fromDate,\n        toDate,\n        getDayClassNames,\n        mode,\n        selected,\n        selectedRange,\n        handleDateSelect,\n        handleRangeSelect,\n        props\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"space-y-4\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Calendar, calendarProps), showValidationMessages && validationResult && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"space-y-2\"\n    }, renderValidationMessage ? renderValidationMessage(validationResult) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: cn(\"flex items-start gap-2 p-3 rounded-md text-sm\", validationResult.isValid ? \"bg-green-50 border border-green-200 text-green-800\" : \"bg-red-50 border border-red-200 text-red-800\")\n    }, validationResult.isValid ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Info, {\n        className: \"h-4 w-4 mt-0.5 flex-shrink-0\"\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircleAlert, {\n        className: \"h-4 w-4 mt-0.5 flex-shrink-0\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, validationResult.message)), !validationResult.isValid && validationResult.conflicts.length > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"text-sm text-gray-600 space-y-1\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        className: \"font-medium\"\n    }, \"Conflicting trips:\"), validationResult.conflicts.map((conflict, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n            key: index,\n            className: \"pl-4 border-l-2 border-red-200\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", null, \"🇪🇺 \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"strong\", null, conflict.tripCountry), \" - \", conflict.overlapDays, \" day\", conflict.overlapDays !== 1 ? 's' : '', \" overlap\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n            className: \"text-xs text-gray-500\"\n        }, (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(conflict.conflictStart, 'MMM d'), \" - \", (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(conflict.conflictEnd, 'MMM d')))))), showAlternativeSuggestions && alternativeDates.length > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"space-y-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        className: \"text-sm font-medium text-gray-700\"\n    }, \"💡 Alternative dates available:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex flex-wrap gap-2\"\n    }, alternativeDates.map((alt, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Button$1, {\n            key: index,\n            variant: \"outline\",\n            size: \"sm\",\n            onClick: ()=>{\n                if (mode === \"single\") {\n                    onSelect?.(alt.start);\n                } else {\n                    onRangeSelect?.(alt);\n                }\n            },\n            className: \"text-xs\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Calendar$1, {\n            className: \"h-3 w-3 mr-1\"\n        }), (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_26__.isSameDay)(alt.start, alt.end) ? (0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(alt.start, 'MMM d') : `${(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(alt.start, 'MMM d')} - ${(0,_barrel_optimize_names_addDays_addMonths_addWeeks_addYears_differenceInCalendarDays_differenceInCalendarMonths_eachDayOfInterval_eachMonthOfInterval_endOfDay_endOfISOWeek_endOfMonth_endOfWeek_endOfYear_format_getISOWeek_getMonth_getWeek_getYear_isAfter_isBefore_isDate_isSameDay_isSameMonth_isSameYear_isToday_max_min_setMonth_setYear_startOfDay_startOfISOWeek_startOfMonth_startOfWeek_startOfYear_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_18__.format)(alt.end, 'MMM d')}`)))), showOccupiedDates && occupiedDates.length > 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"text-xs text-gray-500 border-t pt-3\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center justify-center gap-6 mb-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"w-4 h-4 bg-gray-200 text-gray-600 rounded opacity-60 flex items-center justify-center relative\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"text-xs\"\n    }, \"X\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"absolute inset-0 border-b border-gray-600 rotate-12 transform\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"font-medium\"\n    }, \"Occupied\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"w-4 h-4 bg-gray-50 border border-gray-200 rounded flex items-center justify-center\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircleCheckBig, {\n        className: \"w-2 h-2 text-gray-400\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"font-medium\"\n    }, \"Available\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"w-4 h-4 bg-primary rounded flex items-center justify-center\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircleCheckBig, {\n        className: \"w-2 h-2 text-white\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"font-medium\"\n    }, \"Selected\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"text-center\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Badge, {\n        variant: \"secondary\",\n        className: \"text-xs\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MapPin, {\n        className: \"w-3 h-3 mr-1\"\n    }), occupiedDates.length, \" day\", occupiedDates.length !== 1 ? 's' : '', \" occupied by existing trips\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        className: \"mt-2 text-center text-gray-400 italic\"\n    }, \"💡 Occupied dates are greyed out and cannot be selected\")));\n}\nSchengenCalendar.displayName = \"SchengenCalendar\";\n// Simple country name to flag emoji mapping\nconst COUNTRY_FLAGS = {\n    // Major Schengen countries\n    'Austria': '🇦🇹',\n    'Belgium': '🇧🇪',\n    'Czech Republic': '🇨🇿',\n    'Denmark': '🇩🇰',\n    'Estonia': '🇪🇪',\n    'Finland': '🇫🇮',\n    'France': '🇫🇷',\n    'Germany': '🇩🇪',\n    'Greece': '🇬🇷',\n    'Hungary': '🇭🇺',\n    'Iceland': '🇮🇸',\n    'Italy': '🇮🇹',\n    'Latvia': '🇱🇻',\n    'Liechtenstein': '🇱🇮',\n    'Lithuania': '🇱🇹',\n    'Luxembourg': '🇱🇺',\n    'Malta': '🇲🇹',\n    'Netherlands': '🇳🇱',\n    'Norway': '🇳🇴',\n    'Poland': '🇵🇱',\n    'Portugal': '🇵🇹',\n    'Slovakia': '🇸🇰',\n    'Slovenia': '🇸🇮',\n    'Spain': '🇪🇸',\n    'Sweden': '🇸🇪',\n    'Switzerland': '🇨🇭',\n    // Common variations\n    'The Netherlands': '🇳🇱',\n    'Czech': '🇨🇿',\n    'Czechia': '🇨🇿'\n};\nfunction TripCard({ trip, showEdit = false, showDelete = false, onEdit, onDelete, className, compact = false, showFlag = true, renderFlag }) {\n    const flag = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"TripCard.useMemo[flag]\": ()=>{\n            if (renderFlag) {\n                return renderFlag(trip.country);\n            }\n            if (showFlag) {\n                return COUNTRY_FLAGS[trip.country] || '🇪🇺';\n            }\n            return null;\n        }\n    }[\"TripCard.useMemo[flag]\"], [\n        trip.country,\n        showFlag,\n        renderFlag\n    ]);\n    const duration = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"TripCard.useMemo[duration]\": ()=>{\n            return daysBetween(trip.startDate, trip.endDate) + 1;\n        }\n    }[\"TripCard.useMemo[duration]\"], [\n        trip.startDate,\n        trip.endDate\n    ]);\n    const dateRange = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"TripCard.useMemo[dateRange]\": ()=>{\n            return formatDateRange(trip.startDate, trip.endDate);\n        }\n    }[\"TripCard.useMemo[dateRange]\"], [\n        trip.startDate,\n        trip.endDate\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Card, {\n        className: cn(\"transition-all duration-200 hover:shadow-lg hover:shadow-primary/10\", \"border-l-4 border-l-primary\", compact ? \"p-3\" : \"\", className)\n    }, compact ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"space-y-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-start justify-between\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2 min-w-0\"\n    }, flag && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"text-lg flex-shrink-0\",\n        role: \"img\",\n        \"aria-label\": `${trip.country} flag`\n    }, flag), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"min-w-0\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"h3\", {\n        className: \"font-semibold text-sm truncate\"\n    }, trip.country), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        className: \"text-xs text-gray-500 flex items-center gap-1\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Calendar$1, {\n        className: \"h-3 w-3\"\n    }), dateRange))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-1 flex-shrink-0\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"bg-primary/10 text-primary px-2 py-1 rounded-full text-xs font-medium\"\n    }, duration, \"d\"), (showEdit || showDelete) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex gap-1\"\n    }, showEdit && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"icon\",\n        className: \"h-6 w-6\",\n        onClick: ()=>onEdit?.(trip),\n        \"aria-label\": `Edit trip to ${trip.country}`\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(PenLine, {\n        className: \"h-3 w-3\"\n    })), showDelete && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"icon\",\n        className: \"h-6 w-6 text-red-500 hover:text-red-700 hover:bg-red-50\",\n        onClick: ()=>onDelete?.(trip),\n        \"aria-label\": `Delete trip to ${trip.country}`\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Trash2, {\n        className: \"h-3 w-3\"\n    })))))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CardHeader, {\n        className: \"pb-3\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-start justify-between\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-3\"\n    }, flag && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"text-2xl\",\n        role: \"img\",\n        \"aria-label\": `${trip.country} flag`\n    }, flag), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"h3\", {\n        className: \"font-semibold text-lg\"\n    }, trip.country), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"p\", {\n        className: \"text-sm text-gray-500 flex items-center gap-1\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(MapPin, {\n        className: \"h-3 w-3\"\n    }), \"Schengen Area\"))), (showEdit || showDelete) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex gap-1\"\n    }, showEdit && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"sm\",\n        onClick: ()=>onEdit?.(trip),\n        className: \"h-8 w-8 p-0\",\n        \"aria-label\": `Edit trip to ${trip.country}`\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(PenLine, {\n        className: \"h-4 w-4\"\n    })), showDelete && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"sm\",\n        onClick: ()=>onDelete?.(trip),\n        className: \"h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\",\n        \"aria-label\": `Delete trip to ${trip.country}`\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Trash2, {\n        className: \"h-4 w-4\"\n    }))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CardContent, {\n        className: \"pt-0 space-y-3\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center justify-between text-sm\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2 text-gray-600\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Calendar$1, {\n        className: \"h-4 w-4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, dateRange)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Clock, {\n        className: \"h-4 w-4 text-gray-400\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        className: \"bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium\"\n    }, duration, \" day\", duration !== 1 ? 's' : ''))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        className: \"text-xs text-gray-400 border-t pt-2\"\n    }, \"Trip ID: \", trip.id))));\n}\nTripCard.displayName = \"TripCard\";\n/**\n * Encapsulates the logic for issuing a request to the Stripe API.\n *\n * A custom HTTP client should should implement:\n * 1. A response class which extends HttpClientResponse and wraps around their\n *    own internal representation of a response.\n * 2. A client class which extends HttpClient and implements all methods,\n *    returning their own response class when making requests.\n */ class HttpClient {\n    /** The client name used for diagnostics. */ getClientName() {\n        throw new Error('getClientName not implemented.');\n    }\n    makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        throw new Error('makeRequest not implemented.');\n    }\n    /** Helper to make a consistent timeout error across implementations. */ static makeTimeoutError() {\n        const timeoutErr = new TypeError(HttpClient.TIMEOUT_ERROR_CODE);\n        timeoutErr.code = HttpClient.TIMEOUT_ERROR_CODE;\n        return timeoutErr;\n    }\n}\n// Public API accessible via Stripe.HttpClient\nHttpClient.CONNECTION_CLOSED_ERROR_CODES = [\n    'ECONNRESET',\n    'EPIPE'\n];\nHttpClient.TIMEOUT_ERROR_CODE = 'ETIMEDOUT';\nclass HttpClientResponse {\n    getStatusCode() {\n        return this._statusCode;\n    }\n    getHeaders() {\n        return this._headers;\n    }\n    getRawResponse() {\n        throw new Error('getRawResponse not implemented.');\n    }\n    toStream(streamCompleteCallback) {\n        throw new Error('toStream not implemented.');\n    }\n    toJSON() {\n        throw new Error('toJSON not implemented.');\n    }\n    constructor(statusCode, headers){\n        this._statusCode = statusCode;\n        this._headers = headers;\n    }\n}\n/**\n * HTTP client which uses a `fetch` function to issue requests.\n *\n * By default relies on the global `fetch` function, but an optional function\n * can be passed in. If passing in a function, it is expected to match the Web\n * Fetch API. As an example, this could be the function provided by the\n * node-fetch package (https://github.com/node-fetch/node-fetch).\n */ class FetchHttpClient extends HttpClient {\n    static makeFetchWithRaceTimeout(fetchFn) {\n        return (url, init, timeout)=>{\n            let pendingTimeoutId;\n            const timeoutPromise = new Promise((_, reject)=>{\n                pendingTimeoutId = setTimeout(()=>{\n                    pendingTimeoutId = null;\n                    reject(HttpClient.makeTimeoutError());\n                }, timeout);\n            });\n            const fetchPromise = fetchFn(url, init);\n            return Promise.race([\n                fetchPromise,\n                timeoutPromise\n            ]).finally(()=>{\n                if (pendingTimeoutId) {\n                    clearTimeout(pendingTimeoutId);\n                }\n            });\n        };\n    }\n    static makeFetchWithAbortTimeout(fetchFn) {\n        return async (url, init, timeout)=>{\n            // Use AbortController because AbortSignal.timeout() was added later in Node v17.3.0, v16.14.0\n            const abort = new AbortController();\n            let timeoutId = setTimeout(()=>{\n                timeoutId = null;\n                abort.abort(HttpClient.makeTimeoutError());\n            }, timeout);\n            try {\n                return await fetchFn(url, Object.assign(Object.assign({}, init), {\n                    signal: abort.signal\n                }));\n            } catch (err) {\n                // Some implementations, like node-fetch, do not respect the reason passed to AbortController.abort()\n                // and instead it always throws an AbortError\n                // We catch this case to normalise all timeout errors\n                if (err.name === 'AbortError') {\n                    throw HttpClient.makeTimeoutError();\n                } else {\n                    throw err;\n                }\n            } finally{\n                if (timeoutId) {\n                    clearTimeout(timeoutId);\n                }\n            }\n        };\n    }\n    /** @override. */ getClientName() {\n        return 'fetch';\n    }\n    async makeRequest(host, port, path, method, headers, requestData, protocol, timeout) {\n        const isInsecureConnection = protocol === 'http';\n        const url = new URL(path, `${isInsecureConnection ? 'http' : 'https'}://${host}`);\n        url.port = port;\n        // For methods which expect payloads, we should always pass a body value\n        // even when it is empty. Without this, some JS runtimes (eg. Deno) will\n        // inject a second Content-Length header. See https://github.com/stripe/stripe-node/issues/1519\n        // for more details.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        const body = requestData || (methodHasPayload ? '' : undefined);\n        const res = await this._fetchFn(url.toString(), {\n            method,\n            // @ts-ignore\n            headers,\n            // @ts-ignore\n            body\n        }, timeout);\n        return new FetchHttpClientResponse(res);\n    }\n    constructor(fetchFn){\n        super();\n        // Default to global fetch if available\n        if (!fetchFn) {\n            if (!globalThis.fetch) {\n                throw new Error('fetch() function not provided and is not defined in the global scope. ' + 'You must provide a fetch implementation.');\n            }\n            fetchFn = globalThis.fetch;\n        }\n        // Both timeout behaviors differs from Node:\n        // - Fetch uses a single timeout for the entire length of the request.\n        // - Node is more fine-grained and resets the timeout after each stage of the request.\n        if (globalThis.AbortController) {\n            // Utilise native AbortController if available\n            // AbortController was added in Node v15.0.0, v14.17.0\n            this._fetchFn = FetchHttpClient.makeFetchWithAbortTimeout(fetchFn);\n        } else {\n            // Fall back to racing against a timeout promise if not available in the runtime\n            // This does not actually cancel the underlying fetch operation or resources\n            this._fetchFn = FetchHttpClient.makeFetchWithRaceTimeout(fetchFn);\n        }\n    }\n}\nclass FetchHttpClientResponse extends HttpClientResponse {\n    getRawResponse() {\n        return this._res;\n    }\n    toStream(streamCompleteCallback) {\n        // Unfortunately `fetch` does not have event handlers for when the stream is\n        // completely read. We therefore invoke the streamCompleteCallback right\n        // away. This callback emits a response event with metadata and completes\n        // metrics, so it's ok to do this without waiting for the stream to be\n        // completely read.\n        streamCompleteCallback();\n        // Fetch's `body` property is expected to be a readable stream of the body.\n        return this._res.body;\n    }\n    toJSON() {\n        return this._res.json();\n    }\n    static _transformHeadersToObject(headers) {\n        // Fetch uses a Headers instance so this must be converted to a barebones\n        // JS object to meet the HttpClient interface.\n        const headersObj = {};\n        for (const entry of headers){\n            if (!Array.isArray(entry) || entry.length != 2) {\n                throw new Error('Response objects produced by the fetch function given to FetchHttpClient do not have an iterable headers map. Response#headers should be an iterable object.');\n            }\n            headersObj[entry[0]] = entry[1];\n        }\n        return headersObj;\n    }\n    constructor(res){\n        super(res.status, FetchHttpClientResponse._transformHeadersToObject(res.headers));\n        this._res = res;\n    }\n}\n/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */ class CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */ computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */ computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n    /**\n     * Computes a SHA-256 hash of the data.\n     */ computeSHA256Async(data) {\n        throw new Error('computeSHA256 not implemented.');\n    }\n}\n/**\n * If the crypto provider only supports asynchronous operations,\n * throw CryptoProviderOnlySupportsAsyncError instead of\n * a generic error so that the caller can choose to provide\n * a more helpful error message to direct the user to use\n * an asynchronous pathway.\n */ class CryptoProviderOnlySupportsAsyncError extends Error {\n}\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */ class SubtleCryptoProvider extends CryptoProvider {\n    /** @override */ computeHMACSignature(payload, secret) {\n        throw new CryptoProviderOnlySupportsAsyncError('SubtleCryptoProvider cannot be used in a synchronous context.');\n    }\n    /** @override */ async computeHMACSignatureAsync(payload, secret) {\n        const encoder = new TextEncoder();\n        const key = await this.subtleCrypto.importKey('raw', encoder.encode(secret), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256'\n            }\n        }, false, [\n            'sign'\n        ]);\n        const signatureBuffer = await this.subtleCrypto.sign('hmac', key, encoder.encode(payload));\n        // crypto.subtle returns the signature in base64 format. This must be\n        // encoded in hex to match the CryptoProvider contract. We map each byte in\n        // the buffer to its corresponding hex octet and then combine into a string.\n        const signatureBytes = new Uint8Array(signatureBuffer);\n        const signatureHexCodes = new Array(signatureBytes.length);\n        for(let i = 0; i < signatureBytes.length; i++){\n            signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n        }\n        return signatureHexCodes.join('');\n    }\n    /** @override */ async computeSHA256Async(data) {\n        return new Uint8Array(await this.subtleCrypto.digest('SHA-256', data));\n    }\n    constructor(subtleCrypto){\n        super();\n        // If no subtle crypto is interface, default to the global namespace. This\n        // is to allow custom interfaces (eg. using the Node webcrypto interface in\n        // tests).\n        this.subtleCrypto = subtleCrypto || crypto.subtle;\n    }\n}\n// Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\nconst byteHexMapping = new Array(256);\nfor(let i = 0; i < byteHexMapping.length; i++){\n    byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n/**\n * Interface encapsulating various utility functions whose\n * implementations depend on the platform / JS runtime.\n */ class PlatformFunctions {\n    /**\n     * Gets uname with Node's built-in `exec` function, if available.\n     */ getUname() {\n        throw new Error('getUname not implemented.');\n    }\n    /**\n     * Generates a v4 UUID. See https://stackoverflow.com/a/2117523\n     */ uuid4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{\n            const r = Math.random() * 16 | 0;\n            const v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    }\n    /**\n     * Compares strings in constant time.\n     */ secureCompare(a, b) {\n        // return early here if buffer lengths are not equal\n        if (a.length !== b.length) {\n            return false;\n        }\n        const len = a.length;\n        let result = 0;\n        for(let i = 0; i < len; ++i){\n            result |= a.charCodeAt(i) ^ b.charCodeAt(i);\n        }\n        return result === 0;\n    }\n    /**\n     * Creates an event emitter.\n     */ createEmitter() {\n        throw new Error('createEmitter not implemented.');\n    }\n    /**\n     * Checks if the request data is a stream. If so, read the entire stream\n     * to a buffer and return the buffer.\n     */ tryBufferData(data) {\n        throw new Error('tryBufferData not implemented.');\n    }\n    /**\n     * Creates an HTTP client which uses the Node `http` and `https` packages\n     * to issue requests.\n     */ createNodeHttpClient(agent) {\n        throw new Error('createNodeHttpClient not implemented.');\n    }\n    /**\n     * Creates an HTTP client for issuing Stripe API requests which uses the Web\n     * Fetch API.\n     *\n     * A fetch function can optionally be passed in as a parameter. If none is\n     * passed, will default to the default `fetch` function in the global scope.\n     */ createFetchHttpClient(fetchFn) {\n        return new FetchHttpClient(fetchFn);\n    }\n    /**\n     * Creates an HTTP client using runtime-specific APIs.\n     */ createDefaultHttpClient() {\n        throw new Error('createDefaultHttpClient not implemented.');\n    }\n    /**\n     * Creates a CryptoProvider which uses the Node `crypto` package for its computations.\n     */ createNodeCryptoProvider() {\n        throw new Error('createNodeCryptoProvider not implemented.');\n    }\n    /**\n     * Creates a CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n     */ createSubtleCryptoProvider(subtleCrypto) {\n        return new SubtleCryptoProvider(subtleCrypto);\n    }\n    createDefaultCryptoProvider() {\n        throw new Error('createDefaultCryptoProvider not implemented.');\n    }\n    constructor(){\n        this._fetchFn = null;\n        this._agent = null;\n    }\n}\n/**\n * @private\n * (For internal use in stripe-node.)\n * Wrapper around the Event Web API.\n */ class _StripeEvent extends Event {\n    constructor(eventName, data){\n        super(eventName);\n        this.data = data;\n    }\n}\n/** Minimal EventEmitter wrapper around EventTarget. */ class StripeEmitter {\n    on(eventName, listener) {\n        const listenerWrapper = (event)=>{\n            listener(event.data);\n        };\n        this.listenerMapping.set(listener, listenerWrapper);\n        return this.eventTarget.addEventListener(eventName, listenerWrapper);\n    }\n    removeListener(eventName, listener) {\n        const listenerWrapper = this.listenerMapping.get(listener);\n        this.listenerMapping.delete(listener);\n        return this.eventTarget.removeEventListener(eventName, listenerWrapper);\n    }\n    once(eventName, listener) {\n        const listenerWrapper = (event)=>{\n            listener(event.data);\n        };\n        this.listenerMapping.set(listener, listenerWrapper);\n        return this.eventTarget.addEventListener(eventName, listenerWrapper, {\n            once: true\n        });\n    }\n    emit(eventName, data) {\n        return this.eventTarget.dispatchEvent(new _StripeEvent(eventName, data));\n    }\n    constructor(){\n        this.eventTarget = new EventTarget();\n        this.listenerMapping = new Map();\n    }\n}\n/**\n * Specializes WebPlatformFunctions using APIs available in Web workers.\n */ class WebPlatformFunctions extends PlatformFunctions {\n    /** @override */ getUname() {\n        return Promise.resolve(null);\n    }\n    /** @override */ createEmitter() {\n        return new StripeEmitter();\n    }\n    /** @override */ tryBufferData(data) {\n        if (data.file.data instanceof ReadableStream) {\n            throw new Error('Uploading a file as a stream is not supported in non-Node environments. Please open or upvote an issue at github.com/stripe/stripe-node if you use this, detailing your use-case.');\n        }\n        return Promise.resolve(data);\n    }\n    /** @override */ createNodeHttpClient() {\n        throw new Error('Stripe: `createNodeHttpClient()` is not available in non-Node environments. Please use `createFetchHttpClient()` instead.');\n    }\n    /** @override */ createDefaultHttpClient() {\n        return super.createFetchHttpClient();\n    }\n    /** @override */ createNodeCryptoProvider() {\n        throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n    }\n    /** @override */ createDefaultCryptoProvider() {\n        return this.createSubtleCryptoProvider();\n    }\n}\n/* eslint-disable camelcase */ /* eslint-disable no-warning-comments */ const generateV1Error = (rawStripeError)=>{\n    switch(rawStripeError.type){\n        case 'card_error':\n            return new StripeCardError(rawStripeError);\n        case 'invalid_request_error':\n            return new StripeInvalidRequestError(rawStripeError);\n        case 'api_error':\n            return new StripeAPIError(rawStripeError);\n        case 'authentication_error':\n            return new StripeAuthenticationError(rawStripeError);\n        case 'rate_limit_error':\n            return new StripeRateLimitError(rawStripeError);\n        case 'idempotency_error':\n            return new StripeIdempotencyError(rawStripeError);\n        case 'invalid_grant':\n            return new StripeInvalidGrantError(rawStripeError);\n        default:\n            return new StripeUnknownError(rawStripeError);\n    }\n};\n// eslint-disable-next-line complexity\nconst generateV2Error = (rawStripeError)=>{\n    switch(rawStripeError.type){\n        // switchCases: The beginning of the section generated from our OpenAPI spec\n        case 'temporary_session_expired':\n            return new TemporarySessionExpiredError(rawStripeError);\n    }\n    // Special handling for requests with missing required fields in V2 APIs.\n    // invalid_field response in V2 APIs returns the field 'code' instead of 'type'.\n    switch(rawStripeError.code){\n        case 'invalid_fields':\n            return new StripeInvalidRequestError(rawStripeError);\n    }\n    return generateV1Error(rawStripeError);\n};\n/**\n * StripeError is the base error from which all other more specific Stripe errors derive.\n * Specifically for errors returned from Stripe's REST API.\n */ class StripeError extends Error {\n    constructor(raw = {}, type = null){\n        super(raw.message);\n        this.type = type || this.constructor.name;\n        this.raw = raw;\n        this.rawType = raw.type;\n        this.code = raw.code;\n        this.doc_url = raw.doc_url;\n        this.param = raw.param;\n        this.detail = raw.detail;\n        this.headers = raw.headers;\n        this.requestId = raw.requestId;\n        this.statusCode = raw.statusCode;\n        // @ts-ignore\n        this.message = raw.message;\n        this.userMessage = raw.user_message;\n        this.charge = raw.charge;\n        this.decline_code = raw.decline_code;\n        this.payment_intent = raw.payment_intent;\n        this.payment_method = raw.payment_method;\n        this.payment_method_type = raw.payment_method_type;\n        this.setup_intent = raw.setup_intent;\n        this.source = raw.source;\n    }\n}\n/**\n * Helper factory which takes raw stripe errors and outputs wrapping instances\n */ StripeError.generate = generateV1Error;\n// Specific Stripe Error types:\n/**\n * CardError is raised when a user enters a card that can't be charged for\n * some reason.\n */ class StripeCardError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeCardError');\n    }\n}\n/**\n * InvalidRequestError is raised when a request is initiated with invalid\n * parameters.\n */ class StripeInvalidRequestError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeInvalidRequestError');\n    }\n}\n/**\n * APIError is a generic error that may be raised in cases where none of the\n * other named errors cover the problem. It could also be raised in the case\n * that a new error has been introduced in the API, but this version of the\n * Node.JS SDK doesn't know how to handle it.\n */ class StripeAPIError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeAPIError');\n    }\n}\n/**\n * AuthenticationError is raised when invalid credentials are used to connect\n * to Stripe's servers.\n */ class StripeAuthenticationError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeAuthenticationError');\n    }\n}\n/**\n * PermissionError is raised in cases where access was attempted on a resource\n * that wasn't allowed.\n */ class StripePermissionError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripePermissionError');\n    }\n}\n/**\n * RateLimitError is raised in cases where an account is putting too much load\n * on Stripe's API servers (usually by performing too many requests). Please\n * back off on request rate.\n */ class StripeRateLimitError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeRateLimitError');\n    }\n}\n/**\n * StripeConnectionError is raised in the event that the SDK can't connect to\n * Stripe's servers. That can be for a variety of different reasons from a\n * downed network to a bad TLS certificate.\n */ class StripeConnectionError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeConnectionError');\n    }\n}\n/**\n * SignatureVerificationError is raised when the signature verification for a\n * webhook fails\n */ class StripeSignatureVerificationError extends StripeError {\n    constructor(header, payload, raw = {}){\n        super(raw, 'StripeSignatureVerificationError');\n        this.header = header;\n        this.payload = payload;\n    }\n}\n/**\n * IdempotencyError is raised in cases where an idempotency key was used\n * improperly.\n */ class StripeIdempotencyError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeIdempotencyError');\n    }\n}\n/**\n * InvalidGrantError is raised when a specified code doesn't exist, is\n * expired, has been used, or doesn't belong to you; a refresh token doesn't\n * exist, or doesn't belong to you; or if an API key's mode (live or test)\n * doesn't match the mode of a code or refresh token.\n */ class StripeInvalidGrantError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeInvalidGrantError');\n    }\n}\n/**\n * Any other error from Stripe not specifically captured above\n */ class StripeUnknownError extends StripeError {\n    constructor(raw = {}){\n        super(raw, 'StripeUnknownError');\n    }\n}\n// classDefinitions: The beginning of the section generated from our OpenAPI spec\nclass TemporarySessionExpiredError extends StripeError {\n    constructor(rawStripeError = {}){\n        super(rawStripeError, 'TemporarySessionExpiredError');\n    }\n} // classDefinitions: The end of the section generated from our OpenAPI spec\nvar _Error = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    StripeAPIError: StripeAPIError,\n    StripeAuthenticationError: StripeAuthenticationError,\n    StripeCardError: StripeCardError,\n    StripeConnectionError: StripeConnectionError,\n    StripeError: StripeError,\n    StripeIdempotencyError: StripeIdempotencyError,\n    StripeInvalidGrantError: StripeInvalidGrantError,\n    StripeInvalidRequestError: StripeInvalidRequestError,\n    StripePermissionError: StripePermissionError,\n    StripeRateLimitError: StripeRateLimitError,\n    StripeSignatureVerificationError: StripeSignatureVerificationError,\n    StripeUnknownError: StripeUnknownError,\n    TemporarySessionExpiredError: TemporarySessionExpiredError,\n    generateV1Error: generateV1Error,\n    generateV2Error: generateV2Error\n});\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis :  false ? 0 : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getAugmentedNamespace(n) {\n    if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;\n    var f = n.default;\n    if (typeof f == \"function\") {\n        var a = function a() {\n            var isInstance = false;\n            try {\n                isInstance = this instanceof a;\n            } catch  {}\n            if (isInstance) {\n                return Reflect.construct(f, arguments, this.constructor);\n            }\n            return f.apply(this, arguments);\n        };\n        a.prototype = f.prototype;\n    } else a = {};\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n    Object.keys(n).forEach(function(k) {\n        var d = Object.getOwnPropertyDescriptor(n, k);\n        Object.defineProperty(a, k, d.get ? d : {\n            enumerable: true,\n            get: function() {\n                return n[k];\n            }\n        });\n    });\n    return a;\n}\nvar type;\nvar hasRequiredType;\nfunction requireType() {\n    if (hasRequiredType) return type;\n    hasRequiredType = 1;\n    /** @type {import('./type')} */ type = TypeError;\n    return type;\n}\nvar _nodeResolve_empty = {};\nvar _nodeResolve_empty$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    default: _nodeResolve_empty\n});\nvar require$$0 = /*@__PURE__*/ getAugmentedNamespace(_nodeResolve_empty$1);\nvar objectInspect;\nvar hasRequiredObjectInspect;\nfunction requireObjectInspect() {\n    if (hasRequiredObjectInspect) return objectInspect;\n    hasRequiredObjectInspect = 1;\n    var hasMap = typeof Map === 'function' && Map.prototype;\n    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\n    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\n    var mapForEach = hasMap && Map.prototype.forEach;\n    var hasSet = typeof Set === 'function' && Set.prototype;\n    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\n    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\n    var setForEach = hasSet && Set.prototype.forEach;\n    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\n    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\n    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\n    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\n    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\n    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\n    var booleanValueOf = Boolean.prototype.valueOf;\n    var objectToString = Object.prototype.toString;\n    var functionToString = Function.prototype.toString;\n    var $match = String.prototype.match;\n    var $slice = String.prototype.slice;\n    var $replace = String.prototype.replace;\n    var $toUpperCase = String.prototype.toUpperCase;\n    var $toLowerCase = String.prototype.toLowerCase;\n    var $test = RegExp.prototype.test;\n    var $concat = Array.prototype.concat;\n    var $join = Array.prototype.join;\n    var $arrSlice = Array.prototype.slice;\n    var $floor = Math.floor;\n    var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\n    var gOPS = Object.getOwnPropertySymbols;\n    var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\n    var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n    // ie, `has-tostringtag/shams\n    var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol') ? Symbol.toStringTag : null;\n    var isEnumerable = Object.prototype.propertyIsEnumerable;\n    var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto\n     ? function(O) {\n        return O.__proto__; // eslint-disable-line no-proto\n    } : null);\n    function addNumericSeparator(num, str) {\n        if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1000 || $test.call(/e/, str)) {\n            return str;\n        }\n        var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n        if (typeof num === 'number') {\n            var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n            if (int !== num) {\n                var intStr = String(int);\n                var dec = $slice.call(str, intStr.length + 1);\n                return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n            }\n        }\n        return $replace.call(str, sepRegex, '$&_');\n    }\n    var utilInspect = require$$0;\n    var inspectCustom = utilInspect.custom;\n    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;\n    var quotes = {\n        __proto__: null,\n        'double': '\"',\n        single: \"'\"\n    };\n    var quoteREs = {\n        __proto__: null,\n        'double': /([\"\\\\])/g,\n        single: /(['\\\\])/g\n    };\n    objectInspect = function inspect_(obj, options, depth, seen) {\n        var opts = options || {};\n        if (has(opts, 'quoteStyle') && !has(quotes, opts.quoteStyle)) {\n            throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n        }\n        if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {\n            throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n        }\n        var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n        if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n            throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n        }\n        if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {\n            throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n        }\n        if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n            throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n        }\n        var numericSeparator = opts.numericSeparator;\n        if (typeof obj === 'undefined') {\n            return 'undefined';\n        }\n        if (obj === null) {\n            return 'null';\n        }\n        if (typeof obj === 'boolean') {\n            return obj ? 'true' : 'false';\n        }\n        if (typeof obj === 'string') {\n            return inspectString(obj, opts);\n        }\n        if (typeof obj === 'number') {\n            if (obj === 0) {\n                return Infinity / obj > 0 ? '0' : '-0';\n            }\n            var str = String(obj);\n            return numericSeparator ? addNumericSeparator(obj, str) : str;\n        }\n        if (typeof obj === 'bigint') {\n            var bigIntStr = String(obj) + 'n';\n            return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n        }\n        var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n        if (typeof depth === 'undefined') {\n            depth = 0;\n        }\n        if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n            return isArray(obj) ? '[Array]' : '[Object]';\n        }\n        var indent = getIndent(opts, depth);\n        if (typeof seen === 'undefined') {\n            seen = [];\n        } else if (indexOf(seen, obj) >= 0) {\n            return '[Circular]';\n        }\n        function inspect(value, from, noIndent) {\n            if (from) {\n                seen = $arrSlice.call(seen);\n                seen.push(from);\n            }\n            if (noIndent) {\n                var newOpts = {\n                    depth: opts.depth\n                };\n                if (has(opts, 'quoteStyle')) {\n                    newOpts.quoteStyle = opts.quoteStyle;\n                }\n                return inspect_(value, newOpts, depth + 1, seen);\n            }\n            return inspect_(value, opts, depth + 1, seen);\n        }\n        if (typeof obj === 'function' && !isRegExp(obj)) {\n            var name = nameOf(obj);\n            var keys = arrObjKeys(obj, inspect);\n            return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n        }\n        if (isSymbol(obj)) {\n            var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n            return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n        }\n        if (isElement(obj)) {\n            var s = '<' + $toLowerCase.call(String(obj.nodeName));\n            var attrs = obj.attributes || [];\n            for(var i = 0; i < attrs.length; i++){\n                s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n            }\n            s += '>';\n            if (obj.childNodes && obj.childNodes.length) {\n                s += '...';\n            }\n            s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n            return s;\n        }\n        if (isArray(obj)) {\n            if (obj.length === 0) {\n                return '[]';\n            }\n            var xs = arrObjKeys(obj, inspect);\n            if (indent && !singleLineValues(xs)) {\n                return '[' + indentedJoin(xs, indent) + ']';\n            }\n            return '[ ' + $join.call(xs, ', ') + ' ]';\n        }\n        if (isError(obj)) {\n            var parts = arrObjKeys(obj, inspect);\n            if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable.call(obj, 'cause')) {\n                return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n            }\n            if (parts.length === 0) {\n                return '[' + String(obj) + ']';\n            }\n            return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n        }\n        if (typeof obj === 'object' && customInspect) {\n            if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && utilInspect) {\n                return utilInspect(obj, {\n                    depth: maxDepth - depth\n                });\n            } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n                return obj.inspect();\n            }\n        }\n        if (isMap(obj)) {\n            var mapParts = [];\n            if (mapForEach) {\n                mapForEach.call(obj, function(value, key) {\n                    mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n                });\n            }\n            return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n        }\n        if (isSet(obj)) {\n            var setParts = [];\n            if (setForEach) {\n                setForEach.call(obj, function(value) {\n                    setParts.push(inspect(value, obj));\n                });\n            }\n            return collectionOf('Set', setSize.call(obj), setParts, indent);\n        }\n        if (isWeakMap(obj)) {\n            return weakCollectionOf('WeakMap');\n        }\n        if (isWeakSet(obj)) {\n            return weakCollectionOf('WeakSet');\n        }\n        if (isWeakRef(obj)) {\n            return weakCollectionOf('WeakRef');\n        }\n        if (isNumber(obj)) {\n            return markBoxed(inspect(Number(obj)));\n        }\n        if (isBigInt(obj)) {\n            return markBoxed(inspect(bigIntValueOf.call(obj)));\n        }\n        if (isBoolean(obj)) {\n            return markBoxed(booleanValueOf.call(obj));\n        }\n        if (isString(obj)) {\n            return markBoxed(inspect(String(obj)));\n        }\n        // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other\n        /* eslint-env browser */ if (false) {}\n        if (typeof globalThis !== 'undefined' && obj === globalThis || typeof commonjsGlobal !== 'undefined' && obj === commonjsGlobal) {\n            return '{ [object globalThis] }';\n        }\n        if (!isDate(obj) && !isRegExp(obj)) {\n            var ys = arrObjKeys(obj, inspect);\n            var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n            var protoTag = obj instanceof Object ? '' : 'null prototype';\n            var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n            var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n            var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n            if (ys.length === 0) {\n                return tag + '{}';\n            }\n            if (indent) {\n                return tag + '{' + indentedJoin(ys, indent) + '}';\n            }\n            return tag + '{ ' + $join.call(ys, ', ') + ' }';\n        }\n        return String(obj);\n    };\n    function wrapQuotes(s, defaultStyle, opts) {\n        var style = opts.quoteStyle || defaultStyle;\n        var quoteChar = quotes[style];\n        return quoteChar + s + quoteChar;\n    }\n    function quote(s) {\n        return $replace.call(String(s), /\"/g, '&quot;');\n    }\n    function canTrustToString(obj) {\n        return !toStringTag || !(typeof obj === 'object' && (toStringTag in obj || typeof obj[toStringTag] !== 'undefined'));\n    }\n    function isArray(obj) {\n        return toStr(obj) === '[object Array]' && canTrustToString(obj);\n    }\n    function isDate(obj) {\n        return toStr(obj) === '[object Date]' && canTrustToString(obj);\n    }\n    function isRegExp(obj) {\n        return toStr(obj) === '[object RegExp]' && canTrustToString(obj);\n    }\n    function isError(obj) {\n        return toStr(obj) === '[object Error]' && canTrustToString(obj);\n    }\n    function isString(obj) {\n        return toStr(obj) === '[object String]' && canTrustToString(obj);\n    }\n    function isNumber(obj) {\n        return toStr(obj) === '[object Number]' && canTrustToString(obj);\n    }\n    function isBoolean(obj) {\n        return toStr(obj) === '[object Boolean]' && canTrustToString(obj);\n    }\n    // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\n    function isSymbol(obj) {\n        if (hasShammedSymbols) {\n            return obj && typeof obj === 'object' && obj instanceof Symbol;\n        }\n        if (typeof obj === 'symbol') {\n            return true;\n        }\n        if (!obj || typeof obj !== 'object' || !symToString) {\n            return false;\n        }\n        try {\n            symToString.call(obj);\n            return true;\n        } catch (e) {}\n        return false;\n    }\n    function isBigInt(obj) {\n        if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n            return false;\n        }\n        try {\n            bigIntValueOf.call(obj);\n            return true;\n        } catch (e) {}\n        return false;\n    }\n    var hasOwn = Object.prototype.hasOwnProperty || function(key) {\n        return key in this;\n    };\n    function has(obj, key) {\n        return hasOwn.call(obj, key);\n    }\n    function toStr(obj) {\n        return objectToString.call(obj);\n    }\n    function nameOf(f) {\n        if (f.name) {\n            return f.name;\n        }\n        var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n        if (m) {\n            return m[1];\n        }\n        return null;\n    }\n    function indexOf(xs, x) {\n        if (xs.indexOf) {\n            return xs.indexOf(x);\n        }\n        for(var i = 0, l = xs.length; i < l; i++){\n            if (xs[i] === x) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function isMap(x) {\n        if (!mapSize || !x || typeof x !== 'object') {\n            return false;\n        }\n        try {\n            mapSize.call(x);\n            try {\n                setSize.call(x);\n            } catch (s) {\n                return true;\n            }\n            return x instanceof Map; // core-js workaround, pre-v2.5.0\n        } catch (e) {}\n        return false;\n    }\n    function isWeakMap(x) {\n        if (!weakMapHas || !x || typeof x !== 'object') {\n            return false;\n        }\n        try {\n            weakMapHas.call(x, weakMapHas);\n            try {\n                weakSetHas.call(x, weakSetHas);\n            } catch (s) {\n                return true;\n            }\n            return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n        } catch (e) {}\n        return false;\n    }\n    function isWeakRef(x) {\n        if (!weakRefDeref || !x || typeof x !== 'object') {\n            return false;\n        }\n        try {\n            weakRefDeref.call(x);\n            return true;\n        } catch (e) {}\n        return false;\n    }\n    function isSet(x) {\n        if (!setSize || !x || typeof x !== 'object') {\n            return false;\n        }\n        try {\n            setSize.call(x);\n            try {\n                mapSize.call(x);\n            } catch (m) {\n                return true;\n            }\n            return x instanceof Set; // core-js workaround, pre-v2.5.0\n        } catch (e) {}\n        return false;\n    }\n    function isWeakSet(x) {\n        if (!weakSetHas || !x || typeof x !== 'object') {\n            return false;\n        }\n        try {\n            weakSetHas.call(x, weakSetHas);\n            try {\n                weakMapHas.call(x, weakMapHas);\n            } catch (s) {\n                return true;\n            }\n            return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n        } catch (e) {}\n        return false;\n    }\n    function isElement(x) {\n        if (!x || typeof x !== 'object') {\n            return false;\n        }\n        if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n            return true;\n        }\n        return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n    }\n    function inspectString(str, opts) {\n        if (str.length > opts.maxStringLength) {\n            var remaining = str.length - opts.maxStringLength;\n            var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n            return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n        }\n        var quoteRE = quoteREs[opts.quoteStyle || 'single'];\n        quoteRE.lastIndex = 0;\n        // eslint-disable-next-line no-control-regex\n        var s = $replace.call($replace.call(str, quoteRE, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n        return wrapQuotes(s, 'single', opts);\n    }\n    function lowbyte(c) {\n        var n = c.charCodeAt(0);\n        var x = {\n            8: 'b',\n            9: 't',\n            10: 'n',\n            12: 'f',\n            13: 'r'\n        }[n];\n        if (x) {\n            return '\\\\' + x;\n        }\n        return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n    }\n    function markBoxed(str) {\n        return 'Object(' + str + ')';\n    }\n    function weakCollectionOf(type) {\n        return type + ' { ? }';\n    }\n    function collectionOf(type, size, entries, indent) {\n        var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n        return type + ' (' + size + ') {' + joinedEntries + '}';\n    }\n    function singleLineValues(xs) {\n        for(var i = 0; i < xs.length; i++){\n            if (indexOf(xs[i], '\\n') >= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function getIndent(opts, depth) {\n        var baseIndent;\n        if (opts.indent === '\\t') {\n            baseIndent = '\\t';\n        } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n            baseIndent = $join.call(Array(opts.indent + 1), ' ');\n        } else {\n            return null;\n        }\n        return {\n            base: baseIndent,\n            prev: $join.call(Array(depth + 1), baseIndent)\n        };\n    }\n    function indentedJoin(xs, indent) {\n        if (xs.length === 0) {\n            return '';\n        }\n        var lineJoiner = '\\n' + indent.prev + indent.base;\n        return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n    }\n    function arrObjKeys(obj, inspect) {\n        var isArr = isArray(obj);\n        var xs = [];\n        if (isArr) {\n            xs.length = obj.length;\n            for(var i = 0; i < obj.length; i++){\n                xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n            }\n        }\n        var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n        var symMap;\n        if (hasShammedSymbols) {\n            symMap = {};\n            for(var k = 0; k < syms.length; k++){\n                symMap['$' + syms[k]] = syms[k];\n            }\n        }\n        for(var key in obj){\n            if (!has(obj, key)) {\n                continue;\n            } // eslint-disable-line no-restricted-syntax, no-continue\n            if (isArr && String(Number(key)) === key && key < obj.length) {\n                continue;\n            } // eslint-disable-line no-restricted-syntax, no-continue\n            if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n                continue; // eslint-disable-line no-restricted-syntax, no-continue\n            } else if ($test.call(/[^\\w$]/, key)) {\n                xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n            } else {\n                xs.push(key + ': ' + inspect(obj[key], obj));\n            }\n        }\n        if (typeof gOPS === 'function') {\n            for(var j = 0; j < syms.length; j++){\n                if (isEnumerable.call(obj, syms[j])) {\n                    xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n                }\n            }\n        }\n        return xs;\n    }\n    return objectInspect;\n}\nvar sideChannelList;\nvar hasRequiredSideChannelList;\nfunction requireSideChannelList() {\n    if (hasRequiredSideChannelList) return sideChannelList;\n    hasRequiredSideChannelList = 1;\n    var inspect = /*@__PURE__*/ requireObjectInspect();\n    var $TypeError = /*@__PURE__*/ requireType();\n    /*\n\t* This function traverses the list returning the node corresponding to the given key.\n\t*\n\t* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list.\n\t* By doing so, all the recently used nodes can be accessed relatively quickly.\n\t*/ /** @type {import('./list.d.ts').listGetNode} */ // eslint-disable-next-line consistent-return\n    var listGetNode = function(list, key, isDelete) {\n        /** @type {typeof list | NonNullable<(typeof list)['next']>} */ var prev = list;\n        /** @type {(typeof list)['next']} */ var curr;\n        // eslint-disable-next-line eqeqeq\n        for(; (curr = prev.next) != null; prev = curr){\n            if (curr.key === key) {\n                prev.next = curr.next;\n                if (!isDelete) {\n                    // eslint-disable-next-line no-extra-parens\n                    curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;\n                    list.next = curr; // eslint-disable-line no-param-reassign\n                }\n                return curr;\n            }\n        }\n    };\n    /** @type {import('./list.d.ts').listGet} */ var listGet = function(objects, key) {\n        if (!objects) {\n            return void undefined;\n        }\n        var node = listGetNode(objects, key);\n        return node && node.value;\n    };\n    /** @type {import('./list.d.ts').listSet} */ var listSet = function(objects, key, value) {\n        var node = listGetNode(objects, key);\n        if (node) {\n            node.value = value;\n        } else {\n            // Prepend the new node to the beginning of the list\n            objects.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */ {\n                key: key,\n                next: objects.next,\n                value: value\n            };\n        }\n    };\n    /** @type {import('./list.d.ts').listHas} */ var listHas = function(objects, key) {\n        if (!objects) {\n            return false;\n        }\n        return !!listGetNode(objects, key);\n    };\n    /** @type {import('./list.d.ts').listDelete} */ // eslint-disable-next-line consistent-return\n    var listDelete = function(objects, key) {\n        if (objects) {\n            return listGetNode(objects, key, true);\n        }\n    };\n    /** @type {import('.')} */ sideChannelList = function getSideChannelList() {\n        /** @typedef {ReturnType<typeof getSideChannelList>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {import('./list.d.ts').RootNode<V, K> | undefined} */ var $o;\n        /** @type {Channel} */ var channel = {\n            assert: function(key) {\n                if (!channel.has(key)) {\n                    throw new $TypeError('Side channel does not contain ' + inspect(key));\n                }\n            },\n            'delete': function(key) {\n                var root = $o && $o.next;\n                var deletedNode = listDelete($o, key);\n                if (deletedNode && root && root === deletedNode) {\n                    $o = void undefined;\n                }\n                return !!deletedNode;\n            },\n            get: function(key) {\n                return listGet($o, key);\n            },\n            has: function(key) {\n                return listHas($o, key);\n            },\n            set: function(key, value) {\n                if (!$o) {\n                    // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head\n                    $o = {\n                        next: void undefined\n                    };\n                }\n                // eslint-disable-next-line no-extra-parens\n                listSet(/** @type {NonNullable<typeof $o>} */ $o, key, value);\n            }\n        };\n        // @ts-expect-error TODO: figure out why this is erroring\n        return channel;\n    };\n    return sideChannelList;\n}\nvar esObjectAtoms;\nvar hasRequiredEsObjectAtoms;\nfunction requireEsObjectAtoms() {\n    if (hasRequiredEsObjectAtoms) return esObjectAtoms;\n    hasRequiredEsObjectAtoms = 1;\n    /** @type {import('.')} */ esObjectAtoms = Object;\n    return esObjectAtoms;\n}\nvar esErrors;\nvar hasRequiredEsErrors;\nfunction requireEsErrors() {\n    if (hasRequiredEsErrors) return esErrors;\n    hasRequiredEsErrors = 1;\n    /** @type {import('.')} */ esErrors = Error;\n    return esErrors;\n}\nvar _eval;\nvar hasRequired_eval;\nfunction require_eval() {\n    if (hasRequired_eval) return _eval;\n    hasRequired_eval = 1;\n    /** @type {import('./eval')} */ _eval = EvalError;\n    return _eval;\n}\nvar range;\nvar hasRequiredRange;\nfunction requireRange() {\n    if (hasRequiredRange) return range;\n    hasRequiredRange = 1;\n    /** @type {import('./range')} */ range = RangeError;\n    return range;\n}\nvar ref;\nvar hasRequiredRef;\nfunction requireRef() {\n    if (hasRequiredRef) return ref;\n    hasRequiredRef = 1;\n    /** @type {import('./ref')} */ ref = ReferenceError;\n    return ref;\n}\nvar syntax;\nvar hasRequiredSyntax;\nfunction requireSyntax() {\n    if (hasRequiredSyntax) return syntax;\n    hasRequiredSyntax = 1;\n    /** @type {import('./syntax')} */ syntax = SyntaxError;\n    return syntax;\n}\nvar uri;\nvar hasRequiredUri;\nfunction requireUri() {\n    if (hasRequiredUri) return uri;\n    hasRequiredUri = 1;\n    /** @type {import('./uri')} */ uri = URIError;\n    return uri;\n}\nvar abs;\nvar hasRequiredAbs;\nfunction requireAbs() {\n    if (hasRequiredAbs) return abs;\n    hasRequiredAbs = 1;\n    /** @type {import('./abs')} */ abs = Math.abs;\n    return abs;\n}\nvar floor;\nvar hasRequiredFloor;\nfunction requireFloor() {\n    if (hasRequiredFloor) return floor;\n    hasRequiredFloor = 1;\n    /** @type {import('./floor')} */ floor = Math.floor;\n    return floor;\n}\nvar max;\nvar hasRequiredMax;\nfunction requireMax() {\n    if (hasRequiredMax) return max;\n    hasRequiredMax = 1;\n    /** @type {import('./max')} */ max = Math.max;\n    return max;\n}\nvar min;\nvar hasRequiredMin;\nfunction requireMin() {\n    if (hasRequiredMin) return min;\n    hasRequiredMin = 1;\n    /** @type {import('./min')} */ min = Math.min;\n    return min;\n}\nvar pow;\nvar hasRequiredPow;\nfunction requirePow() {\n    if (hasRequiredPow) return pow;\n    hasRequiredPow = 1;\n    /** @type {import('./pow')} */ pow = Math.pow;\n    return pow;\n}\nvar round;\nvar hasRequiredRound;\nfunction requireRound() {\n    if (hasRequiredRound) return round;\n    hasRequiredRound = 1;\n    /** @type {import('./round')} */ round = Math.round;\n    return round;\n}\nvar _isNaN;\nvar hasRequired_isNaN;\nfunction require_isNaN() {\n    if (hasRequired_isNaN) return _isNaN;\n    hasRequired_isNaN = 1;\n    /** @type {import('./isNaN')} */ _isNaN = Number.isNaN || function isNaN1(a) {\n        return a !== a;\n    };\n    return _isNaN;\n}\nvar sign;\nvar hasRequiredSign;\nfunction requireSign() {\n    if (hasRequiredSign) return sign;\n    hasRequiredSign = 1;\n    var $isNaN = /*@__PURE__*/ require_isNaN();\n    /** @type {import('./sign')} */ sign = function sign(number) {\n        if ($isNaN(number) || number === 0) {\n            return number;\n        }\n        return number < 0 ? -1 : 1;\n    };\n    return sign;\n}\nvar gOPD;\nvar hasRequiredGOPD;\nfunction requireGOPD() {\n    if (hasRequiredGOPD) return gOPD;\n    hasRequiredGOPD = 1;\n    /** @type {import('./gOPD')} */ gOPD = Object.getOwnPropertyDescriptor;\n    return gOPD;\n}\nvar gopd;\nvar hasRequiredGopd;\nfunction requireGopd() {\n    if (hasRequiredGopd) return gopd;\n    hasRequiredGopd = 1;\n    /** @type {import('.')} */ var $gOPD = /*@__PURE__*/ requireGOPD();\n    if ($gOPD) {\n        try {\n            $gOPD([], 'length');\n        } catch (e) {\n            // IE 8 has a broken gOPD\n            $gOPD = null;\n        }\n    }\n    gopd = $gOPD;\n    return gopd;\n}\nvar esDefineProperty;\nvar hasRequiredEsDefineProperty;\nfunction requireEsDefineProperty() {\n    if (hasRequiredEsDefineProperty) return esDefineProperty;\n    hasRequiredEsDefineProperty = 1;\n    /** @type {import('.')} */ var $defineProperty = Object.defineProperty || false;\n    if ($defineProperty) {\n        try {\n            $defineProperty({}, 'a', {\n                value: 1\n            });\n        } catch (e) {\n            // IE 8 has a broken defineProperty\n            $defineProperty = false;\n        }\n    }\n    esDefineProperty = $defineProperty;\n    return esDefineProperty;\n}\nvar shams;\nvar hasRequiredShams;\nfunction requireShams() {\n    if (hasRequiredShams) return shams;\n    hasRequiredShams = 1;\n    /** @type {import('./shams')} */ /* eslint complexity: [2, 18], max-statements: [2, 33] */ shams = function hasSymbols() {\n        if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {\n            return false;\n        }\n        if (typeof Symbol.iterator === 'symbol') {\n            return true;\n        }\n        /** @type {{ [k in symbol]?: unknown }} */ var obj = {};\n        var sym = Symbol('test');\n        var symObj = Object(sym);\n        if (typeof sym === 'string') {\n            return false;\n        }\n        if (Object.prototype.toString.call(sym) !== '[object Symbol]') {\n            return false;\n        }\n        if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {\n            return false;\n        }\n        // temp disabled per https://github.com/ljharb/object.assign/issues/17\n        // if (sym instanceof Symbol) { return false; }\n        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n        // if (!(symObj instanceof Symbol)) { return false; }\n        // if (typeof Symbol.prototype.toString !== 'function') { return false; }\n        // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n        var symVal = 42;\n        obj[sym] = symVal;\n        for(var _ in obj){\n            return false;\n        } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n        if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {\n            return false;\n        }\n        if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {\n            return false;\n        }\n        var syms = Object.getOwnPropertySymbols(obj);\n        if (syms.length !== 1 || syms[0] !== sym) {\n            return false;\n        }\n        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {\n            return false;\n        }\n        if (typeof Object.getOwnPropertyDescriptor === 'function') {\n            // eslint-disable-next-line no-extra-parens\n            var descriptor = /** @type {PropertyDescriptor} */ Object.getOwnPropertyDescriptor(obj, sym);\n            if (descriptor.value !== symVal || descriptor.enumerable !== true) {\n                return false;\n            }\n        }\n        return true;\n    };\n    return shams;\n}\nvar hasSymbols;\nvar hasRequiredHasSymbols;\nfunction requireHasSymbols() {\n    if (hasRequiredHasSymbols) return hasSymbols;\n    hasRequiredHasSymbols = 1;\n    var origSymbol = typeof Symbol !== 'undefined' && Symbol;\n    var hasSymbolSham = requireShams();\n    /** @type {import('.')} */ hasSymbols = function hasNativeSymbols() {\n        if (typeof origSymbol !== 'function') {\n            return false;\n        }\n        if (typeof Symbol !== 'function') {\n            return false;\n        }\n        if (typeof origSymbol('foo') !== 'symbol') {\n            return false;\n        }\n        if (typeof Symbol('bar') !== 'symbol') {\n            return false;\n        }\n        return hasSymbolSham();\n    };\n    return hasSymbols;\n}\nvar Reflect_getPrototypeOf;\nvar hasRequiredReflect_getPrototypeOf;\nfunction requireReflect_getPrototypeOf() {\n    if (hasRequiredReflect_getPrototypeOf) return Reflect_getPrototypeOf;\n    hasRequiredReflect_getPrototypeOf = 1;\n    /** @type {import('./Reflect.getPrototypeOf')} */ Reflect_getPrototypeOf = typeof Reflect !== 'undefined' && Reflect.getPrototypeOf || null;\n    return Reflect_getPrototypeOf;\n}\nvar Object_getPrototypeOf;\nvar hasRequiredObject_getPrototypeOf;\nfunction requireObject_getPrototypeOf() {\n    if (hasRequiredObject_getPrototypeOf) return Object_getPrototypeOf;\n    hasRequiredObject_getPrototypeOf = 1;\n    var $Object = /*@__PURE__*/ requireEsObjectAtoms();\n    /** @type {import('./Object.getPrototypeOf')} */ Object_getPrototypeOf = $Object.getPrototypeOf || null;\n    return Object_getPrototypeOf;\n}\nvar implementation;\nvar hasRequiredImplementation;\nfunction requireImplementation() {\n    if (hasRequiredImplementation) return implementation;\n    hasRequiredImplementation = 1;\n    /* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\n    var toStr = Object.prototype.toString;\n    var max = Math.max;\n    var funcType = '[object Function]';\n    var concatty = function concatty(a, b) {\n        var arr = [];\n        for(var i = 0; i < a.length; i += 1){\n            arr[i] = a[i];\n        }\n        for(var j = 0; j < b.length; j += 1){\n            arr[j + a.length] = b[j];\n        }\n        return arr;\n    };\n    var slicy = function slicy(arrLike, offset) {\n        var arr = [];\n        for(var i = offset, j = 0; i < arrLike.length; i += 1, j += 1){\n            arr[j] = arrLike[i];\n        }\n        return arr;\n    };\n    var joiny = function(arr, joiner) {\n        var str = '';\n        for(var i = 0; i < arr.length; i += 1){\n            str += arr[i];\n            if (i + 1 < arr.length) {\n                str += joiner;\n            }\n        }\n        return str;\n    };\n    implementation = function bind(that) {\n        var target = this;\n        if (typeof target !== 'function' || toStr.apply(target) !== funcType) {\n            throw new TypeError(ERROR_MESSAGE + target);\n        }\n        var args = slicy(arguments, 1);\n        var bound;\n        var binder = function() {\n            if (this instanceof bound) {\n                var result = target.apply(this, concatty(args, arguments));\n                if (Object(result) === result) {\n                    return result;\n                }\n                return this;\n            }\n            return target.apply(that, concatty(args, arguments));\n        };\n        var boundLength = max(0, target.length - args.length);\n        var boundArgs = [];\n        for(var i = 0; i < boundLength; i++){\n            boundArgs[i] = '$' + i;\n        }\n        bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);\n        if (target.prototype) {\n            var Empty = function Empty() {};\n            Empty.prototype = target.prototype;\n            bound.prototype = new Empty();\n            Empty.prototype = null;\n        }\n        return bound;\n    };\n    return implementation;\n}\nvar functionBind;\nvar hasRequiredFunctionBind;\nfunction requireFunctionBind() {\n    if (hasRequiredFunctionBind) return functionBind;\n    hasRequiredFunctionBind = 1;\n    var implementation = requireImplementation();\n    functionBind = Function.prototype.bind || implementation;\n    return functionBind;\n}\nvar functionCall;\nvar hasRequiredFunctionCall;\nfunction requireFunctionCall() {\n    if (hasRequiredFunctionCall) return functionCall;\n    hasRequiredFunctionCall = 1;\n    /** @type {import('./functionCall')} */ functionCall = Function.prototype.call;\n    return functionCall;\n}\nvar functionApply;\nvar hasRequiredFunctionApply;\nfunction requireFunctionApply() {\n    if (hasRequiredFunctionApply) return functionApply;\n    hasRequiredFunctionApply = 1;\n    /** @type {import('./functionApply')} */ functionApply = Function.prototype.apply;\n    return functionApply;\n}\nvar reflectApply;\nvar hasRequiredReflectApply;\nfunction requireReflectApply() {\n    if (hasRequiredReflectApply) return reflectApply;\n    hasRequiredReflectApply = 1;\n    /** @type {import('./reflectApply')} */ reflectApply = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;\n    return reflectApply;\n}\nvar actualApply;\nvar hasRequiredActualApply;\nfunction requireActualApply() {\n    if (hasRequiredActualApply) return actualApply;\n    hasRequiredActualApply = 1;\n    var bind = requireFunctionBind();\n    var $apply = requireFunctionApply();\n    var $call = requireFunctionCall();\n    var $reflectApply = requireReflectApply();\n    /** @type {import('./actualApply')} */ actualApply = $reflectApply || bind.call($call, $apply);\n    return actualApply;\n}\nvar callBindApplyHelpers;\nvar hasRequiredCallBindApplyHelpers;\nfunction requireCallBindApplyHelpers() {\n    if (hasRequiredCallBindApplyHelpers) return callBindApplyHelpers;\n    hasRequiredCallBindApplyHelpers = 1;\n    var bind = requireFunctionBind();\n    var $TypeError = /*@__PURE__*/ requireType();\n    var $call = requireFunctionCall();\n    var $actualApply = requireActualApply();\n    /** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */ callBindApplyHelpers = function callBindBasic(args) {\n        if (args.length < 1 || typeof args[0] !== 'function') {\n            throw new $TypeError('a function is required');\n        }\n        return $actualApply(bind, $call, args);\n    };\n    return callBindApplyHelpers;\n}\nvar get;\nvar hasRequiredGet;\nfunction requireGet() {\n    if (hasRequiredGet) return get;\n    hasRequiredGet = 1;\n    var callBind = requireCallBindApplyHelpers();\n    var gOPD = /*@__PURE__*/ requireGopd();\n    var hasProtoAccessor;\n    try {\n        // eslint-disable-next-line no-extra-parens, no-proto\n        hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ [].__proto__ === Array.prototype;\n    } catch (e) {\n        if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {\n            throw e;\n        }\n    }\n    // eslint-disable-next-line no-extra-parens\n    var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ '__proto__');\n    var $Object = Object;\n    var $getPrototypeOf = $Object.getPrototypeOf;\n    /** @type {import('./get')} */ get = desc && typeof desc.get === 'function' ? callBind([\n        desc.get\n    ]) : typeof $getPrototypeOf === 'function' ? /** @type {import('./get')} */ function getDunder(value) {\n        // eslint-disable-next-line eqeqeq\n        return $getPrototypeOf(value == null ? value : $Object(value));\n    } : false;\n    return get;\n}\nvar getProto;\nvar hasRequiredGetProto;\nfunction requireGetProto() {\n    if (hasRequiredGetProto) return getProto;\n    hasRequiredGetProto = 1;\n    var reflectGetProto = requireReflect_getPrototypeOf();\n    var originalGetProto = requireObject_getPrototypeOf();\n    var getDunderProto = /*@__PURE__*/ requireGet();\n    /** @type {import('.')} */ getProto = reflectGetProto ? function getProto(O) {\n        // @ts-expect-error TS can't narrow inside a closure, for some reason\n        return reflectGetProto(O);\n    } : originalGetProto ? function getProto(O) {\n        if (!O || typeof O !== 'object' && typeof O !== 'function') {\n            throw new TypeError('getProto: not an object');\n        }\n        // @ts-expect-error TS can't narrow inside a closure, for some reason\n        return originalGetProto(O);\n    } : getDunderProto ? function getProto(O) {\n        // @ts-expect-error TS can't narrow inside a closure, for some reason\n        return getDunderProto(O);\n    } : null;\n    return getProto;\n}\nvar hasown;\nvar hasRequiredHasown;\nfunction requireHasown() {\n    if (hasRequiredHasown) return hasown;\n    hasRequiredHasown = 1;\n    var call = Function.prototype.call;\n    var $hasOwn = Object.prototype.hasOwnProperty;\n    var bind = requireFunctionBind();\n    /** @type {import('.')} */ hasown = bind.call(call, $hasOwn);\n    return hasown;\n}\nvar getIntrinsic;\nvar hasRequiredGetIntrinsic;\nfunction requireGetIntrinsic() {\n    if (hasRequiredGetIntrinsic) return getIntrinsic;\n    hasRequiredGetIntrinsic = 1;\n    var undefined$1;\n    var $Object = /*@__PURE__*/ requireEsObjectAtoms();\n    var $Error = /*@__PURE__*/ requireEsErrors();\n    var $EvalError = /*@__PURE__*/ require_eval();\n    var $RangeError = /*@__PURE__*/ requireRange();\n    var $ReferenceError = /*@__PURE__*/ requireRef();\n    var $SyntaxError = /*@__PURE__*/ requireSyntax();\n    var $TypeError = /*@__PURE__*/ requireType();\n    var $URIError = /*@__PURE__*/ requireUri();\n    var abs = /*@__PURE__*/ requireAbs();\n    var floor = /*@__PURE__*/ requireFloor();\n    var max = /*@__PURE__*/ requireMax();\n    var min = /*@__PURE__*/ requireMin();\n    var pow = /*@__PURE__*/ requirePow();\n    var round = /*@__PURE__*/ requireRound();\n    var sign = /*@__PURE__*/ requireSign();\n    var $Function = Function;\n    // eslint-disable-next-line consistent-return\n    var getEvalledConstructor = function(expressionSyntax) {\n        try {\n            return $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n        } catch (e) {}\n    };\n    var $gOPD = /*@__PURE__*/ requireGopd();\n    var $defineProperty = /*@__PURE__*/ requireEsDefineProperty();\n    var throwTypeError = function() {\n        throw new $TypeError();\n    };\n    var ThrowTypeError = $gOPD ? function() {\n        try {\n            // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n            arguments.callee; // IE 8 does not throw here\n            return throwTypeError;\n        } catch (calleeThrows) {\n            try {\n                // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n                return $gOPD(arguments, 'callee').get;\n            } catch (gOPDthrows) {\n                return throwTypeError;\n            }\n        }\n    }() : throwTypeError;\n    var hasSymbols = requireHasSymbols()();\n    var getProto = requireGetProto();\n    var $ObjectGPO = requireObject_getPrototypeOf();\n    var $ReflectGPO = requireReflect_getPrototypeOf();\n    var $apply = requireFunctionApply();\n    var $call = requireFunctionCall();\n    var needsEval = {};\n    var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined$1 : getProto(Uint8Array);\n    var INTRINSICS = {\n        __proto__: null,\n        '%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,\n        '%Array%': Array,\n        '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,\n        '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,\n        '%AsyncFromSyncIteratorPrototype%': undefined$1,\n        '%AsyncFunction%': needsEval,\n        '%AsyncGenerator%': needsEval,\n        '%AsyncGeneratorFunction%': needsEval,\n        '%AsyncIteratorPrototype%': needsEval,\n        '%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,\n        '%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,\n        '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,\n        '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,\n        '%Boolean%': Boolean,\n        '%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,\n        '%Date%': Date,\n        '%decodeURI%': decodeURI,\n        '%decodeURIComponent%': decodeURIComponent,\n        '%encodeURI%': encodeURI,\n        '%encodeURIComponent%': encodeURIComponent,\n        '%Error%': $Error,\n        '%eval%': eval,\n        '%EvalError%': $EvalError,\n        '%Float16Array%': typeof Float16Array === 'undefined' ? undefined$1 : Float16Array,\n        '%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,\n        '%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,\n        '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,\n        '%Function%': $Function,\n        '%GeneratorFunction%': needsEval,\n        '%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,\n        '%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,\n        '%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,\n        '%isFinite%': isFinite,\n        '%isNaN%': isNaN,\n        '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,\n        '%JSON%': typeof JSON === 'object' ? JSON : undefined$1,\n        '%Map%': typeof Map === 'undefined' ? undefined$1 : Map,\n        '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),\n        '%Math%': Math,\n        '%Number%': Number,\n        '%Object%': $Object,\n        '%Object.getOwnPropertyDescriptor%': $gOPD,\n        '%parseFloat%': parseFloat,\n        '%parseInt%': parseInt,\n        '%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,\n        '%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,\n        '%RangeError%': $RangeError,\n        '%ReferenceError%': $ReferenceError,\n        '%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,\n        '%RegExp%': RegExp,\n        '%Set%': typeof Set === 'undefined' ? undefined$1 : Set,\n        '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),\n        '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,\n        '%String%': String,\n        '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined$1,\n        '%Symbol%': hasSymbols ? Symbol : undefined$1,\n        '%SyntaxError%': $SyntaxError,\n        '%ThrowTypeError%': ThrowTypeError,\n        '%TypedArray%': TypedArray,\n        '%TypeError%': $TypeError,\n        '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,\n        '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,\n        '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,\n        '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,\n        '%URIError%': $URIError,\n        '%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,\n        '%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,\n        '%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet,\n        '%Function.prototype.call%': $call,\n        '%Function.prototype.apply%': $apply,\n        '%Object.defineProperty%': $defineProperty,\n        '%Object.getPrototypeOf%': $ObjectGPO,\n        '%Math.abs%': abs,\n        '%Math.floor%': floor,\n        '%Math.max%': max,\n        '%Math.min%': min,\n        '%Math.pow%': pow,\n        '%Math.round%': round,\n        '%Math.sign%': sign,\n        '%Reflect.getPrototypeOf%': $ReflectGPO\n    };\n    if (getProto) {\n        try {\n            null.error; // eslint-disable-line no-unused-expressions\n        } catch (e) {\n            // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n            var errorProto = getProto(getProto(e));\n            INTRINSICS['%Error.prototype%'] = errorProto;\n        }\n    }\n    var doEval = function doEval(name) {\n        var value;\n        if (name === '%AsyncFunction%') {\n            value = getEvalledConstructor('async function () {}');\n        } else if (name === '%GeneratorFunction%') {\n            value = getEvalledConstructor('function* () {}');\n        } else if (name === '%AsyncGeneratorFunction%') {\n            value = getEvalledConstructor('async function* () {}');\n        } else if (name === '%AsyncGenerator%') {\n            var fn = doEval('%AsyncGeneratorFunction%');\n            if (fn) {\n                value = fn.prototype;\n            }\n        } else if (name === '%AsyncIteratorPrototype%') {\n            var gen = doEval('%AsyncGenerator%');\n            if (gen && getProto) {\n                value = getProto(gen.prototype);\n            }\n        }\n        INTRINSICS[name] = value;\n        return value;\n    };\n    var LEGACY_ALIASES = {\n        __proto__: null,\n        '%ArrayBufferPrototype%': [\n            'ArrayBuffer',\n            'prototype'\n        ],\n        '%ArrayPrototype%': [\n            'Array',\n            'prototype'\n        ],\n        '%ArrayProto_entries%': [\n            'Array',\n            'prototype',\n            'entries'\n        ],\n        '%ArrayProto_forEach%': [\n            'Array',\n            'prototype',\n            'forEach'\n        ],\n        '%ArrayProto_keys%': [\n            'Array',\n            'prototype',\n            'keys'\n        ],\n        '%ArrayProto_values%': [\n            'Array',\n            'prototype',\n            'values'\n        ],\n        '%AsyncFunctionPrototype%': [\n            'AsyncFunction',\n            'prototype'\n        ],\n        '%AsyncGenerator%': [\n            'AsyncGeneratorFunction',\n            'prototype'\n        ],\n        '%AsyncGeneratorPrototype%': [\n            'AsyncGeneratorFunction',\n            'prototype',\n            'prototype'\n        ],\n        '%BooleanPrototype%': [\n            'Boolean',\n            'prototype'\n        ],\n        '%DataViewPrototype%': [\n            'DataView',\n            'prototype'\n        ],\n        '%DatePrototype%': [\n            'Date',\n            'prototype'\n        ],\n        '%ErrorPrototype%': [\n            'Error',\n            'prototype'\n        ],\n        '%EvalErrorPrototype%': [\n            'EvalError',\n            'prototype'\n        ],\n        '%Float32ArrayPrototype%': [\n            'Float32Array',\n            'prototype'\n        ],\n        '%Float64ArrayPrototype%': [\n            'Float64Array',\n            'prototype'\n        ],\n        '%FunctionPrototype%': [\n            'Function',\n            'prototype'\n        ],\n        '%Generator%': [\n            'GeneratorFunction',\n            'prototype'\n        ],\n        '%GeneratorPrototype%': [\n            'GeneratorFunction',\n            'prototype',\n            'prototype'\n        ],\n        '%Int8ArrayPrototype%': [\n            'Int8Array',\n            'prototype'\n        ],\n        '%Int16ArrayPrototype%': [\n            'Int16Array',\n            'prototype'\n        ],\n        '%Int32ArrayPrototype%': [\n            'Int32Array',\n            'prototype'\n        ],\n        '%JSONParse%': [\n            'JSON',\n            'parse'\n        ],\n        '%JSONStringify%': [\n            'JSON',\n            'stringify'\n        ],\n        '%MapPrototype%': [\n            'Map',\n            'prototype'\n        ],\n        '%NumberPrototype%': [\n            'Number',\n            'prototype'\n        ],\n        '%ObjectPrototype%': [\n            'Object',\n            'prototype'\n        ],\n        '%ObjProto_toString%': [\n            'Object',\n            'prototype',\n            'toString'\n        ],\n        '%ObjProto_valueOf%': [\n            'Object',\n            'prototype',\n            'valueOf'\n        ],\n        '%PromisePrototype%': [\n            'Promise',\n            'prototype'\n        ],\n        '%PromiseProto_then%': [\n            'Promise',\n            'prototype',\n            'then'\n        ],\n        '%Promise_all%': [\n            'Promise',\n            'all'\n        ],\n        '%Promise_reject%': [\n            'Promise',\n            'reject'\n        ],\n        '%Promise_resolve%': [\n            'Promise',\n            'resolve'\n        ],\n        '%RangeErrorPrototype%': [\n            'RangeError',\n            'prototype'\n        ],\n        '%ReferenceErrorPrototype%': [\n            'ReferenceError',\n            'prototype'\n        ],\n        '%RegExpPrototype%': [\n            'RegExp',\n            'prototype'\n        ],\n        '%SetPrototype%': [\n            'Set',\n            'prototype'\n        ],\n        '%SharedArrayBufferPrototype%': [\n            'SharedArrayBuffer',\n            'prototype'\n        ],\n        '%StringPrototype%': [\n            'String',\n            'prototype'\n        ],\n        '%SymbolPrototype%': [\n            'Symbol',\n            'prototype'\n        ],\n        '%SyntaxErrorPrototype%': [\n            'SyntaxError',\n            'prototype'\n        ],\n        '%TypedArrayPrototype%': [\n            'TypedArray',\n            'prototype'\n        ],\n        '%TypeErrorPrototype%': [\n            'TypeError',\n            'prototype'\n        ],\n        '%Uint8ArrayPrototype%': [\n            'Uint8Array',\n            'prototype'\n        ],\n        '%Uint8ClampedArrayPrototype%': [\n            'Uint8ClampedArray',\n            'prototype'\n        ],\n        '%Uint16ArrayPrototype%': [\n            'Uint16Array',\n            'prototype'\n        ],\n        '%Uint32ArrayPrototype%': [\n            'Uint32Array',\n            'prototype'\n        ],\n        '%URIErrorPrototype%': [\n            'URIError',\n            'prototype'\n        ],\n        '%WeakMapPrototype%': [\n            'WeakMap',\n            'prototype'\n        ],\n        '%WeakSetPrototype%': [\n            'WeakSet',\n            'prototype'\n        ]\n    };\n    var bind = requireFunctionBind();\n    var hasOwn = /*@__PURE__*/ requireHasown();\n    var $concat = bind.call($call, Array.prototype.concat);\n    var $spliceApply = bind.call($apply, Array.prototype.splice);\n    var $replace = bind.call($call, String.prototype.replace);\n    var $strSlice = bind.call($call, String.prototype.slice);\n    var $exec = bind.call($call, RegExp.prototype.exec);\n    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\n    var reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */ \n    var stringToPath = function stringToPath(string) {\n        var first = $strSlice(string, 0, 1);\n        var last = $strSlice(string, -1);\n        if (first === '%' && last !== '%') {\n            throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n        } else if (last === '%' && first !== '%') {\n            throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n        }\n        var result = [];\n        $replace(string, rePropName, function(match, number, quote, subString) {\n            result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n        });\n        return result;\n    };\n    /* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n        var intrinsicName = name;\n        var alias;\n        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n            alias = LEGACY_ALIASES[intrinsicName];\n            intrinsicName = '%' + alias[0] + '%';\n        }\n        if (hasOwn(INTRINSICS, intrinsicName)) {\n            var value = INTRINSICS[intrinsicName];\n            if (value === needsEval) {\n                value = doEval(intrinsicName);\n            }\n            if (typeof value === 'undefined' && !allowMissing) {\n                throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n            }\n            return {\n                alias: alias,\n                name: intrinsicName,\n                value: value\n            };\n        }\n        throw new $SyntaxError('intrinsic ' + name + ' does not exist!');\n    };\n    getIntrinsic = function GetIntrinsic(name, allowMissing) {\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new $TypeError('intrinsic name must be a non-empty string');\n        }\n        if (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n            throw new $TypeError('\"allowMissing\" argument must be a boolean');\n        }\n        if ($exec(/^%?[^%]*%?$/, name) === null) {\n            throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');\n        }\n        var parts = stringToPath(name);\n        var intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n        var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n        var intrinsicRealName = intrinsic.name;\n        var value = intrinsic.value;\n        var skipFurtherCaching = false;\n        var alias = intrinsic.alias;\n        if (alias) {\n            intrinsicBaseName = alias[0];\n            $spliceApply(parts, $concat([\n                0,\n                1\n            ], alias));\n        }\n        for(var i = 1, isOwn = true; i < parts.length; i += 1){\n            var part = parts[i];\n            var first = $strSlice(part, 0, 1);\n            var last = $strSlice(part, -1);\n            if ((first === '\"' || first === \"'\" || first === '`' || last === '\"' || last === \"'\" || last === '`') && first !== last) {\n                throw new $SyntaxError('property names with quotes must have matching quotes');\n            }\n            if (part === 'constructor' || !isOwn) {\n                skipFurtherCaching = true;\n            }\n            intrinsicBaseName += '.' + part;\n            intrinsicRealName = '%' + intrinsicBaseName + '%';\n            if (hasOwn(INTRINSICS, intrinsicRealName)) {\n                value = INTRINSICS[intrinsicRealName];\n            } else if (value != null) {\n                if (!(part in value)) {\n                    if (!allowMissing) {\n                        throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n                    }\n                    return void undefined$1;\n                }\n                if ($gOPD && i + 1 >= parts.length) {\n                    var desc = $gOPD(value, part);\n                    isOwn = !!desc;\n                    // By convention, when a data property is converted to an accessor\n                    // property to emulate a data property that does not suffer from\n                    // the override mistake, that accessor's getter is marked with\n                    // an `originalValue` property. Here, when we detect this, we\n                    // uphold the illusion by pretending to see that original data\n                    // property, i.e., returning the value rather than the getter\n                    // itself.\n                    if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n                        value = desc.get;\n                    } else {\n                        value = value[part];\n                    }\n                } else {\n                    isOwn = hasOwn(value, part);\n                    value = value[part];\n                }\n                if (isOwn && !skipFurtherCaching) {\n                    INTRINSICS[intrinsicRealName] = value;\n                }\n            }\n        }\n        return value;\n    };\n    return getIntrinsic;\n}\nvar callBound;\nvar hasRequiredCallBound;\nfunction requireCallBound() {\n    if (hasRequiredCallBound) return callBound;\n    hasRequiredCallBound = 1;\n    var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();\n    var callBindBasic = requireCallBindApplyHelpers();\n    /** @type {(thisArg: string, searchString: string, position?: number) => number} */ var $indexOf = callBindBasic([\n        GetIntrinsic('%String.prototype.indexOf%')\n    ]);\n    /** @type {import('.')} */ callBound = function callBoundIntrinsic(name, allowMissing) {\n        /* eslint no-extra-parens: 0 */ var intrinsic = /** @type {(this: unknown, ...args: unknown[]) => unknown} */ GetIntrinsic(name, !!allowMissing);\n        if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n            return callBindBasic(/** @type {const} */ [\n                intrinsic\n            ]);\n        }\n        return intrinsic;\n    };\n    return callBound;\n}\nvar sideChannelMap;\nvar hasRequiredSideChannelMap;\nfunction requireSideChannelMap() {\n    if (hasRequiredSideChannelMap) return sideChannelMap;\n    hasRequiredSideChannelMap = 1;\n    var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();\n    var callBound = /*@__PURE__*/ requireCallBound();\n    var inspect = /*@__PURE__*/ requireObjectInspect();\n    var $TypeError = /*@__PURE__*/ requireType();\n    var $Map = GetIntrinsic('%Map%', true);\n    /** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */ var $mapGet = callBound('Map.prototype.get', true);\n    /** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */ var $mapSet = callBound('Map.prototype.set', true);\n    /** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapHas = callBound('Map.prototype.has', true);\n    /** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapDelete = callBound('Map.prototype.delete', true);\n    /** @type {<K, V>(thisArg: Map<K, V>) => number} */ var $mapSize = callBound('Map.prototype.size', true);\n    /** @type {import('.')} */ sideChannelMap = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {\n        /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {Map<K, V> | undefined} */ var $m;\n        /** @type {Channel} */ var channel = {\n            assert: function(key) {\n                if (!channel.has(key)) {\n                    throw new $TypeError('Side channel does not contain ' + inspect(key));\n                }\n            },\n            'delete': function(key) {\n                if ($m) {\n                    var result = $mapDelete($m, key);\n                    if ($mapSize($m) === 0) {\n                        $m = void undefined;\n                    }\n                    return result;\n                }\n                return false;\n            },\n            get: function(key) {\n                if ($m) {\n                    return $mapGet($m, key);\n                }\n            },\n            has: function(key) {\n                if ($m) {\n                    return $mapHas($m, key);\n                }\n                return false;\n            },\n            set: function(key, value) {\n                if (!$m) {\n                    // @ts-expect-error TS can't handle narrowing a variable inside a closure\n                    $m = new $Map();\n                }\n                $mapSet($m, key, value);\n            }\n        };\n        // @ts-expect-error TODO: figure out why TS is erroring here\n        return channel;\n    };\n    return sideChannelMap;\n}\nvar sideChannelWeakmap;\nvar hasRequiredSideChannelWeakmap;\nfunction requireSideChannelWeakmap() {\n    if (hasRequiredSideChannelWeakmap) return sideChannelWeakmap;\n    hasRequiredSideChannelWeakmap = 1;\n    var GetIntrinsic = /*@__PURE__*/ requireGetIntrinsic();\n    var callBound = /*@__PURE__*/ requireCallBound();\n    var inspect = /*@__PURE__*/ requireObjectInspect();\n    var getSideChannelMap = requireSideChannelMap();\n    var $TypeError = /*@__PURE__*/ requireType();\n    var $WeakMap = GetIntrinsic('%WeakMap%', true);\n    /** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => V} */ var $weakMapGet = callBound('WeakMap.prototype.get', true);\n    /** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */ var $weakMapSet = callBound('WeakMap.prototype.set', true);\n    /** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */ var $weakMapHas = callBound('WeakMap.prototype.has', true);\n    /** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */ var $weakMapDelete = callBound('WeakMap.prototype.delete', true);\n    /** @type {import('.')} */ sideChannelWeakmap = $WeakMap ? /** @type {Exclude<import('.'), false>} */ function getSideChannelWeakMap() {\n        /** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {WeakMap<K & object, V> | undefined} */ var $wm;\n        /** @type {Channel | undefined} */ var $m;\n        /** @type {Channel} */ var channel = {\n            assert: function(key) {\n                if (!channel.has(key)) {\n                    throw new $TypeError('Side channel does not contain ' + inspect(key));\n                }\n            },\n            'delete': function(key) {\n                if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n                    if ($wm) {\n                        return $weakMapDelete($wm, key);\n                    }\n                } else if (getSideChannelMap) {\n                    if ($m) {\n                        return $m['delete'](key);\n                    }\n                }\n                return false;\n            },\n            get: function(key) {\n                if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n                    if ($wm) {\n                        return $weakMapGet($wm, key);\n                    }\n                }\n                return $m && $m.get(key);\n            },\n            has: function(key) {\n                if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n                    if ($wm) {\n                        return $weakMapHas($wm, key);\n                    }\n                }\n                return !!$m && $m.has(key);\n            },\n            set: function(key, value) {\n                if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n                    if (!$wm) {\n                        $wm = new $WeakMap();\n                    }\n                    $weakMapSet($wm, key, value);\n                } else if (getSideChannelMap) {\n                    if (!$m) {\n                        $m = getSideChannelMap();\n                    }\n                    // eslint-disable-next-line no-extra-parens\n                    /** @type {NonNullable<typeof $m>} */ $m.set(key, value);\n                }\n            }\n        };\n        // @ts-expect-error TODO: figure out why this is erroring\n        return channel;\n    } : getSideChannelMap;\n    return sideChannelWeakmap;\n}\nvar sideChannel;\nvar hasRequiredSideChannel;\nfunction requireSideChannel() {\n    if (hasRequiredSideChannel) return sideChannel;\n    hasRequiredSideChannel = 1;\n    var $TypeError = /*@__PURE__*/ requireType();\n    var inspect = /*@__PURE__*/ requireObjectInspect();\n    var getSideChannelList = requireSideChannelList();\n    var getSideChannelMap = requireSideChannelMap();\n    var getSideChannelWeakMap = requireSideChannelWeakmap();\n    var makeChannel = getSideChannelWeakMap || getSideChannelMap || getSideChannelList;\n    /** @type {import('.')} */ sideChannel = function getSideChannel() {\n        /** @typedef {ReturnType<typeof getSideChannel>} Channel */ /** @type {Channel | undefined} */ var $channelData;\n        /** @type {Channel} */ var channel = {\n            assert: function(key) {\n                if (!channel.has(key)) {\n                    throw new $TypeError('Side channel does not contain ' + inspect(key));\n                }\n            },\n            'delete': function(key) {\n                return !!$channelData && $channelData['delete'](key);\n            },\n            get: function(key) {\n                return $channelData && $channelData.get(key);\n            },\n            has: function(key) {\n                return !!$channelData && $channelData.has(key);\n            },\n            set: function(key, value) {\n                if (!$channelData) {\n                    $channelData = makeChannel();\n                }\n                $channelData.set(key, value);\n            }\n        };\n        // @ts-expect-error TODO: figure out why this is erroring\n        return channel;\n    };\n    return sideChannel;\n}\nvar formats;\nvar hasRequiredFormats;\nfunction requireFormats() {\n    if (hasRequiredFormats) return formats;\n    hasRequiredFormats = 1;\n    var replace = String.prototype.replace;\n    var percentTwenties = /%20/g;\n    var Format = {\n        RFC1738: 'RFC1738',\n        RFC3986: 'RFC3986'\n    };\n    formats = {\n        'default': Format.RFC3986,\n        formatters: {\n            RFC1738: function(value) {\n                return replace.call(value, percentTwenties, '+');\n            },\n            RFC3986: function(value) {\n                return String(value);\n            }\n        },\n        RFC1738: Format.RFC1738,\n        RFC3986: Format.RFC3986\n    };\n    return formats;\n}\nvar utils;\nvar hasRequiredUtils;\nfunction requireUtils() {\n    if (hasRequiredUtils) return utils;\n    hasRequiredUtils = 1;\n    var formats = /*@__PURE__*/ requireFormats();\n    var has = Object.prototype.hasOwnProperty;\n    var isArray = Array.isArray;\n    var hexTable = function() {\n        var array = [];\n        for(var i = 0; i < 256; ++i){\n            array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n        }\n        return array;\n    }();\n    var compactQueue = function compactQueue(queue) {\n        while(queue.length > 1){\n            var item = queue.pop();\n            var obj = item.obj[item.prop];\n            if (isArray(obj)) {\n                var compacted = [];\n                for(var j = 0; j < obj.length; ++j){\n                    if (typeof obj[j] !== 'undefined') {\n                        compacted.push(obj[j]);\n                    }\n                }\n                item.obj[item.prop] = compacted;\n            }\n        }\n    };\n    var arrayToObject = function arrayToObject(source, options) {\n        var obj = options && options.plainObjects ? {\n            __proto__: null\n        } : {};\n        for(var i = 0; i < source.length; ++i){\n            if (typeof source[i] !== 'undefined') {\n                obj[i] = source[i];\n            }\n        }\n        return obj;\n    };\n    var merge = function merge(target, source, options) {\n        /* eslint no-param-reassign: 0 */ if (!source) {\n            return target;\n        }\n        if (typeof source !== 'object' && typeof source !== 'function') {\n            if (isArray(target)) {\n                target.push(source);\n            } else if (target && typeof target === 'object') {\n                if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {\n                    target[source] = true;\n                }\n            } else {\n                return [\n                    target,\n                    source\n                ];\n            }\n            return target;\n        }\n        if (!target || typeof target !== 'object') {\n            return [\n                target\n            ].concat(source);\n        }\n        var mergeTarget = target;\n        if (isArray(target) && !isArray(source)) {\n            mergeTarget = arrayToObject(target, options);\n        }\n        if (isArray(target) && isArray(source)) {\n            source.forEach(function(item, i) {\n                if (has.call(target, i)) {\n                    var targetItem = target[i];\n                    if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                        target[i] = merge(targetItem, item, options);\n                    } else {\n                        target.push(item);\n                    }\n                } else {\n                    target[i] = item;\n                }\n            });\n            return target;\n        }\n        return Object.keys(source).reduce(function(acc, key) {\n            var value = source[key];\n            if (has.call(acc, key)) {\n                acc[key] = merge(acc[key], value, options);\n            } else {\n                acc[key] = value;\n            }\n            return acc;\n        }, mergeTarget);\n    };\n    var assign = function assignSingleSource(target, source) {\n        return Object.keys(source).reduce(function(acc, key) {\n            acc[key] = source[key];\n            return acc;\n        }, target);\n    };\n    var decode = function(str, defaultDecoder, charset) {\n        var strWithoutPlus = str.replace(/\\+/g, ' ');\n        if (charset === 'iso-8859-1') {\n            // unescape never throws, no try...catch needed:\n            return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n        }\n        // utf-8\n        try {\n            return decodeURIComponent(strWithoutPlus);\n        } catch (e) {\n            return strWithoutPlus;\n        }\n    };\n    var limit = 1024;\n    /* eslint operator-linebreak: [2, \"before\"] */ var encode = function encode(str, defaultEncoder, charset, kind, format) {\n        // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n        // It has been adapted here for stricter adherence to RFC 3986\n        if (str.length === 0) {\n            return str;\n        }\n        var string = str;\n        if (typeof str === 'symbol') {\n            string = Symbol.prototype.toString.call(str);\n        } else if (typeof str !== 'string') {\n            string = String(str);\n        }\n        if (charset === 'iso-8859-1') {\n            return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {\n                return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n            });\n        }\n        var out = '';\n        for(var j = 0; j < string.length; j += limit){\n            var segment = string.length >= limit ? string.slice(j, j + limit) : string;\n            var arr = [];\n            for(var i = 0; i < segment.length; ++i){\n                var c = segment.charCodeAt(i);\n                if (c === 0x2D // -\n                 || c === 0x2E // .\n                 || c === 0x5F // _\n                 || c === 0x7E // ~\n                 || c >= 0x30 && c <= 0x39 // 0-9\n                 || c >= 0x41 && c <= 0x5A // a-z\n                 || c >= 0x61 && c <= 0x7A // A-Z\n                 || format === formats.RFC1738 && (c === 0x28 || c === 0x29 // ( )\n                )) {\n                    arr[arr.length] = segment.charAt(i);\n                    continue;\n                }\n                if (c < 0x80) {\n                    arr[arr.length] = hexTable[c];\n                    continue;\n                }\n                if (c < 0x800) {\n                    arr[arr.length] = hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F];\n                    continue;\n                }\n                if (c < 0xD800 || c >= 0xE000) {\n                    arr[arr.length] = hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n                    continue;\n                }\n                i += 1;\n                c = 0x10000 + ((c & 0x3FF) << 10 | segment.charCodeAt(i) & 0x3FF);\n                arr[arr.length] = hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];\n            }\n            out += arr.join('');\n        }\n        return out;\n    };\n    var compact = function compact(value) {\n        var queue = [\n            {\n                obj: {\n                    o: value\n                },\n                prop: 'o'\n            }\n        ];\n        var refs = [];\n        for(var i = 0; i < queue.length; ++i){\n            var item = queue[i];\n            var obj = item.obj[item.prop];\n            var keys = Object.keys(obj);\n            for(var j = 0; j < keys.length; ++j){\n                var key = keys[j];\n                var val = obj[key];\n                if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                    queue.push({\n                        obj: obj,\n                        prop: key\n                    });\n                    refs.push(val);\n                }\n            }\n        }\n        compactQueue(queue);\n        return value;\n    };\n    var isRegExp = function isRegExp(obj) {\n        return Object.prototype.toString.call(obj) === '[object RegExp]';\n    };\n    var isBuffer = function isBuffer(obj) {\n        if (!obj || typeof obj !== 'object') {\n            return false;\n        }\n        return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n    };\n    var combine = function combine(a, b) {\n        return [].concat(a, b);\n    };\n    var maybeMap = function maybeMap(val, fn) {\n        if (isArray(val)) {\n            var mapped = [];\n            for(var i = 0; i < val.length; i += 1){\n                mapped.push(fn(val[i]));\n            }\n            return mapped;\n        }\n        return fn(val);\n    };\n    utils = {\n        arrayToObject: arrayToObject,\n        assign: assign,\n        combine: combine,\n        compact: compact,\n        decode: decode,\n        encode: encode,\n        isBuffer: isBuffer,\n        isRegExp: isRegExp,\n        maybeMap: maybeMap,\n        merge: merge\n    };\n    return utils;\n}\nvar stringify_1;\nvar hasRequiredStringify;\nfunction requireStringify() {\n    if (hasRequiredStringify) return stringify_1;\n    hasRequiredStringify = 1;\n    var getSideChannel = requireSideChannel();\n    var utils = /*@__PURE__*/ requireUtils();\n    var formats = /*@__PURE__*/ requireFormats();\n    var has = Object.prototype.hasOwnProperty;\n    var arrayPrefixGenerators = {\n        brackets: function brackets(prefix) {\n            return prefix + '[]';\n        },\n        comma: 'comma',\n        indices: function indices(prefix, key) {\n            return prefix + '[' + key + ']';\n        },\n        repeat: function repeat(prefix) {\n            return prefix;\n        }\n    };\n    var isArray = Array.isArray;\n    var push = Array.prototype.push;\n    var pushToArray = function(arr, valueOrArray) {\n        push.apply(arr, isArray(valueOrArray) ? valueOrArray : [\n            valueOrArray\n        ]);\n    };\n    var toISO = Date.prototype.toISOString;\n    var defaultFormat = formats['default'];\n    var defaults = {\n        addQueryPrefix: false,\n        allowDots: false,\n        allowEmptyArrays: false,\n        arrayFormat: 'indices',\n        charset: 'utf-8',\n        charsetSentinel: false,\n        commaRoundTrip: false,\n        delimiter: '&',\n        encode: true,\n        encodeDotInKeys: false,\n        encoder: utils.encode,\n        encodeValuesOnly: false,\n        filter: void undefined,\n        format: defaultFormat,\n        formatter: formats.formatters[defaultFormat],\n        // deprecated\n        indices: false,\n        serializeDate: function serializeDate(date) {\n            return toISO.call(date);\n        },\n        skipNulls: false,\n        strictNullHandling: false\n    };\n    var isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n        return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || typeof v === 'symbol' || typeof v === 'bigint';\n    };\n    var sentinel = {};\n    var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n        var obj = object;\n        var tmpSc = sideChannel;\n        var step = 0;\n        var findFlag = false;\n        while((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag){\n            // Where object last appeared in the ref tree\n            var pos = tmpSc.get(object);\n            step += 1;\n            if (typeof pos !== 'undefined') {\n                if (pos === step) {\n                    throw new RangeError('Cyclic object value');\n                } else {\n                    findFlag = true; // Break while\n                }\n            }\n            if (typeof tmpSc.get(sentinel) === 'undefined') {\n                step = 0;\n            }\n        }\n        if (typeof filter === 'function') {\n            obj = filter(prefix, obj);\n        } else if (obj instanceof Date) {\n            obj = serializeDate(obj);\n        } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n            obj = utils.maybeMap(obj, function(value) {\n                if (value instanceof Date) {\n                    return serializeDate(value);\n                }\n                return value;\n            });\n        }\n        if (obj === null) {\n            if (strictNullHandling) {\n                return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n            }\n            obj = '';\n        }\n        if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n            if (encoder) {\n                var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n                return [\n                    formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))\n                ];\n            }\n            return [\n                formatter(prefix) + '=' + formatter(String(obj))\n            ];\n        }\n        var values = [];\n        if (typeof obj === 'undefined') {\n            return values;\n        }\n        var objKeys;\n        if (generateArrayPrefix === 'comma' && isArray(obj)) {\n            // we need to join elements in\n            if (encodeValuesOnly && encoder) {\n                obj = utils.maybeMap(obj, encoder);\n            }\n            objKeys = [\n                {\n                    value: obj.length > 0 ? obj.join(',') || null : void undefined\n                }\n            ];\n        } else if (isArray(filter)) {\n            objKeys = filter;\n        } else {\n            var keys = Object.keys(obj);\n            objKeys = sort ? keys.sort(sort) : keys;\n        }\n        var encodedPrefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n        var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + '[]' : encodedPrefix;\n        if (allowEmptyArrays && isArray(obj) && obj.length === 0) {\n            return adjustedPrefix + '[]';\n        }\n        for(var j = 0; j < objKeys.length; ++j){\n            var key = objKeys[j];\n            var value = typeof key === 'object' && key && typeof key.value !== 'undefined' ? key.value : obj[key];\n            if (skipNulls && value === null) {\n                continue;\n            }\n            var encodedKey = allowDots && encodeDotInKeys ? String(key).replace(/\\./g, '%2E') : String(key);\n            var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');\n            sideChannel.set(object, step);\n            var valueSideChannel = getSideChannel();\n            valueSideChannel.set(sentinel, sideChannel);\n            pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n        }\n        return values;\n    };\n    var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n        if (!opts) {\n            return defaults;\n        }\n        if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n            throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n        }\n        if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n            throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n        }\n        if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n            throw new TypeError('Encoder has to be a function.');\n        }\n        var charset = opts.charset || defaults.charset;\n        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n            throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n        }\n        var format = formats['default'];\n        if (typeof opts.format !== 'undefined') {\n            if (!has.call(formats.formatters, opts.format)) {\n                throw new TypeError('Unknown format option provided.');\n            }\n            format = opts.format;\n        }\n        var formatter = formats.formatters[format];\n        var filter = defaults.filter;\n        if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n            filter = opts.filter;\n        }\n        var arrayFormat;\n        if (opts.arrayFormat in arrayPrefixGenerators) {\n            arrayFormat = opts.arrayFormat;\n        } else if ('indices' in opts) {\n            arrayFormat = opts.indices ? 'indices' : 'repeat';\n        } else {\n            arrayFormat = defaults.arrayFormat;\n        }\n        if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n            throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n        }\n        var allowDots = typeof opts.allowDots === 'undefined' ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n        return {\n            addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n            allowDots: allowDots,\n            allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n            arrayFormat: arrayFormat,\n            charset: charset,\n            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n            commaRoundTrip: !!opts.commaRoundTrip,\n            delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n            encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n            encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n            encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n            encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n            filter: filter,\n            format: format,\n            formatter: formatter,\n            serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n            skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n            sort: typeof opts.sort === 'function' ? opts.sort : null,\n            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n        };\n    };\n    stringify_1 = function(object, opts) {\n        var obj = object;\n        var options = normalizeStringifyOptions(opts);\n        var objKeys;\n        var filter;\n        if (typeof options.filter === 'function') {\n            filter = options.filter;\n            obj = filter('', obj);\n        } else if (isArray(options.filter)) {\n            filter = options.filter;\n            objKeys = filter;\n        }\n        var keys = [];\n        if (typeof obj !== 'object' || obj === null) {\n            return '';\n        }\n        var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];\n        var commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n        if (!objKeys) {\n            objKeys = Object.keys(obj);\n        }\n        if (options.sort) {\n            objKeys.sort(options.sort);\n        }\n        var sideChannel = getSideChannel();\n        for(var i = 0; i < objKeys.length; ++i){\n            var key = objKeys[i];\n            var value = obj[key];\n            if (options.skipNulls && value === null) {\n                continue;\n            }\n            pushToArray(keys, stringify(value, key, generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n        }\n        var joined = keys.join(options.delimiter);\n        var prefix = options.addQueryPrefix === true ? '?' : '';\n        if (options.charsetSentinel) {\n            if (options.charset === 'iso-8859-1') {\n                // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n                prefix += 'utf8=%26%2310003%3B&';\n            } else {\n                // encodeURIComponent('✓')\n                prefix += 'utf8=%E2%9C%93&';\n            }\n        }\n        return joined.length > 0 ? prefix + joined : '';\n    };\n    return stringify_1;\n}\nvar parse;\nvar hasRequiredParse;\nfunction requireParse() {\n    if (hasRequiredParse) return parse;\n    hasRequiredParse = 1;\n    var utils = /*@__PURE__*/ requireUtils();\n    var has = Object.prototype.hasOwnProperty;\n    var isArray = Array.isArray;\n    var defaults = {\n        allowDots: false,\n        allowEmptyArrays: false,\n        allowPrototypes: false,\n        allowSparse: false,\n        arrayLimit: 20,\n        charset: 'utf-8',\n        charsetSentinel: false,\n        comma: false,\n        decodeDotInKeys: false,\n        decoder: utils.decode,\n        delimiter: '&',\n        depth: 5,\n        duplicates: 'combine',\n        ignoreQueryPrefix: false,\n        interpretNumericEntities: false,\n        parameterLimit: 1000,\n        parseArrays: true,\n        plainObjects: false,\n        strictDepth: false,\n        strictNullHandling: false,\n        throwOnLimitExceeded: false\n    };\n    var interpretNumericEntities = function(str) {\n        return str.replace(/&#(\\d+);/g, function($0, numberStr) {\n            return String.fromCharCode(parseInt(numberStr, 10));\n        });\n    };\n    var parseArrayValue = function(val, options, currentArrayLength) {\n        if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n            return val.split(',');\n        }\n        if (options.throwOnLimitExceeded && currentArrayLength >= options.arrayLimit) {\n            throw new RangeError('Array limit exceeded. Only ' + options.arrayLimit + ' element' + (options.arrayLimit === 1 ? '' : 's') + ' allowed in an array.');\n        }\n        return val;\n    };\n    // This is what browsers will submit when the ✓ character occurs in an\n    // application/x-www-form-urlencoded body and the encoding of the page containing\n    // the form is iso-8859-1, or when the submitted form has an accept-charset\n    // attribute of iso-8859-1. Presumably also with other charsets that do not contain\n    // the ✓ character, such as us-ascii.\n    var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n    // These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\n    var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n    var parseValues = function parseQueryStringValues(str, options) {\n        var obj = {\n            __proto__: null\n        };\n        var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n        cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n        var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n        var parts = cleanStr.split(options.delimiter, options.throwOnLimitExceeded ? limit + 1 : limit);\n        if (options.throwOnLimitExceeded && parts.length > limit) {\n            throw new RangeError('Parameter limit exceeded. Only ' + limit + ' parameter' + (limit === 1 ? '' : 's') + ' allowed.');\n        }\n        var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n        var i;\n        var charset = options.charset;\n        if (options.charsetSentinel) {\n            for(i = 0; i < parts.length; ++i){\n                if (parts[i].indexOf('utf8=') === 0) {\n                    if (parts[i] === charsetSentinel) {\n                        charset = 'utf-8';\n                    } else if (parts[i] === isoSentinel) {\n                        charset = 'iso-8859-1';\n                    }\n                    skipIndex = i;\n                    i = parts.length; // The eslint settings do not allow break;\n                }\n            }\n        }\n        for(i = 0; i < parts.length; ++i){\n            if (i === skipIndex) {\n                continue;\n            }\n            var part = parts[i];\n            var bracketEqualsPos = part.indexOf(']=');\n            var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n            var key;\n            var val;\n            if (pos === -1) {\n                key = options.decoder(part, defaults.decoder, charset, 'key');\n                val = options.strictNullHandling ? null : '';\n            } else {\n                key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n                val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options, isArray(obj[key]) ? obj[key].length : 0), function(encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                });\n            }\n            if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n                val = interpretNumericEntities(String(val));\n            }\n            if (part.indexOf('[]=') > -1) {\n                val = isArray(val) ? [\n                    val\n                ] : val;\n            }\n            var existing = has.call(obj, key);\n            if (existing && options.duplicates === 'combine') {\n                obj[key] = utils.combine(obj[key], val);\n            } else if (!existing || options.duplicates === 'last') {\n                obj[key] = val;\n            }\n        }\n        return obj;\n    };\n    var parseObject = function(chain, val, options, valuesParsed) {\n        var currentArrayLength = 0;\n        if (chain.length > 0 && chain[chain.length - 1] === '[]') {\n            var parentKey = chain.slice(0, -1).join('');\n            currentArrayLength = Array.isArray(val) && val[parentKey] ? val[parentKey].length : 0;\n        }\n        var leaf = valuesParsed ? val : parseArrayValue(val, options, currentArrayLength);\n        for(var i = chain.length - 1; i >= 0; --i){\n            var obj;\n            var root = chain[i];\n            if (root === '[]' && options.parseArrays) {\n                obj = options.allowEmptyArrays && (leaf === '' || options.strictNullHandling && leaf === null) ? [] : utils.combine([], leaf);\n            } else {\n                obj = options.plainObjects ? {\n                    __proto__: null\n                } : {};\n                var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n                var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, '.') : cleanRoot;\n                var index = parseInt(decodedRoot, 10);\n                if (!options.parseArrays && decodedRoot === '') {\n                    obj = {\n                        0: leaf\n                    };\n                } else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {\n                    obj = [];\n                    obj[index] = leaf;\n                } else if (decodedRoot !== '__proto__') {\n                    obj[decodedRoot] = leaf;\n                }\n            }\n            leaf = obj;\n        }\n        return leaf;\n    };\n    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n        if (!givenKey) {\n            return;\n        }\n        // Transform dot notation to bracket notation\n        var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n        // The regex chunks\n        var brackets = /(\\[[^[\\]]*])/;\n        var child = /(\\[[^[\\]]*])/g;\n        // Get the parent\n        var segment = options.depth > 0 && brackets.exec(key);\n        var parent = segment ? key.slice(0, segment.index) : key;\n        // Stash the parent if it exists\n        var keys = [];\n        if (parent) {\n            // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n            if (!options.plainObjects && has.call(Object.prototype, parent)) {\n                if (!options.allowPrototypes) {\n                    return;\n                }\n            }\n            keys.push(parent);\n        }\n        // Loop through children appending to the array until we hit depth\n        var i = 0;\n        while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){\n            i += 1;\n            if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n                if (!options.allowPrototypes) {\n                    return;\n                }\n            }\n            keys.push(segment[1]);\n        }\n        // If there's a remainder, check strictDepth option for throw, else just add whatever is left\n        if (segment) {\n            if (options.strictDepth === true) {\n                throw new RangeError('Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true');\n            }\n            keys.push('[' + key.slice(segment.index) + ']');\n        }\n        return parseObject(keys, val, options, valuesParsed);\n    };\n    var normalizeParseOptions = function normalizeParseOptions(opts) {\n        if (!opts) {\n            return defaults;\n        }\n        if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n            throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n        }\n        if (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n            throw new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n        }\n        if (opts.decoder !== null && typeof opts.decoder !== 'undefined' && typeof opts.decoder !== 'function') {\n            throw new TypeError('Decoder has to be a function.');\n        }\n        if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n            throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n        }\n        if (typeof opts.throwOnLimitExceeded !== 'undefined' && typeof opts.throwOnLimitExceeded !== 'boolean') {\n            throw new TypeError('`throwOnLimitExceeded` option must be a boolean');\n        }\n        var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n        var duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n        if (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n            throw new TypeError('The duplicates option must be either combine, first, or last');\n        }\n        var allowDots = typeof opts.allowDots === 'undefined' ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;\n        return {\n            allowDots: allowDots,\n            allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n            allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n            allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n            arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n            charset: charset,\n            charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n            comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n            decodeDotInKeys: typeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n            decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n            delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n            // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n            depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n            duplicates: duplicates,\n            ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n            interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n            parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n            parseArrays: opts.parseArrays !== false,\n            plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n            strictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\n            strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n            throwOnLimitExceeded: typeof opts.throwOnLimitExceeded === 'boolean' ? opts.throwOnLimitExceeded : false\n        };\n    };\n    parse = function(str, opts) {\n        var options = normalizeParseOptions(opts);\n        if (str === '' || str === null || typeof str === 'undefined') {\n            return options.plainObjects ? {\n                __proto__: null\n            } : {};\n        }\n        var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n        var obj = options.plainObjects ? {\n            __proto__: null\n        } : {};\n        // Iterate over the keys and setup the new object\n        var keys = Object.keys(tempObj);\n        for(var i = 0; i < keys.length; ++i){\n            var key = keys[i];\n            var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n            obj = utils.merge(obj, newObj, options);\n        }\n        if (options.allowSparse === true) {\n            return obj;\n        }\n        return utils.compact(obj);\n    };\n    return parse;\n}\nvar lib;\nvar hasRequiredLib;\nfunction requireLib() {\n    if (hasRequiredLib) return lib;\n    hasRequiredLib = 1;\n    var stringify = /*@__PURE__*/ requireStringify();\n    var parse = /*@__PURE__*/ requireParse();\n    var formats = /*@__PURE__*/ requireFormats();\n    lib = {\n        formats: formats,\n        parse: parse,\n        stringify: stringify\n    };\n    return lib;\n}\nvar libExports = /*@__PURE__*/ requireLib();\nconst OPTIONS_KEYS = [\n    'apiKey',\n    'idempotencyKey',\n    'stripeAccount',\n    'apiVersion',\n    'maxNetworkRetries',\n    'timeout',\n    'host',\n    'authenticator',\n    'stripeContext',\n    'additionalHeaders'\n];\nfunction isOptionsHash(o) {\n    return o && typeof o === 'object' && OPTIONS_KEYS.some((prop)=>Object.prototype.hasOwnProperty.call(o, prop));\n}\n/**\n * Stringifies an Object, accommodating nested objects\n * (forming the conventional key 'parent[child]=value')\n */ function queryStringifyRequestData(data, apiMode) {\n    return libExports.stringify(data, {\n        serializeDate: (d)=>Math.floor(d.getTime() / 1000).toString(),\n        arrayFormat: apiMode == 'v2' ? 'repeat' : 'indices'\n    }) // Don't use strict form encoding by changing the square bracket control\n    // characters back to their literals. This is fine by the server, and\n    // makes these parameter strings easier to read.\n    .replace(/%5B/g, '[').replace(/%5D/g, ']');\n}\n/**\n * Outputs a new function with interpolated object property values.\n * Use like so:\n *   const fn = makeURLInterpolator('some/url/{param1}/{param2}');\n *   fn({ param1: 123, param2: 456 }); // => 'some/url/123/456'\n */ const makeURLInterpolator = (()=>{\n    const rc = {\n        '\\n': '\\\\n',\n        '\"': '\\\\\"',\n        '\\u2028': '\\\\u2028',\n        '\\u2029': '\\\\u2029'\n    };\n    return (str)=>{\n        const cleanString = str.replace(/[\"\\n\\r\\u2028\\u2029]/g, ($0)=>rc[$0]);\n        return (outputs)=>{\n            return cleanString.replace(/\\{([\\s\\S]+?)\\}/g, ($0, $1)=>encodeURIComponent(outputs[$1] || ''));\n        };\n    };\n})();\nfunction extractUrlParams(path) {\n    const params = path.match(/\\{\\w+\\}/g);\n    if (!params) {\n        return [];\n    }\n    return params.map((param)=>param.replace(/[{}]/g, ''));\n}\n/**\n * Return the data argument from a list of arguments\n *\n * @param {object[]} args\n * @returns {object}\n */ function getDataFromArgs(args) {\n    if (!Array.isArray(args) || !args[0] || typeof args[0] !== 'object') {\n        return {};\n    }\n    if (!isOptionsHash(args[0])) {\n        return args.shift();\n    }\n    const argKeys = Object.keys(args[0]);\n    const optionKeysInArgs = argKeys.filter((key)=>OPTIONS_KEYS.includes(key));\n    // In some cases options may be the provided as the first argument.\n    // Here we're detecting a case where there are two distinct arguments\n    // (the first being args and the second options) and with known\n    // option keys in the first so that we can warn the user about it.\n    if (optionKeysInArgs.length > 0 && optionKeysInArgs.length !== argKeys.length) {\n        emitWarning(`Options found in arguments (${optionKeysInArgs.join(', ')}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options.`);\n    }\n    return {};\n}\n/**\n * Return the options hash from a list of arguments\n */ function getOptionsFromArgs(args) {\n    const opts = {\n        host: null,\n        headers: {},\n        settings: {}\n    };\n    if (args.length > 0) {\n        const arg = args[args.length - 1];\n        if (typeof arg === 'string') {\n            opts.authenticator = createApiKeyAuthenticator(args.pop());\n        } else if (isOptionsHash(arg)) {\n            const params = Object.assign({}, args.pop());\n            const extraKeys = Object.keys(params).filter((key)=>!OPTIONS_KEYS.includes(key));\n            if (extraKeys.length) {\n                emitWarning(`Invalid options found (${extraKeys.join(', ')}); ignoring.`);\n            }\n            if (params.apiKey) {\n                opts.authenticator = createApiKeyAuthenticator(params.apiKey);\n            }\n            if (params.idempotencyKey) {\n                opts.headers['Idempotency-Key'] = params.idempotencyKey;\n            }\n            if (params.stripeAccount) {\n                opts.headers['Stripe-Account'] = params.stripeAccount;\n            }\n            if (params.stripeContext) {\n                if (opts.headers['Stripe-Account']) {\n                    throw new Error(\"Can't specify both stripeAccount and stripeContext.\");\n                }\n                opts.headers['Stripe-Context'] = params.stripeContext;\n            }\n            if (params.apiVersion) {\n                opts.headers['Stripe-Version'] = params.apiVersion;\n            }\n            if (Number.isInteger(params.maxNetworkRetries)) {\n                opts.settings.maxNetworkRetries = params.maxNetworkRetries;\n            }\n            if (Number.isInteger(params.timeout)) {\n                opts.settings.timeout = params.timeout;\n            }\n            if (params.host) {\n                opts.host = params.host;\n            }\n            if (params.authenticator) {\n                if (params.apiKey) {\n                    throw new Error(\"Can't specify both apiKey and authenticator.\");\n                }\n                if (typeof params.authenticator !== 'function') {\n                    throw new Error('The authenticator must be a function ' + 'receiving a request as the first parameter.');\n                }\n                opts.authenticator = params.authenticator;\n            }\n            if (params.additionalHeaders) {\n                opts.headers = params.additionalHeaders;\n            }\n        }\n    }\n    return opts;\n}\n/**\n * Provide simple \"Class\" extension mechanism.\n * <!-- Public API accessible via Stripe.StripeResource.extend -->\n */ function protoExtend(sub) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const Super = this;\n    const Constructor = Object.prototype.hasOwnProperty.call(sub, 'constructor') ? sub.constructor : function(...args) {\n        Super.apply(this, args);\n    };\n    // This initialization logic is somewhat sensitive to be compatible with\n    // divergent JS implementations like the one found in Qt. See here for more\n    // context:\n    //\n    // https://github.com/stripe/stripe-node/pull/334\n    Object.assign(Constructor, Super);\n    Constructor.prototype = Object.create(Super.prototype);\n    Object.assign(Constructor.prototype, sub);\n    return Constructor;\n}\n/**\n * Remove empty values from an object\n */ function removeNullish(obj) {\n    if (typeof obj !== 'object') {\n        throw new Error('Argument must be an object');\n    }\n    return Object.keys(obj).reduce((result, key)=>{\n        if (obj[key] != null) {\n            result[key] = obj[key];\n        }\n        return result;\n    }, {});\n}\n/**\n * Normalize standard HTTP Headers:\n * {'foo-bar': 'hi'}\n * becomes\n * {'Foo-Bar': 'hi'}\n */ function normalizeHeaders(obj) {\n    if (!(obj && typeof obj === 'object')) {\n        return obj;\n    }\n    return Object.keys(obj).reduce((result, header)=>{\n        result[normalizeHeader(header)] = obj[header];\n        return result;\n    }, {});\n}\n/**\n * Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41\n * without the exceptions which are irrelevant to us.\n */ function normalizeHeader(header) {\n    return header.split('-').map((text)=>text.charAt(0).toUpperCase() + text.substr(1).toLowerCase()).join('-');\n}\nfunction callbackifyPromiseWithTimeout(promise, callback) {\n    if (callback) {\n        // Ensure callback is called outside of promise stack.\n        return promise.then((res)=>{\n            setTimeout(()=>{\n                callback(null, res);\n            }, 0);\n        }, (err)=>{\n            setTimeout(()=>{\n                callback(err, null);\n            }, 0);\n        });\n    }\n    return promise;\n}\n/**\n * Allow for special capitalization cases (such as OAuth)\n */ function pascalToCamelCase(name) {\n    if (name === 'OAuth') {\n        return 'oauth';\n    } else {\n        return name[0].toLowerCase() + name.substring(1);\n    }\n}\nfunction emitWarning(warning) {\n    if (typeof process.emitWarning !== 'function') {\n        return console.warn(`Stripe: ${warning}`); /* eslint-disable-line no-console */ \n    }\n    return process.emitWarning(warning, 'Stripe');\n}\nfunction isObject(obj) {\n    const type = typeof obj;\n    return (type === 'function' || type === 'object') && !!obj;\n}\n// For use in multipart requests\nfunction flattenAndStringify(data) {\n    const result = {};\n    const step = (obj, prevKey)=>{\n        Object.entries(obj).forEach(([key, value])=>{\n            const newKey = prevKey ? `${prevKey}[${key}]` : key;\n            if (isObject(value)) {\n                if (!(value instanceof Uint8Array) && !Object.prototype.hasOwnProperty.call(value, 'data')) {\n                    // Non-buffer non-file Objects are recursively flattened\n                    return step(value, newKey);\n                } else {\n                    // Buffers and file objects are stored without modification\n                    result[newKey] = value;\n                }\n            } else {\n                // Primitives are converted to strings\n                result[newKey] = String(value);\n            }\n        });\n    };\n    step(data, null);\n    return result;\n}\nfunction validateInteger(name, n, defaultVal) {\n    if (!Number.isInteger(n)) {\n        if (defaultVal !== undefined) {\n            return defaultVal;\n        } else {\n            throw new Error(`${name} must be an integer`);\n        }\n    }\n    return n;\n}\nfunction determineProcessUserAgentProperties() {\n    return typeof process === 'undefined' ? {} : {\n        lang_version: process.version,\n        platform: process.platform\n    };\n}\nfunction createApiKeyAuthenticator(apiKey) {\n    const authenticator = (request)=>{\n        request.headers.Authorization = 'Bearer ' + apiKey;\n        return Promise.resolve();\n    };\n    // For testing\n    authenticator._apiKey = apiKey;\n    return authenticator;\n}\n/**\n * Replaces Date objects with Unix timestamps\n */ function dateTimeReplacer(key, value) {\n    if (this[key] instanceof Date) {\n        return Math.floor(this[key].getTime() / 1000).toString();\n    }\n    return value;\n}\n/**\n * JSON stringifies an Object, replacing Date objects with Unix timestamps\n */ function jsonStringifyRequestData(data) {\n    return JSON.stringify(data, dateTimeReplacer);\n}\n/**\n * Inspects the given path to determine if the endpoint is for v1 or v2 API\n */ function getAPIMode(path) {\n    if (!path) {\n        return 'v1';\n    }\n    return path.startsWith('/v2') ? 'v2' : 'v1';\n}\nconst MAX_RETRY_AFTER_WAIT = 60;\nclass RequestSender {\n    _addHeadersDirectlyToObject(obj, headers) {\n        // For convenience, make some headers easily accessible on\n        // lastResponse.\n        // NOTE: Stripe responds with lowercase header names/keys.\n        obj.requestId = headers['request-id'];\n        obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n        obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n        obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n    }\n    _makeResponseEvent(requestEvent, statusCode, headers) {\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n        return removeNullish({\n            api_version: headers['stripe-version'],\n            account: headers['stripe-account'],\n            idempotency_key: headers['idempotency-key'],\n            method: requestEvent.method,\n            path: requestEvent.path,\n            status: statusCode,\n            request_id: this._getRequestId(headers),\n            elapsed: requestDurationMs,\n            request_start_time: requestEvent.request_start_time,\n            request_end_time: requestEndTime\n        });\n    }\n    _getRequestId(headers) {\n        return headers['request-id'];\n    }\n    /**\n     * Used by methods with spec.streaming === true. For these methods, we do not\n     * buffer successful responses into memory or do parse them into stripe\n     * objects, we delegate that all of that to the user and pass back the raw\n     * http.Response object to the callback.\n     *\n     * (Unsuccessful responses shouldn't make it here, they should\n     * still be buffered/parsed and handled by _jsonResponseHandler -- see\n     * makeRequest)\n     */ _streamingResponseHandler(requestEvent, usage, callback) {\n        return (res)=>{\n            const headers = res.getHeaders();\n            const streamCompleteCallback = ()=>{\n                const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n                this._stripe._emitter.emit('response', responseEvent);\n                this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed, usage);\n            };\n            const stream = res.toStream(streamCompleteCallback);\n            // This is here for backwards compatibility, as the stream is a raw\n            // HTTP response in Node and the legacy behavior was to mutate this\n            // response.\n            this._addHeadersDirectlyToObject(stream, headers);\n            return callback(null, stream);\n        };\n    }\n    /**\n     * Default handler for Stripe responses. Buffers the response into memory,\n     * parses the JSON and returns it (i.e. passes it to the callback) if there\n     * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n     */ _jsonResponseHandler(requestEvent, apiMode, usage, callback) {\n        return (res)=>{\n            const headers = res.getHeaders();\n            const requestId = this._getRequestId(headers);\n            const statusCode = res.getStatusCode();\n            const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n            this._stripe._emitter.emit('response', responseEvent);\n            res.toJSON().then((jsonResponse)=>{\n                if (jsonResponse.error) {\n                    let err;\n                    // Convert OAuth error responses into a standard format\n                    // so that the rest of the error logic can be shared\n                    if (typeof jsonResponse.error === 'string') {\n                        jsonResponse.error = {\n                            type: jsonResponse.error,\n                            message: jsonResponse.error_description\n                        };\n                    }\n                    jsonResponse.error.headers = headers;\n                    jsonResponse.error.statusCode = statusCode;\n                    jsonResponse.error.requestId = requestId;\n                    if (statusCode === 401) {\n                        err = new StripeAuthenticationError(jsonResponse.error);\n                    } else if (statusCode === 403) {\n                        err = new StripePermissionError(jsonResponse.error);\n                    } else if (statusCode === 429) {\n                        err = new StripeRateLimitError(jsonResponse.error);\n                    } else if (apiMode === 'v2') {\n                        err = generateV2Error(jsonResponse.error);\n                    } else {\n                        err = generateV1Error(jsonResponse.error);\n                    }\n                    throw err;\n                }\n                return jsonResponse;\n            }, (e)=>{\n                throw new StripeAPIError({\n                    message: 'Invalid JSON received from the Stripe API',\n                    exception: e,\n                    requestId: headers['request-id']\n                });\n            }).then((jsonResponse)=>{\n                this._recordRequestMetrics(requestId, responseEvent.elapsed, usage);\n                // Expose raw response object.\n                const rawResponse = res.getRawResponse();\n                this._addHeadersDirectlyToObject(rawResponse, headers);\n                Object.defineProperty(jsonResponse, 'lastResponse', {\n                    enumerable: false,\n                    writable: false,\n                    value: rawResponse\n                });\n                callback(null, jsonResponse);\n            }, (e)=>callback(e, null));\n        };\n    }\n    static _generateConnectionErrorMessage(requestRetries) {\n        return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n    }\n    // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n    static _shouldRetry(res, numRetries, maxRetries, error) {\n        if (error && numRetries === 0 && HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n            return true;\n        }\n        // Do not retry if we are out of retries.\n        if (numRetries >= maxRetries) {\n            return false;\n        }\n        // Retry on connection error.\n        if (!res) {\n            return true;\n        }\n        // The API may ask us not to retry (e.g., if doing so would be a no-op)\n        // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n        if (res.getHeaders()['stripe-should-retry'] === 'false') {\n            return false;\n        }\n        if (res.getHeaders()['stripe-should-retry'] === 'true') {\n            return true;\n        }\n        // Retry on conflict errors.\n        if (res.getStatusCode() === 409) {\n            return true;\n        }\n        // Retry on 500, 503, and other internal errors.\n        //\n        // Note that we expect the stripe-should-retry header to be false\n        // in most cases when a 500 is returned, since our idempotency framework\n        // would typically replay it anyway.\n        if (res.getStatusCode() >= 500) {\n            return true;\n        }\n        return false;\n    }\n    _getSleepTimeInMS(numRetries, retryAfter = null) {\n        const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n        const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n        // Apply exponential backoff with initialNetworkRetryDelay on the\n        // number of numRetries so far as inputs. Do not allow the number to exceed\n        // maxNetworkRetryDelay.\n        let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(2, numRetries - 1), maxNetworkRetryDelay);\n        // Apply some jitter by randomizing the value in the range of\n        // (sleepSeconds / 2) to (sleepSeconds).\n        sleepSeconds *= 0.5 * (1 + Math.random());\n        // But never sleep less than the base sleep seconds.\n        sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n        // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n        if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n            sleepSeconds = Math.max(sleepSeconds, retryAfter);\n        }\n        return sleepSeconds * 1000;\n    }\n    // Max retries can be set on a per request basis. Favor those over the global setting\n    _getMaxNetworkRetries(settings = {}) {\n        return settings.maxNetworkRetries !== undefined && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n    }\n    _defaultIdempotencyKey(method, settings, apiMode) {\n        // If this is a POST and we allow multiple retries, ensure an idempotency key.\n        const maxRetries = this._getMaxNetworkRetries(settings);\n        const genKey = ()=>`stripe-node-retry-${this._stripe._platformFunctions.uuid4()}`;\n        // more verbose than it needs to be, but gives clear separation between V1 and V2 behavior\n        if (apiMode === 'v2') {\n            if (method === 'POST' || method === 'DELETE') {\n                return genKey();\n            }\n        } else if (apiMode === 'v1') {\n            if (method === 'POST' && maxRetries > 0) {\n                return genKey();\n            }\n        }\n        return null;\n    }\n    _makeHeaders({ contentType, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings, stripeAccount, stripeContext, apiMode }) {\n        const defaultHeaders = {\n            Accept: 'application/json',\n            'Content-Type': contentType,\n            'User-Agent': this._getUserAgentString(apiMode),\n            'X-Stripe-Client-User-Agent': clientUserAgent,\n            'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n            'Stripe-Version': apiVersion,\n            'Stripe-Account': stripeAccount,\n            'Stripe-Context': stripeContext,\n            'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings, apiMode)\n        };\n        // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n        //   A user agent SHOULD send a Content-Length in a request message when\n        //   no Transfer-Encoding is sent and the request method defines a meaning\n        //   for an enclosed payload body.  For example, a Content-Length header\n        //   field is normally sent in a POST request even when the value is 0\n        //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n        //   Content-Length header field when the request message does not contain\n        //   a payload body and the method semantics do not anticipate such a\n        //   body.\n        //\n        // These method types are expected to have bodies and so we should always\n        // include a Content-Length.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        // If a content length was specified, we always include it regardless of\n        // whether the method semantics anticipate such a body. This keeps us\n        // consistent with historical behavior. We do however want to warn on this\n        // and fix these cases as they are semantically incorrect.\n        if (methodHasPayload || contentLength) {\n            if (!methodHasPayload) {\n                emitWarning(`${method} method had non-zero contentLength but no payload is expected for this verb`);\n            }\n            defaultHeaders['Content-Length'] = contentLength;\n        }\n        return Object.assign(removeNullish(defaultHeaders), normalizeHeaders(userSuppliedHeaders));\n    }\n    _getUserAgentString(apiMode) {\n        const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n        const appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n        return `Stripe/${apiMode} NodeBindings/${packageVersion} ${appInfo}`.trim();\n    }\n    _getTelemetryHeader() {\n        if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n            const metrics = this._stripe._prevRequestMetrics.shift();\n            return JSON.stringify({\n                last_request_metrics: metrics\n            });\n        }\n    }\n    _recordRequestMetrics(requestId, requestDurationMs, usage) {\n        if (this._stripe.getTelemetryEnabled() && requestId) {\n            if (this._stripe._prevRequestMetrics.length > this._maxBufferedRequestMetric) {\n                emitWarning('Request metrics buffer is full, dropping telemetry message.');\n            } else {\n                const m = {\n                    request_id: requestId,\n                    request_duration_ms: requestDurationMs\n                };\n                if (usage && usage.length > 0) {\n                    m.usage = usage;\n                }\n                this._stripe._prevRequestMetrics.push(m);\n            }\n        }\n    }\n    _rawRequest(method, path, params, options) {\n        const requestPromise = new Promise((resolve, reject)=>{\n            let opts;\n            try {\n                const requestMethod = method.toUpperCase();\n                if (requestMethod !== 'POST' && params && Object.keys(params).length !== 0) {\n                    throw new Error('rawRequest only supports params on POST requests. Please pass null and add your parameters to path.');\n                }\n                const args = [].slice.call([\n                    params,\n                    options\n                ]);\n                // Pull request data and options (headers, auth) from args.\n                const dataFromArgs = getDataFromArgs(args);\n                const data = Object.assign({}, dataFromArgs);\n                const calculatedOptions = getOptionsFromArgs(args);\n                const headers = calculatedOptions.headers;\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const authenticator = calculatedOptions.authenticator;\n                opts = {\n                    requestMethod,\n                    requestPath: path,\n                    bodyData: data,\n                    queryData: {},\n                    authenticator,\n                    headers,\n                    host: null,\n                    streaming: false,\n                    settings: {},\n                    usage: [\n                        'raw_request'\n                    ]\n                };\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(response);\n                }\n            }\n            const { headers, settings } = opts;\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const authenticator = opts.authenticator;\n            this._request(opts.requestMethod, opts.host, path, opts.bodyData, authenticator, {\n                headers,\n                settings,\n                streaming: opts.streaming\n            }, opts.usage, requestCallback);\n        });\n        return requestPromise;\n    }\n    _request(method, host, path, data, authenticator, options, usage = [], callback, requestDataProcessor = null) {\n        var _a;\n        let requestData;\n        authenticator = (_a = authenticator !== null && authenticator !== void 0 ? authenticator : this._stripe._authenticator) !== null && _a !== void 0 ? _a : null;\n        const apiMode = getAPIMode(path);\n        const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter)=>{\n            return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n        };\n        const makeRequest = (apiVersion, headers, numRetries)=>{\n            // timeout can be set on a per-request basis. Favor that over the global setting\n            const timeout = options.settings && options.settings.timeout && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : this._stripe.getApiField('timeout');\n            const request = {\n                host: host || this._stripe.getApiField('host'),\n                port: this._stripe.getApiField('port'),\n                path: path,\n                method: method,\n                headers: Object.assign({}, headers),\n                body: requestData,\n                protocol: this._stripe.getApiField('protocol')\n            };\n            authenticator(request).then(()=>{\n                const req = this._stripe.getApiField('httpClient').makeRequest(request.host, request.port, request.path, request.method, request.headers, request.body, request.protocol, timeout);\n                const requestStartTime = Date.now();\n                // @ts-ignore\n                const requestEvent = removeNullish({\n                    api_version: apiVersion,\n                    account: headers['Stripe-Account'],\n                    idempotency_key: headers['Idempotency-Key'],\n                    method,\n                    path,\n                    request_start_time: requestStartTime\n                });\n                const requestRetries = numRetries || 0;\n                const maxRetries = this._getMaxNetworkRetries(options.settings || {});\n                this._stripe._emitter.emit('request', requestEvent);\n                req.then((res)=>{\n                    if (RequestSender._shouldRetry(res, requestRetries, maxRetries)) {\n                        return retryRequest(makeRequest, apiVersion, headers, requestRetries, res.getHeaders()['retry-after']);\n                    } else if (options.streaming && res.getStatusCode() < 400) {\n                        return this._streamingResponseHandler(requestEvent, usage, callback)(res);\n                    } else {\n                        return this._jsonResponseHandler(requestEvent, apiMode, usage, callback)(res);\n                    }\n                }).catch((error)=>{\n                    if (RequestSender._shouldRetry(null, requestRetries, maxRetries, error)) {\n                        return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n                    } else {\n                        const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n                        return callback(new StripeConnectionError({\n                            message: isTimeoutError ? `Request aborted due to timeout being reached (${timeout}ms)` : RequestSender._generateConnectionErrorMessage(requestRetries),\n                            // @ts-ignore\n                            detail: error\n                        }));\n                    }\n                });\n            }).catch((e)=>{\n                throw new StripeError({\n                    message: 'Unable to authenticate the request',\n                    exception: e\n                });\n            });\n        };\n        const prepareAndMakeRequest = (error, data)=>{\n            if (error) {\n                return callback(error);\n            }\n            requestData = data;\n            this._stripe.getClientUserAgent((clientUserAgent)=>{\n                const apiVersion = this._stripe.getApiField('version');\n                const headers = this._makeHeaders({\n                    contentType: apiMode == 'v2' ? 'application/json' : 'application/x-www-form-urlencoded',\n                    contentLength: requestData.length,\n                    apiVersion: apiVersion,\n                    clientUserAgent,\n                    method,\n                    userSuppliedHeaders: options.headers,\n                    userSuppliedSettings: options.settings,\n                    stripeAccount: apiMode == 'v2' ? null : this._stripe.getApiField('stripeAccount'),\n                    stripeContext: apiMode == 'v2' ? this._stripe.getApiField('stripeContext') : null,\n                    apiMode: apiMode\n                });\n                makeRequest(apiVersion, headers, 0);\n            });\n        };\n        if (requestDataProcessor) {\n            requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n        } else {\n            let stringifiedData;\n            if (apiMode == 'v2') {\n                stringifiedData = data ? jsonStringifyRequestData(data) : '';\n            } else {\n                stringifiedData = queryStringifyRequestData(data || {}, apiMode);\n            }\n            prepareAndMakeRequest(null, stringifiedData);\n        }\n    }\n    constructor(stripe, maxBufferedRequestMetric){\n        this._stripe = stripe;\n        this._maxBufferedRequestMetric = maxBufferedRequestMetric;\n    }\n}\nclass V1Iterator {\n    async iterate(pageResult) {\n        if (!(pageResult && pageResult.data && typeof pageResult.data.length === 'number')) {\n            throw Error('Unexpected: Stripe API response does not have a well-formed `data` array.');\n        }\n        const reverseIteration = isReverseIteration(this.requestArgs);\n        if (this.index < pageResult.data.length) {\n            const idx = reverseIteration ? pageResult.data.length - 1 - this.index : this.index;\n            const value = pageResult.data[idx];\n            this.index += 1;\n            return {\n                value,\n                done: false\n            };\n        } else if (pageResult.has_more) {\n            // Reset counter, request next page, and recurse.\n            this.index = 0;\n            this.pagePromise = this.getNextPage(pageResult);\n            const nextPageResult = await this.pagePromise;\n            return this.iterate(nextPageResult);\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    /** @abstract */ getNextPage(_pageResult) {\n        throw new Error('Unimplemented');\n    }\n    async _next() {\n        return this.iterate(await this.pagePromise);\n    }\n    next() {\n        /**\n         * If a user calls `.next()` multiple times in parallel,\n         * return the same result until something has resolved\n         * to prevent page-turning race conditions.\n         */ if (this.promiseCache.currentPromise) {\n            return this.promiseCache.currentPromise;\n        }\n        const nextPromise = (async ()=>{\n            const ret = await this._next();\n            this.promiseCache.currentPromise = null;\n            return ret;\n        })();\n        this.promiseCache.currentPromise = nextPromise;\n        return nextPromise;\n    }\n    constructor(firstPagePromise, requestArgs, spec, stripeResource){\n        this.index = 0;\n        this.pagePromise = firstPagePromise;\n        this.promiseCache = {\n            currentPromise: null\n        };\n        this.requestArgs = requestArgs;\n        this.spec = spec;\n        this.stripeResource = stripeResource;\n    }\n}\nclass V1ListIterator extends V1Iterator {\n    getNextPage(pageResult) {\n        const reverseIteration = isReverseIteration(this.requestArgs);\n        const lastId = getLastId(pageResult, reverseIteration);\n        return this.stripeResource._makeRequest(this.requestArgs, this.spec, {\n            [reverseIteration ? 'ending_before' : 'starting_after']: lastId\n        });\n    }\n}\nclass V1SearchIterator extends V1Iterator {\n    getNextPage(pageResult) {\n        if (!pageResult.next_page) {\n            throw Error('Unexpected: Stripe API response does not have a well-formed `next_page` field, but `has_more` was true.');\n        }\n        return this.stripeResource._makeRequest(this.requestArgs, this.spec, {\n            page: pageResult.next_page\n        });\n    }\n}\nclass V2ListIterator {\n    async turnPage() {\n        const nextPageUrl = await this.nextPageUrl;\n        if (!nextPageUrl) return null;\n        this.spec.fullPath = nextPageUrl;\n        const page = await this.stripeResource._makeRequest([], this.spec, {});\n        this.nextPageUrl = Promise.resolve(page.next_page_url);\n        this.currentPageIterator = Promise.resolve(page.data[Symbol.iterator]());\n        return this.currentPageIterator;\n    }\n    async next() {\n        {\n            const result = (await this.currentPageIterator).next();\n            if (!result.done) return {\n                done: false,\n                value: result.value\n            };\n        }\n        const nextPageIterator = await this.turnPage();\n        if (!nextPageIterator) {\n            return {\n                done: true,\n                value: undefined\n            };\n        }\n        const result = nextPageIterator.next();\n        if (!result.done) return {\n            done: false,\n            value: result.value\n        };\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    constructor(firstPagePromise, requestArgs, spec, stripeResource){\n        this.currentPageIterator = (async ()=>{\n            const page = await firstPagePromise;\n            return page.data[Symbol.iterator]();\n        })();\n        this.nextPageUrl = (async ()=>{\n            const page = await firstPagePromise;\n            return page.next_page_url || null;\n        })();\n        this.requestArgs = requestArgs;\n        this.spec = spec;\n        this.stripeResource = stripeResource;\n    }\n}\nconst makeAutoPaginationMethods = (stripeResource, requestArgs, spec, firstPagePromise)=>{\n    const apiMode = getAPIMode(spec.fullPath || spec.path);\n    if (apiMode !== 'v2' && spec.methodType === 'search') {\n        return makeAutoPaginationMethodsFromIterator(new V1SearchIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    if (apiMode !== 'v2' && spec.methodType === 'list') {\n        return makeAutoPaginationMethodsFromIterator(new V1ListIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    if (apiMode === 'v2' && spec.methodType === 'list') {\n        return makeAutoPaginationMethodsFromIterator(new V2ListIterator(firstPagePromise, requestArgs, spec, stripeResource));\n    }\n    return null;\n};\nconst makeAutoPaginationMethodsFromIterator = (iterator)=>{\n    const autoPagingEach = makeAutoPagingEach((...args)=>iterator.next(...args));\n    const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n    const autoPaginationMethods = {\n        autoPagingEach,\n        autoPagingToArray,\n        // Async iterator functions:\n        next: ()=>iterator.next(),\n        return: ()=>{\n            // This is required for `break`.\n            return {};\n        },\n        [getAsyncIteratorSymbol()]: ()=>{\n            return autoPaginationMethods;\n        }\n    };\n    return autoPaginationMethods;\n};\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */ function getAsyncIteratorSymbol() {\n    if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n        return Symbol.asyncIterator;\n    }\n    // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n    return '@@asyncIterator';\n}\nfunction getDoneCallback(args) {\n    if (args.length < 2) {\n        return null;\n    }\n    const onDone = args[1];\n    if (typeof onDone !== 'function') {\n        throw Error(`The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`);\n    }\n    return onDone;\n}\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */ function getItemCallback(args) {\n    if (args.length === 0) {\n        return undefined;\n    }\n    const onItem = args[0];\n    if (typeof onItem !== 'function') {\n        throw Error(`The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`);\n    }\n    // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n    if (onItem.length === 2) {\n        return onItem;\n    }\n    if (onItem.length > 2) {\n        throw Error(`The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`);\n    }\n    // This magically handles all three of these usecases (the latter two being functionally identical):\n    // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n    // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n    // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n    return function _onItem(item, next) {\n        const shouldContinue = onItem(item);\n        next(shouldContinue);\n    };\n}\nfunction getLastId(listResult, reverseIteration) {\n    const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n    const lastItem = listResult.data[lastIdx];\n    const lastId = lastItem && lastItem.id;\n    if (!lastId) {\n        throw Error('Unexpected: No `id` found on the last item while auto-paging a list.');\n    }\n    return lastId;\n}\nfunction makeAutoPagingEach(asyncIteratorNext) {\n    return function autoPagingEach() {\n        const args = [].slice.call(arguments);\n        const onItem = getItemCallback(args);\n        const onDone = getDoneCallback(args);\n        if (args.length > 2) {\n            throw Error(`autoPagingEach takes up to two arguments; received ${args}`);\n        }\n        const autoPagePromise = wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem);\n        return callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n    };\n}\nfunction makeAutoPagingToArray(autoPagingEach) {\n    return function autoPagingToArray(opts, onDone) {\n        const limit = opts && opts.limit;\n        if (!limit) {\n            throw Error('You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.');\n        }\n        if (limit > 10000) {\n            throw Error('You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.');\n        }\n        const promise = new Promise((resolve, reject)=>{\n            const items = [];\n            autoPagingEach((item)=>{\n                items.push(item);\n                if (items.length >= limit) {\n                    return false;\n                }\n            }).then(()=>{\n                resolve(items);\n            }).catch(reject);\n        });\n        // @ts-ignore\n        return callbackifyPromiseWithTimeout(promise, onDone);\n    };\n}\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n    return new Promise((resolve, reject)=>{\n        function handleIteration(iterResult) {\n            if (iterResult.done) {\n                resolve();\n                return;\n            }\n            const item = iterResult.value;\n            return new Promise((next)=>{\n                // Bit confusing, perhaps; we pass a `resolve` fn\n                // to the user, so they can decide when and if to continue.\n                // They can return false, or a promise which resolves to false, to break.\n                onItem(item, next);\n            }).then((shouldContinue)=>{\n                if (shouldContinue === false) {\n                    return handleIteration({\n                        done: true,\n                        value: undefined\n                    });\n                } else {\n                    return asyncIteratorNext().then(handleIteration);\n                }\n            });\n        }\n        asyncIteratorNext().then(handleIteration).catch(reject);\n    });\n}\nfunction isReverseIteration(requestArgs) {\n    const args = [].slice.call(requestArgs);\n    const dataFromArgs = getDataFromArgs(args);\n    return !!dataFromArgs.ending_before;\n}\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n *\n * <!-- Public API accessible via Stripe.StripeResource.method -->\n */ function stripeMethod$1_(spec) {\n    if (spec.path !== undefined && spec.fullPath !== undefined) {\n        throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n    }\n    return function(...args) {\n        const callback = typeof args[args.length - 1] == 'function' && args.pop();\n        spec.urlParams = extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n        const requestPromise = callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n        Object.assign(requestPromise, makeAutoPaginationMethods(this, args, spec, requestPromise));\n        return requestPromise;\n    };\n}\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = protoExtend;\n// Expose method-creator\nStripeResource.method = stripeMethod$1_;\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\n/**\n * Encapsulates request logic for a Stripe Resource\n */ function StripeResource(stripe, deprecatedUrlData) {\n    this._stripe = stripe;\n    if (deprecatedUrlData) {\n        throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n    }\n    this.basePath = makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n    // @ts-ignore changing type of path\n    this.resourcePath = this.path;\n    // @ts-ignore changing type of path\n    this.path = makeURLInterpolator(this.path);\n    this.initialize(...arguments);\n}\nStripeResource.prototype = {\n    _stripe: null,\n    // @ts-ignore the type of path changes in ctor\n    path: '',\n    resourcePath: '',\n    // Methods that don't use the API's default '/v1' path can override it with this setting.\n    basePath: null,\n    initialize () {},\n    // Function to override the default data processor. This allows full control\n    // over how a StripeResource's request data will get converted into an HTTP\n    // body. This is useful for non-standard HTTP requests. The function should\n    // take method name, data, and headers as arguments.\n    requestDataProcessor: null,\n    // Function to add a validation checks before sending the request, errors should\n    // be thrown, and they will be passed to the callback/promise.\n    validateRequest: null,\n    createFullPath (commandPath, urlData) {\n        const urlParts = [\n            this.basePath(urlData),\n            this.path(urlData)\n        ];\n        if (typeof commandPath === 'function') {\n            const computedCommandPath = commandPath(urlData);\n            // If we have no actual command path, we just omit it to avoid adding a\n            // trailing slash. This is important for top-level listing requests, which\n            // do not have a command path.\n            if (computedCommandPath) {\n                urlParts.push(computedCommandPath);\n            }\n        } else {\n            urlParts.push(commandPath);\n        }\n        return this._joinUrlParts(urlParts);\n    },\n    // Creates a relative resource path with symbols left in (unlike\n    // createFullPath which takes some data to replace them with). For example it\n    // might produce: /invoices/{id}\n    createResourcePathWithSymbols (pathWithSymbols) {\n        // If there is no path beyond the resource path, we want to produce just\n        // /<resource path> rather than /<resource path>/.\n        if (pathWithSymbols) {\n            return `/${this._joinUrlParts([\n                this.resourcePath,\n                pathWithSymbols\n            ])}`;\n        } else {\n            return `/${this.resourcePath}`;\n        }\n    },\n    _joinUrlParts (parts) {\n        // Replace any accidentally doubled up slashes. This previously used\n        // path.join, which would do this as well. Unfortunately we need to do this\n        // as the functions for creating paths are technically part of the public\n        // interface and so we need to preserve backwards compatibility.\n        return parts.join('/').replace(/\\/{2,}/g, '/');\n    },\n    _getRequestOpts (requestArgs, spec, overrideData) {\n        var _a;\n        // Extract spec values with defaults.\n        const requestMethod = (spec.method || 'GET').toUpperCase();\n        const usage = spec.usage || [];\n        const urlParams = spec.urlParams || [];\n        const encode = spec.encode || ((data)=>data);\n        const isUsingFullPath = !!spec.fullPath;\n        const commandPath = makeURLInterpolator(isUsingFullPath ? spec.fullPath : spec.path || '');\n        // When using fullPath, we ignore the resource path as it should already be\n        // fully qualified.\n        const path = isUsingFullPath ? spec.fullPath : this.createResourcePathWithSymbols(spec.path);\n        // Don't mutate args externally.\n        const args = [].slice.call(requestArgs);\n        // Generate and validate url params.\n        const urlData = urlParams.reduce((urlData, param)=>{\n            const arg = args.shift();\n            if (typeof arg !== 'string') {\n                throw new Error(`Stripe: Argument \"${param}\" must be a string, but got: ${arg} (on API request to \\`${requestMethod} ${path}\\`)`);\n            }\n            urlData[param] = arg;\n            return urlData;\n        }, {});\n        // Pull request data and options (headers, auth) from args.\n        const dataFromArgs = getDataFromArgs(args);\n        const data = encode(Object.assign({}, dataFromArgs, overrideData));\n        const options = getOptionsFromArgs(args);\n        const host = options.host || spec.host;\n        const streaming = !!spec.streaming;\n        // Validate that there are no more args.\n        if (args.filter((x)=>x != null).length) {\n            throw new Error(`Stripe: Unknown arguments (${args}). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to ${requestMethod} \\`${path}\\`)`);\n        }\n        // When using full path, we can just invoke the URL interpolator directly\n        // as we don't need to use the resource to create a full path.\n        const requestPath = isUsingFullPath ? commandPath(urlData) : this.createFullPath(commandPath, urlData);\n        const headers = Object.assign(options.headers, spec.headers);\n        if (spec.validator) {\n            spec.validator(data, {\n                headers\n            });\n        }\n        const dataInQuery = spec.method === 'GET' || spec.method === 'DELETE';\n        const bodyData = dataInQuery ? null : data;\n        const queryData = dataInQuery ? data : {};\n        return {\n            requestMethod,\n            requestPath,\n            bodyData,\n            queryData,\n            authenticator: (_a = options.authenticator) !== null && _a !== void 0 ? _a : null,\n            headers,\n            host: host !== null && host !== void 0 ? host : null,\n            streaming,\n            settings: options.settings,\n            usage\n        };\n    },\n    _makeRequest (requestArgs, spec, overrideData) {\n        return new Promise((resolve, reject)=>{\n            var _a;\n            let opts;\n            try {\n                opts = this._getRequestOpts(requestArgs, spec, overrideData);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n            function requestCallback(err, response) {\n                if (err) {\n                    reject(err);\n                } else {\n                    resolve(spec.transformResponseData ? spec.transformResponseData(response) : response);\n                }\n            }\n            const emptyQuery = Object.keys(opts.queryData).length === 0;\n            const path = [\n                opts.requestPath,\n                emptyQuery ? '' : '?',\n                queryStringifyRequestData(opts.queryData, getAPIMode(opts.requestPath))\n            ].join('');\n            const { headers, settings } = opts;\n            this._stripe._requestSender._request(opts.requestMethod, opts.host, path, opts.bodyData, opts.authenticator, {\n                headers,\n                settings,\n                streaming: opts.streaming\n            }, opts.usage, requestCallback, (_a = this.requestDataProcessor) === null || _a === void 0 ? void 0 : _a.bind(this));\n        });\n    }\n};\nfunction createWebhooks(platformFunctions) {\n    const Webhook = {\n        DEFAULT_TOLERANCE: 300,\n        // @ts-ignore\n        signature: null,\n        constructEvent (payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            try {\n                this.signature.verifyHeader(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider, receivedAt);\n            } catch (e) {\n                if (e instanceof CryptoProviderOnlySupportsAsyncError) {\n                    e.message += '\\nUse `await constructEventAsync(...)` instead of `constructEvent(...)`';\n                }\n                throw e;\n            }\n            const jsonPayload = payload instanceof Uint8Array ? JSON.parse(new TextDecoder('utf8').decode(payload)) : JSON.parse(payload);\n            return jsonPayload;\n        },\n        async constructEventAsync (payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            await this.signature.verifyHeaderAsync(payload, header, secret, tolerance || Webhook.DEFAULT_TOLERANCE, cryptoProvider, receivedAt);\n            const jsonPayload = payload instanceof Uint8Array ? JSON.parse(new TextDecoder('utf8').decode(payload)) : JSON.parse(payload);\n            return jsonPayload;\n        },\n        /**\n         * Generates a header to be used for webhook mocking\n         *\n         * @typedef {object} opts\n         * @property {number} timestamp - Timestamp of the header. Defaults to Date.now()\n         * @property {string} payload - JSON stringified payload object, containing the 'id' and 'object' parameters\n         * @property {string} secret - Stripe webhook secret 'whsec_...'\n         * @property {string} scheme - Version of API to hit. Defaults to 'v1'.\n         * @property {string} signature - Computed webhook signature\n         * @property {CryptoProvider} cryptoProvider - Crypto provider to use for computing the signature if none was provided. Defaults to NodeCryptoProvider.\n         */ generateTestHeaderString: function(opts) {\n            const preparedOpts = prepareOptions(opts);\n            const signature = preparedOpts.signature || preparedOpts.cryptoProvider.computeHMACSignature(preparedOpts.payloadString, preparedOpts.secret);\n            return preparedOpts.generateHeaderString(signature);\n        },\n        generateTestHeaderStringAsync: async function(opts) {\n            const preparedOpts = prepareOptions(opts);\n            const signature = preparedOpts.signature || await preparedOpts.cryptoProvider.computeHMACSignatureAsync(preparedOpts.payloadString, preparedOpts.secret);\n            return preparedOpts.generateHeaderString(signature);\n        }\n    };\n    const signature = {\n        EXPECTED_SCHEME: 'v1',\n        verifyHeader (encodedPayload, encodedHeader, secret, tolerance, cryptoProvider, receivedAt) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            const secretContainsWhitespace = /\\s/.test(secret);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = cryptoProvider.computeHMACSignature(makeHMACContent(payload, details), secret);\n            validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt);\n            return true;\n        },\n        async verifyHeaderAsync (encodedPayload, encodedHeader, secret, tolerance, cryptoProvider, receivedAt) {\n            const { decodedHeader: header, decodedPayload: payload, details, suspectPayloadType } = parseEventDetails(encodedPayload, encodedHeader, this.EXPECTED_SCHEME);\n            const secretContainsWhitespace = /\\s/.test(secret);\n            cryptoProvider = cryptoProvider || getCryptoProvider();\n            const expectedSignature = await cryptoProvider.computeHMACSignatureAsync(makeHMACContent(payload, details), secret);\n            return validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt);\n        }\n    };\n    function makeHMACContent(payload, details) {\n        return `${details.timestamp}.${payload}`;\n    }\n    function parseEventDetails(encodedPayload, encodedHeader, expectedScheme) {\n        if (!encodedPayload) {\n            throw new StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No webhook payload was provided.'\n            });\n        }\n        const suspectPayloadType = typeof encodedPayload != 'string' && !(encodedPayload instanceof Uint8Array);\n        const textDecoder = new TextDecoder('utf8');\n        const decodedPayload = encodedPayload instanceof Uint8Array ? textDecoder.decode(encodedPayload) : encodedPayload;\n        // Express's type for `Request#headers` is `string | []string`\n        // which is because the `set-cookie` header is an array,\n        // but no other headers are an array (docs: https://nodejs.org/api/http.html#http_message_headers)\n        // (Express's Request class is an extension of http.IncomingMessage, and doesn't appear to be relevantly modified: https://github.com/expressjs/express/blob/master/lib/request.js#L31)\n        if (Array.isArray(encodedHeader)) {\n            throw new Error('Unexpected: An array was passed as a header, which should not be possible for the stripe-signature header.');\n        }\n        if (encodedHeader == null || encodedHeader == '') {\n            throw new StripeSignatureVerificationError(encodedHeader, encodedPayload, {\n                message: 'No stripe-signature header value was provided.'\n            });\n        }\n        const decodedHeader = encodedHeader instanceof Uint8Array ? textDecoder.decode(encodedHeader) : encodedHeader;\n        const details = parseHeader(decodedHeader, expectedScheme);\n        if (!details || details.timestamp === -1) {\n            throw new StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'Unable to extract timestamp and signatures from header'\n            });\n        }\n        if (!details.signatures.length) {\n            throw new StripeSignatureVerificationError(decodedHeader, decodedPayload, {\n                message: 'No signatures found with expected scheme'\n            });\n        }\n        return {\n            decodedPayload,\n            decodedHeader,\n            details,\n            suspectPayloadType\n        };\n    }\n    function validateComputedSignature(payload, header, details, expectedSignature, tolerance, suspectPayloadType, secretContainsWhitespace, receivedAt) {\n        const signatureFound = !!details.signatures.filter(platformFunctions.secureCompare.bind(platformFunctions, expectedSignature)).length;\n        const docsLocation = '\\nLearn more about webhook signing and explore webhook integration examples for various frameworks at ' + 'https://docs.stripe.com/webhooks/signature';\n        const whitespaceMessage = secretContainsWhitespace ? '\\n\\nNote: The provided signing secret contains whitespace. This often indicates an extra newline or space is in the value' : '';\n        if (!signatureFound) {\n            if (suspectPayloadType) {\n                throw new StripeSignatureVerificationError(header, payload, {\n                    message: 'Webhook payload must be provided as a string or a Buffer (https://nodejs.org/api/buffer.html) instance representing the _raw_ request body.' + 'Payload was provided as a parsed JavaScript object instead. \\n' + 'Signature verification is impossible without access to the original signed material. \\n' + docsLocation + '\\n' + whitespaceMessage\n                });\n            }\n            throw new StripeSignatureVerificationError(header, payload, {\n                message: 'No signatures found matching the expected signature for payload.' + ' Are you passing the raw request body you received from Stripe? \\n' + ' If a webhook request is being forwarded by a third-party tool,' + ' ensure that the exact request body, including JSON formatting and new line style, is preserved.\\n' + docsLocation + '\\n' + whitespaceMessage\n            });\n        }\n        const timestampAge = Math.floor((typeof receivedAt === 'number' ? receivedAt : Date.now()) / 1000) - details.timestamp;\n        if (tolerance > 0 && timestampAge > tolerance) {\n            // @ts-ignore\n            throw new StripeSignatureVerificationError(header, payload, {\n                message: 'Timestamp outside the tolerance zone'\n            });\n        }\n        return true;\n    }\n    function parseHeader(header, scheme) {\n        if (typeof header !== 'string') {\n            return null;\n        }\n        return header.split(',').reduce((accum, item)=>{\n            const kv = item.split('=');\n            if (kv[0] === 't') {\n                accum.timestamp = parseInt(kv[1], 10);\n            }\n            if (kv[0] === scheme) {\n                accum.signatures.push(kv[1]);\n            }\n            return accum;\n        }, {\n            timestamp: -1,\n            signatures: []\n        });\n    }\n    let webhooksCryptoProviderInstance = null;\n    /**\n     * Lazily instantiate a CryptoProvider instance. This is a stateless object\n     * so a singleton can be used here.\n     */ function getCryptoProvider() {\n        if (!webhooksCryptoProviderInstance) {\n            webhooksCryptoProviderInstance = platformFunctions.createDefaultCryptoProvider();\n        }\n        return webhooksCryptoProviderInstance;\n    }\n    function prepareOptions(opts) {\n        if (!opts) {\n            throw new StripeError({\n                message: 'Options are required'\n            });\n        }\n        const timestamp = Math.floor(opts.timestamp) || Math.floor(Date.now() / 1000);\n        const scheme = opts.scheme || signature.EXPECTED_SCHEME;\n        const cryptoProvider = opts.cryptoProvider || getCryptoProvider();\n        const payloadString = `${timestamp}.${opts.payload}`;\n        const generateHeaderString = (signature)=>{\n            return `t=${timestamp},${scheme}=${signature}`;\n        };\n        return Object.assign(Object.assign({}, opts), {\n            timestamp,\n            scheme,\n            cryptoProvider,\n            payloadString,\n            generateHeaderString\n        });\n    }\n    Webhook.signature = signature;\n    return Webhook;\n}\n// File generated from our OpenAPI spec\nconst ApiVersion = '2025-02-24.acacia';\n// ResourceNamespace allows you to create nested resources, i.e. `stripe.issuing.cards`.\n// It also works recursively, so you could do i.e. `stripe.billing.invoicing.pay`.\nfunction ResourceNamespace(stripe, resources) {\n    for(const name in resources){\n        if (!Object.prototype.hasOwnProperty.call(resources, name)) {\n            continue;\n        }\n        const camelCaseName = name[0].toLowerCase() + name.substring(1);\n        const resource = new resources[name](stripe);\n        this[camelCaseName] = resource;\n    }\n}\nfunction resourceNamespace(namespace, resources) {\n    return function(stripe) {\n        return new ResourceNamespace(stripe, resources);\n    };\n}\n// File generated from our OpenAPI spec\nconst stripeMethod$1Z = StripeResource.method;\nconst Accounts$1 = StripeResource.extend({\n    retrieve: stripeMethod$1Z({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts/{account}'\n    }),\n    list: stripeMethod$1Z({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts',\n        methodType: 'list'\n    }),\n    disconnect: stripeMethod$1Z({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/disconnect'\n    }),\n    listOwners: stripeMethod$1Z({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/accounts/{account}/owners',\n        methodType: 'list'\n    }),\n    refresh: stripeMethod$1Z({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/refresh'\n    }),\n    subscribe: stripeMethod$1Z({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/subscribe'\n    }),\n    unsubscribe: stripeMethod$1Z({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/accounts/{account}/unsubscribe'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1Y = StripeResource.method;\nconst ActiveEntitlements = StripeResource.extend({\n    retrieve: stripeMethod$1Y({\n        method: 'GET',\n        fullPath: '/v1/entitlements/active_entitlements/{id}'\n    }),\n    list: stripeMethod$1Y({\n        method: 'GET',\n        fullPath: '/v1/entitlements/active_entitlements',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1X = StripeResource.method;\nconst Alerts = StripeResource.extend({\n    create: stripeMethod$1X({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts'\n    }),\n    retrieve: stripeMethod$1X({\n        method: 'GET',\n        fullPath: '/v1/billing/alerts/{id}'\n    }),\n    list: stripeMethod$1X({\n        method: 'GET',\n        fullPath: '/v1/billing/alerts',\n        methodType: 'list'\n    }),\n    activate: stripeMethod$1X({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/activate'\n    }),\n    archive: stripeMethod$1X({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/archive'\n    }),\n    deactivate: stripeMethod$1X({\n        method: 'POST',\n        fullPath: '/v1/billing/alerts/{id}/deactivate'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1W = StripeResource.method;\nconst Authorizations$1 = StripeResource.extend({\n    create: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations'\n    }),\n    capture: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/capture'\n    }),\n    expire: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/expire'\n    }),\n    finalizeAmount: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/finalize_amount'\n    }),\n    increment: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/increment'\n    }),\n    respond: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond'\n    }),\n    reverse: stripeMethod$1W({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/authorizations/{authorization}/reverse'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1V = StripeResource.method;\nconst Authorizations = StripeResource.extend({\n    retrieve: stripeMethod$1V({\n        method: 'GET',\n        fullPath: '/v1/issuing/authorizations/{authorization}'\n    }),\n    update: stripeMethod$1V({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}'\n    }),\n    list: stripeMethod$1V({\n        method: 'GET',\n        fullPath: '/v1/issuing/authorizations',\n        methodType: 'list'\n    }),\n    approve: stripeMethod$1V({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}/approve'\n    }),\n    decline: stripeMethod$1V({\n        method: 'POST',\n        fullPath: '/v1/issuing/authorizations/{authorization}/decline'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1U = StripeResource.method;\nconst Calculations = StripeResource.extend({\n    create: stripeMethod$1U({\n        method: 'POST',\n        fullPath: '/v1/tax/calculations'\n    }),\n    retrieve: stripeMethod$1U({\n        method: 'GET',\n        fullPath: '/v1/tax/calculations/{calculation}'\n    }),\n    listLineItems: stripeMethod$1U({\n        method: 'GET',\n        fullPath: '/v1/tax/calculations/{calculation}/line_items',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1T = StripeResource.method;\nconst Cardholders = StripeResource.extend({\n    create: stripeMethod$1T({\n        method: 'POST',\n        fullPath: '/v1/issuing/cardholders'\n    }),\n    retrieve: stripeMethod$1T({\n        method: 'GET',\n        fullPath: '/v1/issuing/cardholders/{cardholder}'\n    }),\n    update: stripeMethod$1T({\n        method: 'POST',\n        fullPath: '/v1/issuing/cardholders/{cardholder}'\n    }),\n    list: stripeMethod$1T({\n        method: 'GET',\n        fullPath: '/v1/issuing/cardholders',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1S = StripeResource.method;\nconst Cards$1 = StripeResource.extend({\n    deliverCard: stripeMethod$1S({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/deliver'\n    }),\n    failCard: stripeMethod$1S({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/fail'\n    }),\n    returnCard: stripeMethod$1S({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/return'\n    }),\n    shipCard: stripeMethod$1S({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/ship'\n    }),\n    submitCard: stripeMethod$1S({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/cards/{card}/shipping/submit'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1R = StripeResource.method;\nconst Cards = StripeResource.extend({\n    create: stripeMethod$1R({\n        method: 'POST',\n        fullPath: '/v1/issuing/cards'\n    }),\n    retrieve: stripeMethod$1R({\n        method: 'GET',\n        fullPath: '/v1/issuing/cards/{card}'\n    }),\n    update: stripeMethod$1R({\n        method: 'POST',\n        fullPath: '/v1/issuing/cards/{card}'\n    }),\n    list: stripeMethod$1R({\n        method: 'GET',\n        fullPath: '/v1/issuing/cards',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1Q = StripeResource.method;\nconst Configurations$1 = StripeResource.extend({\n    create: stripeMethod$1Q({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/configurations'\n    }),\n    retrieve: stripeMethod$1Q({\n        method: 'GET',\n        fullPath: '/v1/billing_portal/configurations/{configuration}'\n    }),\n    update: stripeMethod$1Q({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/configurations/{configuration}'\n    }),\n    list: stripeMethod$1Q({\n        method: 'GET',\n        fullPath: '/v1/billing_portal/configurations',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1P = StripeResource.method;\nconst Configurations = StripeResource.extend({\n    create: stripeMethod$1P({\n        method: 'POST',\n        fullPath: '/v1/terminal/configurations'\n    }),\n    retrieve: stripeMethod$1P({\n        method: 'GET',\n        fullPath: '/v1/terminal/configurations/{configuration}'\n    }),\n    update: stripeMethod$1P({\n        method: 'POST',\n        fullPath: '/v1/terminal/configurations/{configuration}'\n    }),\n    list: stripeMethod$1P({\n        method: 'GET',\n        fullPath: '/v1/terminal/configurations',\n        methodType: 'list'\n    }),\n    del: stripeMethod$1P({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/configurations/{configuration}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1O = StripeResource.method;\nconst ConfirmationTokens$1 = StripeResource.extend({\n    create: stripeMethod$1O({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/confirmation_tokens'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1N = StripeResource.method;\nconst ConnectionTokens = StripeResource.extend({\n    create: stripeMethod$1N({\n        method: 'POST',\n        fullPath: '/v1/terminal/connection_tokens'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1M = StripeResource.method;\nconst CreditBalanceSummary = StripeResource.extend({\n    retrieve: stripeMethod$1M({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_summary'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1L = StripeResource.method;\nconst CreditBalanceTransactions = StripeResource.extend({\n    retrieve: stripeMethod$1L({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_transactions/{id}'\n    }),\n    list: stripeMethod$1L({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_balance_transactions',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1K = StripeResource.method;\nconst CreditGrants = StripeResource.extend({\n    create: stripeMethod$1K({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants'\n    }),\n    retrieve: stripeMethod$1K({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_grants/{id}'\n    }),\n    update: stripeMethod$1K({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}'\n    }),\n    list: stripeMethod$1K({\n        method: 'GET',\n        fullPath: '/v1/billing/credit_grants',\n        methodType: 'list'\n    }),\n    expire: stripeMethod$1K({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}/expire'\n    }),\n    voidGrant: stripeMethod$1K({\n        method: 'POST',\n        fullPath: '/v1/billing/credit_grants/{id}/void'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1J = StripeResource.method;\nconst CreditReversals = StripeResource.extend({\n    create: stripeMethod$1J({\n        method: 'POST',\n        fullPath: '/v1/treasury/credit_reversals'\n    }),\n    retrieve: stripeMethod$1J({\n        method: 'GET',\n        fullPath: '/v1/treasury/credit_reversals/{credit_reversal}'\n    }),\n    list: stripeMethod$1J({\n        method: 'GET',\n        fullPath: '/v1/treasury/credit_reversals',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1I = StripeResource.method;\nconst Customers$1 = StripeResource.extend({\n    fundCashBalance: stripeMethod$1I({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/customers/{customer}/fund_cash_balance'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1H = StripeResource.method;\nconst DebitReversals = StripeResource.extend({\n    create: stripeMethod$1H({\n        method: 'POST',\n        fullPath: '/v1/treasury/debit_reversals'\n    }),\n    retrieve: stripeMethod$1H({\n        method: 'GET',\n        fullPath: '/v1/treasury/debit_reversals/{debit_reversal}'\n    }),\n    list: stripeMethod$1H({\n        method: 'GET',\n        fullPath: '/v1/treasury/debit_reversals',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1G = StripeResource.method;\nconst Disputes$1 = StripeResource.extend({\n    create: stripeMethod$1G({\n        method: 'POST',\n        fullPath: '/v1/issuing/disputes'\n    }),\n    retrieve: stripeMethod$1G({\n        method: 'GET',\n        fullPath: '/v1/issuing/disputes/{dispute}'\n    }),\n    update: stripeMethod$1G({\n        method: 'POST',\n        fullPath: '/v1/issuing/disputes/{dispute}'\n    }),\n    list: stripeMethod$1G({\n        method: 'GET',\n        fullPath: '/v1/issuing/disputes',\n        methodType: 'list'\n    }),\n    submit: stripeMethod$1G({\n        method: 'POST',\n        fullPath: '/v1/issuing/disputes/{dispute}/submit'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1F = StripeResource.method;\nconst EarlyFraudWarnings = StripeResource.extend({\n    retrieve: stripeMethod$1F({\n        method: 'GET',\n        fullPath: '/v1/radar/early_fraud_warnings/{early_fraud_warning}'\n    }),\n    list: stripeMethod$1F({\n        method: 'GET',\n        fullPath: '/v1/radar/early_fraud_warnings',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1E = StripeResource.method;\nconst EventDestinations = StripeResource.extend({\n    create: stripeMethod$1E({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations'\n    }),\n    retrieve: stripeMethod$1E({\n        method: 'GET',\n        fullPath: '/v2/core/event_destinations/{id}'\n    }),\n    update: stripeMethod$1E({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}'\n    }),\n    list: stripeMethod$1E({\n        method: 'GET',\n        fullPath: '/v2/core/event_destinations',\n        methodType: 'list'\n    }),\n    del: stripeMethod$1E({\n        method: 'DELETE',\n        fullPath: '/v2/core/event_destinations/{id}'\n    }),\n    disable: stripeMethod$1E({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/disable'\n    }),\n    enable: stripeMethod$1E({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/enable'\n    }),\n    ping: stripeMethod$1E({\n        method: 'POST',\n        fullPath: '/v2/core/event_destinations/{id}/ping'\n    })\n});\n// This file is manually maintained\nconst stripeMethod$1D = StripeResource.method;\nconst Events$1 = StripeResource.extend({\n    retrieve (...args) {\n        const transformResponseData = (response)=>{\n            return this.addFetchRelatedObjectIfNeeded(response);\n        };\n        return stripeMethod$1D({\n            method: 'GET',\n            fullPath: '/v2/core/events/{id}',\n            transformResponseData\n        }).apply(this, args);\n    },\n    list (...args) {\n        const transformResponseData = (response)=>{\n            return Object.assign(Object.assign({}, response), {\n                data: response.data.map(this.addFetchRelatedObjectIfNeeded.bind(this))\n            });\n        };\n        return stripeMethod$1D({\n            method: 'GET',\n            fullPath: '/v2/core/events',\n            methodType: 'list',\n            transformResponseData\n        }).apply(this, args);\n    },\n    /**\n     * @private\n     *\n     * For internal use in stripe-node.\n     *\n     * @param pulledEvent The retrieved event object\n     * @returns The retrieved event object with a fetchRelatedObject method,\n     * if pulledEvent.related_object is valid (non-null and has a url)\n     */ addFetchRelatedObjectIfNeeded (pulledEvent) {\n        if (!pulledEvent.related_object || !pulledEvent.related_object.url) {\n            return pulledEvent;\n        }\n        return Object.assign(Object.assign({}, pulledEvent), {\n            fetchRelatedObject: ()=>// the related object. 'this' is needed to construct\n                // and send the request, but the method spec controls\n                // the url endpoint and method, so it doesn't matter\n                // that 'this' is an Events resource object here\n                stripeMethod$1D({\n                    method: 'GET',\n                    fullPath: pulledEvent.related_object.url\n                }).apply(this, [\n                    {\n                        stripeAccount: pulledEvent.context\n                    }\n                ])\n        });\n    }\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1C = StripeResource.method;\nconst Features = StripeResource.extend({\n    create: stripeMethod$1C({\n        method: 'POST',\n        fullPath: '/v1/entitlements/features'\n    }),\n    retrieve: stripeMethod$1C({\n        method: 'GET',\n        fullPath: '/v1/entitlements/features/{id}'\n    }),\n    update: stripeMethod$1C({\n        method: 'POST',\n        fullPath: '/v1/entitlements/features/{id}'\n    }),\n    list: stripeMethod$1C({\n        method: 'GET',\n        fullPath: '/v1/entitlements/features',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1B = StripeResource.method;\nconst FinancialAccounts = StripeResource.extend({\n    create: stripeMethod$1B({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts'\n    }),\n    retrieve: stripeMethod$1B({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}'\n    }),\n    update: stripeMethod$1B({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}'\n    }),\n    list: stripeMethod$1B({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts',\n        methodType: 'list'\n    }),\n    close: stripeMethod$1B({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/close'\n    }),\n    retrieveFeatures: stripeMethod$1B({\n        method: 'GET',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/features'\n    }),\n    updateFeatures: stripeMethod$1B({\n        method: 'POST',\n        fullPath: '/v1/treasury/financial_accounts/{financial_account}/features'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1A = StripeResource.method;\nconst InboundTransfers$1 = StripeResource.extend({\n    fail: stripeMethod$1A({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/fail'\n    }),\n    returnInboundTransfer: stripeMethod$1A({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/return'\n    }),\n    succeed: stripeMethod$1A({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/inbound_transfers/{id}/succeed'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1z = StripeResource.method;\nconst InboundTransfers = StripeResource.extend({\n    create: stripeMethod$1z({\n        method: 'POST',\n        fullPath: '/v1/treasury/inbound_transfers'\n    }),\n    retrieve: stripeMethod$1z({\n        method: 'GET',\n        fullPath: '/v1/treasury/inbound_transfers/{id}'\n    }),\n    list: stripeMethod$1z({\n        method: 'GET',\n        fullPath: '/v1/treasury/inbound_transfers',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$1z({\n        method: 'POST',\n        fullPath: '/v1/treasury/inbound_transfers/{inbound_transfer}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1y = StripeResource.method;\nconst Locations = StripeResource.extend({\n    create: stripeMethod$1y({\n        method: 'POST',\n        fullPath: '/v1/terminal/locations'\n    }),\n    retrieve: stripeMethod$1y({\n        method: 'GET',\n        fullPath: '/v1/terminal/locations/{location}'\n    }),\n    update: stripeMethod$1y({\n        method: 'POST',\n        fullPath: '/v1/terminal/locations/{location}'\n    }),\n    list: stripeMethod$1y({\n        method: 'GET',\n        fullPath: '/v1/terminal/locations',\n        methodType: 'list'\n    }),\n    del: stripeMethod$1y({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/locations/{location}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1x = StripeResource.method;\nconst MeterEventAdjustments$1 = StripeResource.extend({\n    create: stripeMethod$1x({\n        method: 'POST',\n        fullPath: '/v1/billing/meter_event_adjustments'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1w = StripeResource.method;\nconst MeterEventAdjustments = StripeResource.extend({\n    create: stripeMethod$1w({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_adjustments'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1v = StripeResource.method;\nconst MeterEventSession = StripeResource.extend({\n    create: stripeMethod$1v({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_session'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1u = StripeResource.method;\nconst MeterEventStream = StripeResource.extend({\n    create: stripeMethod$1u({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_event_stream',\n        host: 'meter-events.stripe.com'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1t = StripeResource.method;\nconst MeterEvents$1 = StripeResource.extend({\n    create: stripeMethod$1t({\n        method: 'POST',\n        fullPath: '/v1/billing/meter_events'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1s = StripeResource.method;\nconst MeterEvents = StripeResource.extend({\n    create: stripeMethod$1s({\n        method: 'POST',\n        fullPath: '/v2/billing/meter_events'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1r = StripeResource.method;\nconst Meters = StripeResource.extend({\n    create: stripeMethod$1r({\n        method: 'POST',\n        fullPath: '/v1/billing/meters'\n    }),\n    retrieve: stripeMethod$1r({\n        method: 'GET',\n        fullPath: '/v1/billing/meters/{id}'\n    }),\n    update: stripeMethod$1r({\n        method: 'POST',\n        fullPath: '/v1/billing/meters/{id}'\n    }),\n    list: stripeMethod$1r({\n        method: 'GET',\n        fullPath: '/v1/billing/meters',\n        methodType: 'list'\n    }),\n    deactivate: stripeMethod$1r({\n        method: 'POST',\n        fullPath: '/v1/billing/meters/{id}/deactivate'\n    }),\n    listEventSummaries: stripeMethod$1r({\n        method: 'GET',\n        fullPath: '/v1/billing/meters/{id}/event_summaries',\n        methodType: 'list'\n    }),\n    reactivate: stripeMethod$1r({\n        method: 'POST',\n        fullPath: '/v1/billing/meters/{id}/reactivate'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1q = StripeResource.method;\nconst Orders = StripeResource.extend({\n    create: stripeMethod$1q({\n        method: 'POST',\n        fullPath: '/v1/climate/orders'\n    }),\n    retrieve: stripeMethod$1q({\n        method: 'GET',\n        fullPath: '/v1/climate/orders/{order}'\n    }),\n    update: stripeMethod$1q({\n        method: 'POST',\n        fullPath: '/v1/climate/orders/{order}'\n    }),\n    list: stripeMethod$1q({\n        method: 'GET',\n        fullPath: '/v1/climate/orders',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$1q({\n        method: 'POST',\n        fullPath: '/v1/climate/orders/{order}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1p = StripeResource.method;\nconst OutboundPayments$1 = StripeResource.extend({\n    update: stripeMethod$1p({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}'\n    }),\n    fail: stripeMethod$1p({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/fail'\n    }),\n    post: stripeMethod$1p({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/post'\n    }),\n    returnOutboundPayment: stripeMethod$1p({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_payments/{id}/return'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1o = StripeResource.method;\nconst OutboundPayments = StripeResource.extend({\n    create: stripeMethod$1o({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_payments'\n    }),\n    retrieve: stripeMethod$1o({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_payments/{id}'\n    }),\n    list: stripeMethod$1o({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_payments',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$1o({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_payments/{id}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1n = StripeResource.method;\nconst OutboundTransfers$1 = StripeResource.extend({\n    update: stripeMethod$1n({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}'\n    }),\n    fail: stripeMethod$1n({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail'\n    }),\n    post: stripeMethod$1n({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post'\n    }),\n    returnOutboundTransfer: stripeMethod$1n({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1m = StripeResource.method;\nconst OutboundTransfers = StripeResource.extend({\n    create: stripeMethod$1m({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_transfers'\n    }),\n    retrieve: stripeMethod$1m({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_transfers/{outbound_transfer}'\n    }),\n    list: stripeMethod$1m({\n        method: 'GET',\n        fullPath: '/v1/treasury/outbound_transfers',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$1m({\n        method: 'POST',\n        fullPath: '/v1/treasury/outbound_transfers/{outbound_transfer}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1l = StripeResource.method;\nconst PersonalizationDesigns$1 = StripeResource.extend({\n    activate: stripeMethod$1l({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate'\n    }),\n    deactivate: stripeMethod$1l({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate'\n    }),\n    reject: stripeMethod$1l({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1k = StripeResource.method;\nconst PersonalizationDesigns = StripeResource.extend({\n    create: stripeMethod$1k({\n        method: 'POST',\n        fullPath: '/v1/issuing/personalization_designs'\n    }),\n    retrieve: stripeMethod$1k({\n        method: 'GET',\n        fullPath: '/v1/issuing/personalization_designs/{personalization_design}'\n    }),\n    update: stripeMethod$1k({\n        method: 'POST',\n        fullPath: '/v1/issuing/personalization_designs/{personalization_design}'\n    }),\n    list: stripeMethod$1k({\n        method: 'GET',\n        fullPath: '/v1/issuing/personalization_designs',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1j = StripeResource.method;\nconst PhysicalBundles = StripeResource.extend({\n    retrieve: stripeMethod$1j({\n        method: 'GET',\n        fullPath: '/v1/issuing/physical_bundles/{physical_bundle}'\n    }),\n    list: stripeMethod$1j({\n        method: 'GET',\n        fullPath: '/v1/issuing/physical_bundles',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1i = StripeResource.method;\nconst Products$1 = StripeResource.extend({\n    retrieve: stripeMethod$1i({\n        method: 'GET',\n        fullPath: '/v1/climate/products/{product}'\n    }),\n    list: stripeMethod$1i({\n        method: 'GET',\n        fullPath: '/v1/climate/products',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1h = StripeResource.method;\nconst Readers$1 = StripeResource.extend({\n    presentPaymentMethod: stripeMethod$1h({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/terminal/readers/{reader}/present_payment_method'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1g = StripeResource.method;\nconst Readers = StripeResource.extend({\n    create: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers'\n    }),\n    retrieve: stripeMethod$1g({\n        method: 'GET',\n        fullPath: '/v1/terminal/readers/{reader}'\n    }),\n    update: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}'\n    }),\n    list: stripeMethod$1g({\n        method: 'GET',\n        fullPath: '/v1/terminal/readers',\n        methodType: 'list'\n    }),\n    del: stripeMethod$1g({\n        method: 'DELETE',\n        fullPath: '/v1/terminal/readers/{reader}'\n    }),\n    cancelAction: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/cancel_action'\n    }),\n    processPaymentIntent: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/process_payment_intent'\n    }),\n    processSetupIntent: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/process_setup_intent'\n    }),\n    refundPayment: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/refund_payment'\n    }),\n    setReaderDisplay: stripeMethod$1g({\n        method: 'POST',\n        fullPath: '/v1/terminal/readers/{reader}/set_reader_display'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1f = StripeResource.method;\nconst ReceivedCredits$1 = StripeResource.extend({\n    create: stripeMethod$1f({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/received_credits'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1e = StripeResource.method;\nconst ReceivedCredits = StripeResource.extend({\n    retrieve: stripeMethod$1e({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_credits/{id}'\n    }),\n    list: stripeMethod$1e({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_credits',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1d = StripeResource.method;\nconst ReceivedDebits$1 = StripeResource.extend({\n    create: stripeMethod$1d({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/treasury/received_debits'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1c = StripeResource.method;\nconst ReceivedDebits = StripeResource.extend({\n    retrieve: stripeMethod$1c({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_debits/{id}'\n    }),\n    list: stripeMethod$1c({\n        method: 'GET',\n        fullPath: '/v1/treasury/received_debits',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1b = StripeResource.method;\nconst Refunds$1 = StripeResource.extend({\n    expire: stripeMethod$1b({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/refunds/{refund}/expire'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1a = StripeResource.method;\nconst Registrations = StripeResource.extend({\n    create: stripeMethod$1a({\n        method: 'POST',\n        fullPath: '/v1/tax/registrations'\n    }),\n    retrieve: stripeMethod$1a({\n        method: 'GET',\n        fullPath: '/v1/tax/registrations/{id}'\n    }),\n    update: stripeMethod$1a({\n        method: 'POST',\n        fullPath: '/v1/tax/registrations/{id}'\n    }),\n    list: stripeMethod$1a({\n        method: 'GET',\n        fullPath: '/v1/tax/registrations',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$19 = StripeResource.method;\nconst ReportRuns = StripeResource.extend({\n    create: stripeMethod$19({\n        method: 'POST',\n        fullPath: '/v1/reporting/report_runs'\n    }),\n    retrieve: stripeMethod$19({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_runs/{report_run}'\n    }),\n    list: stripeMethod$19({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_runs',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$18 = StripeResource.method;\nconst ReportTypes = StripeResource.extend({\n    retrieve: stripeMethod$18({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_types/{report_type}'\n    }),\n    list: stripeMethod$18({\n        method: 'GET',\n        fullPath: '/v1/reporting/report_types',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$17 = StripeResource.method;\nconst Requests = StripeResource.extend({\n    create: stripeMethod$17({\n        method: 'POST',\n        fullPath: '/v1/forwarding/requests'\n    }),\n    retrieve: stripeMethod$17({\n        method: 'GET',\n        fullPath: '/v1/forwarding/requests/{id}'\n    }),\n    list: stripeMethod$17({\n        method: 'GET',\n        fullPath: '/v1/forwarding/requests',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$16 = StripeResource.method;\nconst ScheduledQueryRuns = StripeResource.extend({\n    retrieve: stripeMethod$16({\n        method: 'GET',\n        fullPath: '/v1/sigma/scheduled_query_runs/{scheduled_query_run}'\n    }),\n    list: stripeMethod$16({\n        method: 'GET',\n        fullPath: '/v1/sigma/scheduled_query_runs',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$15 = StripeResource.method;\nconst Secrets = StripeResource.extend({\n    create: stripeMethod$15({\n        method: 'POST',\n        fullPath: '/v1/apps/secrets'\n    }),\n    list: stripeMethod$15({\n        method: 'GET',\n        fullPath: '/v1/apps/secrets',\n        methodType: 'list'\n    }),\n    deleteWhere: stripeMethod$15({\n        method: 'POST',\n        fullPath: '/v1/apps/secrets/delete'\n    }),\n    find: stripeMethod$15({\n        method: 'GET',\n        fullPath: '/v1/apps/secrets/find'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$14 = StripeResource.method;\nconst Sessions$2 = StripeResource.extend({\n    create: stripeMethod$14({\n        method: 'POST',\n        fullPath: '/v1/billing_portal/sessions'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$13 = StripeResource.method;\nconst Sessions$1 = StripeResource.extend({\n    create: stripeMethod$13({\n        method: 'POST',\n        fullPath: '/v1/checkout/sessions'\n    }),\n    retrieve: stripeMethod$13({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions/{session}'\n    }),\n    update: stripeMethod$13({\n        method: 'POST',\n        fullPath: '/v1/checkout/sessions/{session}'\n    }),\n    list: stripeMethod$13({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions',\n        methodType: 'list'\n    }),\n    expire: stripeMethod$13({\n        method: 'POST',\n        fullPath: '/v1/checkout/sessions/{session}/expire'\n    }),\n    listLineItems: stripeMethod$13({\n        method: 'GET',\n        fullPath: '/v1/checkout/sessions/{session}/line_items',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$12 = StripeResource.method;\nconst Sessions = StripeResource.extend({\n    create: stripeMethod$12({\n        method: 'POST',\n        fullPath: '/v1/financial_connections/sessions'\n    }),\n    retrieve: stripeMethod$12({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/sessions/{session}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$11 = StripeResource.method;\nconst Settings = StripeResource.extend({\n    retrieve: stripeMethod$11({\n        method: 'GET',\n        fullPath: '/v1/tax/settings'\n    }),\n    update: stripeMethod$11({\n        method: 'POST',\n        fullPath: '/v1/tax/settings'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$10 = StripeResource.method;\nconst Suppliers = StripeResource.extend({\n    retrieve: stripeMethod$10({\n        method: 'GET',\n        fullPath: '/v1/climate/suppliers/{supplier}'\n    }),\n    list: stripeMethod$10({\n        method: 'GET',\n        fullPath: '/v1/climate/suppliers',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$$ = StripeResource.method;\nconst TestClocks = StripeResource.extend({\n    create: stripeMethod$$({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/test_clocks'\n    }),\n    retrieve: stripeMethod$$({\n        method: 'GET',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}'\n    }),\n    list: stripeMethod$$({\n        method: 'GET',\n        fullPath: '/v1/test_helpers/test_clocks',\n        methodType: 'list'\n    }),\n    del: stripeMethod$$({\n        method: 'DELETE',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}'\n    }),\n    advance: stripeMethod$$({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/test_clocks/{test_clock}/advance'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$_ = StripeResource.method;\nconst Tokens$1 = StripeResource.extend({\n    retrieve: stripeMethod$_({\n        method: 'GET',\n        fullPath: '/v1/issuing/tokens/{token}'\n    }),\n    update: stripeMethod$_({\n        method: 'POST',\n        fullPath: '/v1/issuing/tokens/{token}'\n    }),\n    list: stripeMethod$_({\n        method: 'GET',\n        fullPath: '/v1/issuing/tokens',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$Z = StripeResource.method;\nconst TransactionEntries = StripeResource.extend({\n    retrieve: stripeMethod$Z({\n        method: 'GET',\n        fullPath: '/v1/treasury/transaction_entries/{id}'\n    }),\n    list: stripeMethod$Z({\n        method: 'GET',\n        fullPath: '/v1/treasury/transaction_entries',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$Y = StripeResource.method;\nconst Transactions$4 = StripeResource.extend({\n    createForceCapture: stripeMethod$Y({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/create_force_capture'\n    }),\n    createUnlinkedRefund: stripeMethod$Y({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/create_unlinked_refund'\n    }),\n    refund: stripeMethod$Y({\n        method: 'POST',\n        fullPath: '/v1/test_helpers/issuing/transactions/{transaction}/refund'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$X = StripeResource.method;\nconst Transactions$3 = StripeResource.extend({\n    retrieve: stripeMethod$X({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/transactions/{transaction}'\n    }),\n    list: stripeMethod$X({\n        method: 'GET',\n        fullPath: '/v1/financial_connections/transactions',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$W = StripeResource.method;\nconst Transactions$2 = StripeResource.extend({\n    retrieve: stripeMethod$W({\n        method: 'GET',\n        fullPath: '/v1/issuing/transactions/{transaction}'\n    }),\n    update: stripeMethod$W({\n        method: 'POST',\n        fullPath: '/v1/issuing/transactions/{transaction}'\n    }),\n    list: stripeMethod$W({\n        method: 'GET',\n        fullPath: '/v1/issuing/transactions',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$V = StripeResource.method;\nconst Transactions$1 = StripeResource.extend({\n    retrieve: stripeMethod$V({\n        method: 'GET',\n        fullPath: '/v1/tax/transactions/{transaction}'\n    }),\n    createFromCalculation: stripeMethod$V({\n        method: 'POST',\n        fullPath: '/v1/tax/transactions/create_from_calculation'\n    }),\n    createReversal: stripeMethod$V({\n        method: 'POST',\n        fullPath: '/v1/tax/transactions/create_reversal'\n    }),\n    listLineItems: stripeMethod$V({\n        method: 'GET',\n        fullPath: '/v1/tax/transactions/{transaction}/line_items',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$U = StripeResource.method;\nconst Transactions = StripeResource.extend({\n    retrieve: stripeMethod$U({\n        method: 'GET',\n        fullPath: '/v1/treasury/transactions/{id}'\n    }),\n    list: stripeMethod$U({\n        method: 'GET',\n        fullPath: '/v1/treasury/transactions',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$T = StripeResource.method;\nconst ValueListItems = StripeResource.extend({\n    create: stripeMethod$T({\n        method: 'POST',\n        fullPath: '/v1/radar/value_list_items'\n    }),\n    retrieve: stripeMethod$T({\n        method: 'GET',\n        fullPath: '/v1/radar/value_list_items/{item}'\n    }),\n    list: stripeMethod$T({\n        method: 'GET',\n        fullPath: '/v1/radar/value_list_items',\n        methodType: 'list'\n    }),\n    del: stripeMethod$T({\n        method: 'DELETE',\n        fullPath: '/v1/radar/value_list_items/{item}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$S = StripeResource.method;\nconst ValueLists = StripeResource.extend({\n    create: stripeMethod$S({\n        method: 'POST',\n        fullPath: '/v1/radar/value_lists'\n    }),\n    retrieve: stripeMethod$S({\n        method: 'GET',\n        fullPath: '/v1/radar/value_lists/{value_list}'\n    }),\n    update: stripeMethod$S({\n        method: 'POST',\n        fullPath: '/v1/radar/value_lists/{value_list}'\n    }),\n    list: stripeMethod$S({\n        method: 'GET',\n        fullPath: '/v1/radar/value_lists',\n        methodType: 'list'\n    }),\n    del: stripeMethod$S({\n        method: 'DELETE',\n        fullPath: '/v1/radar/value_lists/{value_list}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$R = StripeResource.method;\nconst VerificationReports = StripeResource.extend({\n    retrieve: stripeMethod$R({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_reports/{report}'\n    }),\n    list: stripeMethod$R({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_reports',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$Q = StripeResource.method;\nconst VerificationSessions = StripeResource.extend({\n    create: stripeMethod$Q({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions'\n    }),\n    retrieve: stripeMethod$Q({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_sessions/{session}'\n    }),\n    update: stripeMethod$Q({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}'\n    }),\n    list: stripeMethod$Q({\n        method: 'GET',\n        fullPath: '/v1/identity/verification_sessions',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$Q({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}/cancel'\n    }),\n    redact: stripeMethod$Q({\n        method: 'POST',\n        fullPath: '/v1/identity/verification_sessions/{session}/redact'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$P = StripeResource.method;\n// Since path can either be `account` or `accounts`, support both through stripeMethod path\nconst Accounts = StripeResource.extend({\n    create: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts'\n    }),\n    retrieve (id, ...args) {\n        // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n        // old account ids and api keys. To request the account for an api key, send null as the id\n        if (typeof id === 'string') {\n            return stripeMethod$P({\n                method: 'GET',\n                fullPath: '/v1/accounts/{id}'\n            }).apply(this, [\n                id,\n                ...args\n            ]);\n        } else {\n            if (id === null || id === undefined) {\n                // Remove id as stripeMethod would complain of unexpected argument\n                [].shift.apply([\n                    id,\n                    ...args\n                ]);\n            }\n            return stripeMethod$P({\n                method: 'GET',\n                fullPath: '/v1/account'\n            }).apply(this, [\n                id,\n                ...args\n            ]);\n        }\n    },\n    update: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}'\n    }),\n    list: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts',\n        methodType: 'list'\n    }),\n    del: stripeMethod$P({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}'\n    }),\n    createExternalAccount: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts'\n    }),\n    createLoginLink: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/login_links'\n    }),\n    createPerson: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons'\n    }),\n    deleteExternalAccount: stripeMethod$P({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n    }),\n    deletePerson: stripeMethod$P({\n        method: 'DELETE',\n        fullPath: '/v1/accounts/{account}/persons/{person}'\n    }),\n    listCapabilities: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities',\n        methodType: 'list'\n    }),\n    listExternalAccounts: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts',\n        methodType: 'list'\n    }),\n    listPersons: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons',\n        methodType: 'list'\n    }),\n    reject: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/reject'\n    }),\n    retrieveCurrent: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/account'\n    }),\n    retrieveCapability: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n    }),\n    retrieveExternalAccount: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n    }),\n    retrievePerson: stripeMethod$P({\n        method: 'GET',\n        fullPath: '/v1/accounts/{account}/persons/{person}'\n    }),\n    updateCapability: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/capabilities/{capability}'\n    }),\n    updateExternalAccount: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/external_accounts/{id}'\n    }),\n    updatePerson: stripeMethod$P({\n        method: 'POST',\n        fullPath: '/v1/accounts/{account}/persons/{person}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$O = StripeResource.method;\nconst AccountLinks = StripeResource.extend({\n    create: stripeMethod$O({\n        method: 'POST',\n        fullPath: '/v1/account_links'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$N = StripeResource.method;\nconst AccountSessions = StripeResource.extend({\n    create: stripeMethod$N({\n        method: 'POST',\n        fullPath: '/v1/account_sessions'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$M = StripeResource.method;\nconst ApplePayDomains = StripeResource.extend({\n    create: stripeMethod$M({\n        method: 'POST',\n        fullPath: '/v1/apple_pay/domains'\n    }),\n    retrieve: stripeMethod$M({\n        method: 'GET',\n        fullPath: '/v1/apple_pay/domains/{domain}'\n    }),\n    list: stripeMethod$M({\n        method: 'GET',\n        fullPath: '/v1/apple_pay/domains',\n        methodType: 'list'\n    }),\n    del: stripeMethod$M({\n        method: 'DELETE',\n        fullPath: '/v1/apple_pay/domains/{domain}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$L = StripeResource.method;\nconst ApplicationFees = StripeResource.extend({\n    retrieve: stripeMethod$L({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{id}'\n    }),\n    list: stripeMethod$L({\n        method: 'GET',\n        fullPath: '/v1/application_fees',\n        methodType: 'list'\n    }),\n    createRefund: stripeMethod$L({\n        method: 'POST',\n        fullPath: '/v1/application_fees/{id}/refunds'\n    }),\n    listRefunds: stripeMethod$L({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{id}/refunds',\n        methodType: 'list'\n    }),\n    retrieveRefund: stripeMethod$L({\n        method: 'GET',\n        fullPath: '/v1/application_fees/{fee}/refunds/{id}'\n    }),\n    updateRefund: stripeMethod$L({\n        method: 'POST',\n        fullPath: '/v1/application_fees/{fee}/refunds/{id}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$K = StripeResource.method;\nconst Balance = StripeResource.extend({\n    retrieve: stripeMethod$K({\n        method: 'GET',\n        fullPath: '/v1/balance'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$J = StripeResource.method;\nconst BalanceTransactions = StripeResource.extend({\n    retrieve: stripeMethod$J({\n        method: 'GET',\n        fullPath: '/v1/balance_transactions/{id}'\n    }),\n    list: stripeMethod$J({\n        method: 'GET',\n        fullPath: '/v1/balance_transactions',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$I = StripeResource.method;\nconst Charges = StripeResource.extend({\n    create: stripeMethod$I({\n        method: 'POST',\n        fullPath: '/v1/charges'\n    }),\n    retrieve: stripeMethod$I({\n        method: 'GET',\n        fullPath: '/v1/charges/{charge}'\n    }),\n    update: stripeMethod$I({\n        method: 'POST',\n        fullPath: '/v1/charges/{charge}'\n    }),\n    list: stripeMethod$I({\n        method: 'GET',\n        fullPath: '/v1/charges',\n        methodType: 'list'\n    }),\n    capture: stripeMethod$I({\n        method: 'POST',\n        fullPath: '/v1/charges/{charge}/capture'\n    }),\n    search: stripeMethod$I({\n        method: 'GET',\n        fullPath: '/v1/charges/search',\n        methodType: 'search'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$H = StripeResource.method;\nconst ConfirmationTokens = StripeResource.extend({\n    retrieve: stripeMethod$H({\n        method: 'GET',\n        fullPath: '/v1/confirmation_tokens/{confirmation_token}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$G = StripeResource.method;\nconst CountrySpecs = StripeResource.extend({\n    retrieve: stripeMethod$G({\n        method: 'GET',\n        fullPath: '/v1/country_specs/{country}'\n    }),\n    list: stripeMethod$G({\n        method: 'GET',\n        fullPath: '/v1/country_specs',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$F = StripeResource.method;\nconst Coupons = StripeResource.extend({\n    create: stripeMethod$F({\n        method: 'POST',\n        fullPath: '/v1/coupons'\n    }),\n    retrieve: stripeMethod$F({\n        method: 'GET',\n        fullPath: '/v1/coupons/{coupon}'\n    }),\n    update: stripeMethod$F({\n        method: 'POST',\n        fullPath: '/v1/coupons/{coupon}'\n    }),\n    list: stripeMethod$F({\n        method: 'GET',\n        fullPath: '/v1/coupons',\n        methodType: 'list'\n    }),\n    del: stripeMethod$F({\n        method: 'DELETE',\n        fullPath: '/v1/coupons/{coupon}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$E = StripeResource.method;\nconst CreditNotes = StripeResource.extend({\n    create: stripeMethod$E({\n        method: 'POST',\n        fullPath: '/v1/credit_notes'\n    }),\n    retrieve: stripeMethod$E({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/{id}'\n    }),\n    update: stripeMethod$E({\n        method: 'POST',\n        fullPath: '/v1/credit_notes/{id}'\n    }),\n    list: stripeMethod$E({\n        method: 'GET',\n        fullPath: '/v1/credit_notes',\n        methodType: 'list'\n    }),\n    listLineItems: stripeMethod$E({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/{credit_note}/lines',\n        methodType: 'list'\n    }),\n    listPreviewLineItems: stripeMethod$E({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/preview/lines',\n        methodType: 'list'\n    }),\n    preview: stripeMethod$E({\n        method: 'GET',\n        fullPath: '/v1/credit_notes/preview'\n    }),\n    voidCreditNote: stripeMethod$E({\n        method: 'POST',\n        fullPath: '/v1/credit_notes/{id}/void'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$D = StripeResource.method;\nconst CustomerSessions = StripeResource.extend({\n    create: stripeMethod$D({\n        method: 'POST',\n        fullPath: '/v1/customer_sessions'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$C = StripeResource.method;\nconst Customers = StripeResource.extend({\n    create: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers'\n    }),\n    retrieve: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}'\n    }),\n    update: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}'\n    }),\n    list: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers',\n        methodType: 'list'\n    }),\n    del: stripeMethod$C({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}'\n    }),\n    createBalanceTransaction: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/balance_transactions'\n    }),\n    createFundingInstructions: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/funding_instructions'\n    }),\n    createSource: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources'\n    }),\n    createTaxId: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/tax_ids'\n    }),\n    deleteDiscount: stripeMethod$C({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/discount'\n    }),\n    deleteSource: stripeMethod$C({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/sources/{id}'\n    }),\n    deleteTaxId: stripeMethod$C({\n        method: 'DELETE',\n        fullPath: '/v1/customers/{customer}/tax_ids/{id}'\n    }),\n    listBalanceTransactions: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/balance_transactions',\n        methodType: 'list'\n    }),\n    listCashBalanceTransactions: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance_transactions',\n        methodType: 'list'\n    }),\n    listPaymentMethods: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/payment_methods',\n        methodType: 'list'\n    }),\n    listSources: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/sources',\n        methodType: 'list'\n    }),\n    listTaxIds: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/tax_ids',\n        methodType: 'list'\n    }),\n    retrieveBalanceTransaction: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/balance_transactions/{transaction}'\n    }),\n    retrieveCashBalance: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance'\n    }),\n    retrieveCashBalanceTransaction: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/cash_balance_transactions/{transaction}'\n    }),\n    retrievePaymentMethod: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/payment_methods/{payment_method}'\n    }),\n    retrieveSource: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/sources/{id}'\n    }),\n    retrieveTaxId: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/{customer}/tax_ids/{id}'\n    }),\n    search: stripeMethod$C({\n        method: 'GET',\n        fullPath: '/v1/customers/search',\n        methodType: 'search'\n    }),\n    updateBalanceTransaction: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/balance_transactions/{transaction}'\n    }),\n    updateCashBalance: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/cash_balance'\n    }),\n    updateSource: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources/{id}'\n    }),\n    verifySource: stripeMethod$C({\n        method: 'POST',\n        fullPath: '/v1/customers/{customer}/sources/{id}/verify'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$B = StripeResource.method;\nconst Disputes = StripeResource.extend({\n    retrieve: stripeMethod$B({\n        method: 'GET',\n        fullPath: '/v1/disputes/{dispute}'\n    }),\n    update: stripeMethod$B({\n        method: 'POST',\n        fullPath: '/v1/disputes/{dispute}'\n    }),\n    list: stripeMethod$B({\n        method: 'GET',\n        fullPath: '/v1/disputes',\n        methodType: 'list'\n    }),\n    close: stripeMethod$B({\n        method: 'POST',\n        fullPath: '/v1/disputes/{dispute}/close'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$A = StripeResource.method;\nconst EphemeralKeys = StripeResource.extend({\n    create: stripeMethod$A({\n        method: 'POST',\n        fullPath: '/v1/ephemeral_keys',\n        validator: (data, options)=>{\n            if (!options.headers || !options.headers['Stripe-Version']) {\n                throw new Error('Passing apiVersion in a separate options hash is required to create an ephemeral key. See https://stripe.com/docs/api/versioning?lang=node');\n            }\n        }\n    }),\n    del: stripeMethod$A({\n        method: 'DELETE',\n        fullPath: '/v1/ephemeral_keys/{key}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$z = StripeResource.method;\nconst Events = StripeResource.extend({\n    retrieve: stripeMethod$z({\n        method: 'GET',\n        fullPath: '/v1/events/{id}'\n    }),\n    list: stripeMethod$z({\n        method: 'GET',\n        fullPath: '/v1/events',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$y = StripeResource.method;\nconst ExchangeRates = StripeResource.extend({\n    retrieve: stripeMethod$y({\n        method: 'GET',\n        fullPath: '/v1/exchange_rates/{rate_id}'\n    }),\n    list: stripeMethod$y({\n        method: 'GET',\n        fullPath: '/v1/exchange_rates',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$x = StripeResource.method;\nconst FileLinks = StripeResource.extend({\n    create: stripeMethod$x({\n        method: 'POST',\n        fullPath: '/v1/file_links'\n    }),\n    retrieve: stripeMethod$x({\n        method: 'GET',\n        fullPath: '/v1/file_links/{link}'\n    }),\n    update: stripeMethod$x({\n        method: 'POST',\n        fullPath: '/v1/file_links/{link}'\n    }),\n    list: stripeMethod$x({\n        method: 'GET',\n        fullPath: '/v1/file_links',\n        methodType: 'list'\n    })\n});\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers)=>{\n    const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n    headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n    const textEncoder = new TextEncoder();\n    let buffer = new Uint8Array(0);\n    const endBuffer = textEncoder.encode('\\r\\n');\n    function push(l) {\n        const prevBuffer = buffer;\n        const newBuffer = l instanceof Uint8Array ? l : new Uint8Array(textEncoder.encode(l));\n        buffer = new Uint8Array(prevBuffer.length + newBuffer.length + 2);\n        buffer.set(prevBuffer);\n        buffer.set(newBuffer, prevBuffer.length);\n        buffer.set(endBuffer, buffer.length - 2);\n    }\n    function q(s) {\n        return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n    }\n    const flattenedData = flattenAndStringify(data);\n    for(const k in flattenedData){\n        if (!Object.prototype.hasOwnProperty.call(flattenedData, k)) {\n            continue;\n        }\n        const v = flattenedData[k];\n        push(`--${segno}`);\n        if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n            const typedEntry = v;\n            push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(typedEntry.name || 'blob')}`);\n            push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n            push('');\n            push(typedEntry.data);\n        } else {\n            push(`Content-Disposition: form-data; name=${q(k)}`);\n            push('');\n            push(v);\n        }\n    }\n    push(`--${segno}--`);\n    return buffer;\n};\nfunction multipartRequestDataProcessor(method, data, headers, callback) {\n    data = data || {};\n    if (method !== 'POST') {\n        return callback(null, queryStringifyRequestData(data));\n    }\n    this._stripe._platformFunctions.tryBufferData(data).then((bufferedData)=>{\n        const buffer = multipartDataGenerator(method, bufferedData, headers);\n        return callback(null, buffer);\n    }).catch((err)=>callback(err, null));\n}\n// File generated from our OpenAPI spec\nconst stripeMethod$w = StripeResource.method;\nconst Files = StripeResource.extend({\n    create: stripeMethod$w({\n        method: 'POST',\n        fullPath: '/v1/files',\n        headers: {\n            'Content-Type': 'multipart/form-data'\n        },\n        host: 'files.stripe.com'\n    }),\n    retrieve: stripeMethod$w({\n        method: 'GET',\n        fullPath: '/v1/files/{file}'\n    }),\n    list: stripeMethod$w({\n        method: 'GET',\n        fullPath: '/v1/files',\n        methodType: 'list'\n    }),\n    requestDataProcessor: multipartRequestDataProcessor\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$v = StripeResource.method;\nconst InvoiceItems = StripeResource.extend({\n    create: stripeMethod$v({\n        method: 'POST',\n        fullPath: '/v1/invoiceitems'\n    }),\n    retrieve: stripeMethod$v({\n        method: 'GET',\n        fullPath: '/v1/invoiceitems/{invoiceitem}'\n    }),\n    update: stripeMethod$v({\n        method: 'POST',\n        fullPath: '/v1/invoiceitems/{invoiceitem}'\n    }),\n    list: stripeMethod$v({\n        method: 'GET',\n        fullPath: '/v1/invoiceitems',\n        methodType: 'list'\n    }),\n    del: stripeMethod$v({\n        method: 'DELETE',\n        fullPath: '/v1/invoiceitems/{invoiceitem}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$u = StripeResource.method;\nconst InvoiceRenderingTemplates = StripeResource.extend({\n    retrieve: stripeMethod$u({\n        method: 'GET',\n        fullPath: '/v1/invoice_rendering_templates/{template}'\n    }),\n    list: stripeMethod$u({\n        method: 'GET',\n        fullPath: '/v1/invoice_rendering_templates',\n        methodType: 'list'\n    }),\n    archive: stripeMethod$u({\n        method: 'POST',\n        fullPath: '/v1/invoice_rendering_templates/{template}/archive'\n    }),\n    unarchive: stripeMethod$u({\n        method: 'POST',\n        fullPath: '/v1/invoice_rendering_templates/{template}/unarchive'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$t = StripeResource.method;\nconst Invoices = StripeResource.extend({\n    create: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices'\n    }),\n    retrieve: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices/{invoice}'\n    }),\n    update: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}'\n    }),\n    list: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices',\n        methodType: 'list'\n    }),\n    del: stripeMethod$t({\n        method: 'DELETE',\n        fullPath: '/v1/invoices/{invoice}'\n    }),\n    addLines: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/add_lines'\n    }),\n    createPreview: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/create_preview'\n    }),\n    finalizeInvoice: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/finalize'\n    }),\n    listLineItems: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices/{invoice}/lines',\n        methodType: 'list'\n    }),\n    listUpcomingLines: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices/upcoming/lines',\n        methodType: 'list'\n    }),\n    markUncollectible: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/mark_uncollectible'\n    }),\n    pay: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/pay'\n    }),\n    removeLines: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/remove_lines'\n    }),\n    retrieveUpcoming: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices/upcoming'\n    }),\n    search: stripeMethod$t({\n        method: 'GET',\n        fullPath: '/v1/invoices/search',\n        methodType: 'search'\n    }),\n    sendInvoice: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/send'\n    }),\n    updateLines: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/update_lines'\n    }),\n    updateLineItem: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/lines/{line_item_id}'\n    }),\n    voidInvoice: stripeMethod$t({\n        method: 'POST',\n        fullPath: '/v1/invoices/{invoice}/void'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$s = StripeResource.method;\nconst Mandates = StripeResource.extend({\n    retrieve: stripeMethod$s({\n        method: 'GET',\n        fullPath: '/v1/mandates/{mandate}'\n    })\n});\nconst stripeMethod$r = StripeResource.method;\nconst oAuthHost = 'connect.stripe.com';\nconst OAuth = StripeResource.extend({\n    basePath: '/',\n    authorizeUrl (params, options) {\n        params = params || {};\n        options = options || {};\n        let path = 'oauth/authorize';\n        // For Express accounts, the path changes\n        if (options.express) {\n            path = `express/${path}`;\n        }\n        if (!params.response_type) {\n            params.response_type = 'code';\n        }\n        if (!params.client_id) {\n            params.client_id = this._stripe.getClientId();\n        }\n        if (!params.scope) {\n            params.scope = 'read_write';\n        }\n        return `https://${oAuthHost}/${path}?${queryStringifyRequestData(params)}`;\n    },\n    token: stripeMethod$r({\n        method: 'POST',\n        path: 'oauth/token',\n        host: oAuthHost\n    }),\n    deauthorize (spec, ...args) {\n        if (!spec.client_id) {\n            spec.client_id = this._stripe.getClientId();\n        }\n        return stripeMethod$r({\n            method: 'POST',\n            path: 'oauth/deauthorize',\n            host: oAuthHost\n        }).apply(this, [\n            spec,\n            ...args\n        ]);\n    }\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$q = StripeResource.method;\nconst PaymentIntents = StripeResource.extend({\n    create: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents'\n    }),\n    retrieve: stripeMethod$q({\n        method: 'GET',\n        fullPath: '/v1/payment_intents/{intent}'\n    }),\n    update: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}'\n    }),\n    list: stripeMethod$q({\n        method: 'GET',\n        fullPath: '/v1/payment_intents',\n        methodType: 'list'\n    }),\n    applyCustomerBalance: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/apply_customer_balance'\n    }),\n    cancel: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/cancel'\n    }),\n    capture: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/capture'\n    }),\n    confirm: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/confirm'\n    }),\n    incrementAuthorization: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/increment_authorization'\n    }),\n    search: stripeMethod$q({\n        method: 'GET',\n        fullPath: '/v1/payment_intents/search',\n        methodType: 'search'\n    }),\n    verifyMicrodeposits: stripeMethod$q({\n        method: 'POST',\n        fullPath: '/v1/payment_intents/{intent}/verify_microdeposits'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$p = StripeResource.method;\nconst PaymentLinks = StripeResource.extend({\n    create: stripeMethod$p({\n        method: 'POST',\n        fullPath: '/v1/payment_links'\n    }),\n    retrieve: stripeMethod$p({\n        method: 'GET',\n        fullPath: '/v1/payment_links/{payment_link}'\n    }),\n    update: stripeMethod$p({\n        method: 'POST',\n        fullPath: '/v1/payment_links/{payment_link}'\n    }),\n    list: stripeMethod$p({\n        method: 'GET',\n        fullPath: '/v1/payment_links',\n        methodType: 'list'\n    }),\n    listLineItems: stripeMethod$p({\n        method: 'GET',\n        fullPath: '/v1/payment_links/{payment_link}/line_items',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$o = StripeResource.method;\nconst PaymentMethodConfigurations = StripeResource.extend({\n    create: stripeMethod$o({\n        method: 'POST',\n        fullPath: '/v1/payment_method_configurations'\n    }),\n    retrieve: stripeMethod$o({\n        method: 'GET',\n        fullPath: '/v1/payment_method_configurations/{configuration}'\n    }),\n    update: stripeMethod$o({\n        method: 'POST',\n        fullPath: '/v1/payment_method_configurations/{configuration}'\n    }),\n    list: stripeMethod$o({\n        method: 'GET',\n        fullPath: '/v1/payment_method_configurations',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$n = StripeResource.method;\nconst PaymentMethodDomains = StripeResource.extend({\n    create: stripeMethod$n({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains'\n    }),\n    retrieve: stripeMethod$n({\n        method: 'GET',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}'\n    }),\n    update: stripeMethod$n({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}'\n    }),\n    list: stripeMethod$n({\n        method: 'GET',\n        fullPath: '/v1/payment_method_domains',\n        methodType: 'list'\n    }),\n    validate: stripeMethod$n({\n        method: 'POST',\n        fullPath: '/v1/payment_method_domains/{payment_method_domain}/validate'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$m = StripeResource.method;\nconst PaymentMethods = StripeResource.extend({\n    create: stripeMethod$m({\n        method: 'POST',\n        fullPath: '/v1/payment_methods'\n    }),\n    retrieve: stripeMethod$m({\n        method: 'GET',\n        fullPath: '/v1/payment_methods/{payment_method}'\n    }),\n    update: stripeMethod$m({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}'\n    }),\n    list: stripeMethod$m({\n        method: 'GET',\n        fullPath: '/v1/payment_methods',\n        methodType: 'list'\n    }),\n    attach: stripeMethod$m({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}/attach'\n    }),\n    detach: stripeMethod$m({\n        method: 'POST',\n        fullPath: '/v1/payment_methods/{payment_method}/detach'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$l = StripeResource.method;\nconst Payouts = StripeResource.extend({\n    create: stripeMethod$l({\n        method: 'POST',\n        fullPath: '/v1/payouts'\n    }),\n    retrieve: stripeMethod$l({\n        method: 'GET',\n        fullPath: '/v1/payouts/{payout}'\n    }),\n    update: stripeMethod$l({\n        method: 'POST',\n        fullPath: '/v1/payouts/{payout}'\n    }),\n    list: stripeMethod$l({\n        method: 'GET',\n        fullPath: '/v1/payouts',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$l({\n        method: 'POST',\n        fullPath: '/v1/payouts/{payout}/cancel'\n    }),\n    reverse: stripeMethod$l({\n        method: 'POST',\n        fullPath: '/v1/payouts/{payout}/reverse'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$k = StripeResource.method;\nconst Plans = StripeResource.extend({\n    create: stripeMethod$k({\n        method: 'POST',\n        fullPath: '/v1/plans'\n    }),\n    retrieve: stripeMethod$k({\n        method: 'GET',\n        fullPath: '/v1/plans/{plan}'\n    }),\n    update: stripeMethod$k({\n        method: 'POST',\n        fullPath: '/v1/plans/{plan}'\n    }),\n    list: stripeMethod$k({\n        method: 'GET',\n        fullPath: '/v1/plans',\n        methodType: 'list'\n    }),\n    del: stripeMethod$k({\n        method: 'DELETE',\n        fullPath: '/v1/plans/{plan}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$j = StripeResource.method;\nconst Prices = StripeResource.extend({\n    create: stripeMethod$j({\n        method: 'POST',\n        fullPath: '/v1/prices'\n    }),\n    retrieve: stripeMethod$j({\n        method: 'GET',\n        fullPath: '/v1/prices/{price}'\n    }),\n    update: stripeMethod$j({\n        method: 'POST',\n        fullPath: '/v1/prices/{price}'\n    }),\n    list: stripeMethod$j({\n        method: 'GET',\n        fullPath: '/v1/prices',\n        methodType: 'list'\n    }),\n    search: stripeMethod$j({\n        method: 'GET',\n        fullPath: '/v1/prices/search',\n        methodType: 'search'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$i = StripeResource.method;\nconst Products = StripeResource.extend({\n    create: stripeMethod$i({\n        method: 'POST',\n        fullPath: '/v1/products'\n    }),\n    retrieve: stripeMethod$i({\n        method: 'GET',\n        fullPath: '/v1/products/{id}'\n    }),\n    update: stripeMethod$i({\n        method: 'POST',\n        fullPath: '/v1/products/{id}'\n    }),\n    list: stripeMethod$i({\n        method: 'GET',\n        fullPath: '/v1/products',\n        methodType: 'list'\n    }),\n    del: stripeMethod$i({\n        method: 'DELETE',\n        fullPath: '/v1/products/{id}'\n    }),\n    createFeature: stripeMethod$i({\n        method: 'POST',\n        fullPath: '/v1/products/{product}/features'\n    }),\n    deleteFeature: stripeMethod$i({\n        method: 'DELETE',\n        fullPath: '/v1/products/{product}/features/{id}'\n    }),\n    listFeatures: stripeMethod$i({\n        method: 'GET',\n        fullPath: '/v1/products/{product}/features',\n        methodType: 'list'\n    }),\n    retrieveFeature: stripeMethod$i({\n        method: 'GET',\n        fullPath: '/v1/products/{product}/features/{id}'\n    }),\n    search: stripeMethod$i({\n        method: 'GET',\n        fullPath: '/v1/products/search',\n        methodType: 'search'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$h = StripeResource.method;\nconst PromotionCodes = StripeResource.extend({\n    create: stripeMethod$h({\n        method: 'POST',\n        fullPath: '/v1/promotion_codes'\n    }),\n    retrieve: stripeMethod$h({\n        method: 'GET',\n        fullPath: '/v1/promotion_codes/{promotion_code}'\n    }),\n    update: stripeMethod$h({\n        method: 'POST',\n        fullPath: '/v1/promotion_codes/{promotion_code}'\n    }),\n    list: stripeMethod$h({\n        method: 'GET',\n        fullPath: '/v1/promotion_codes',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$g = StripeResource.method;\nconst Quotes = StripeResource.extend({\n    create: stripeMethod$g({\n        method: 'POST',\n        fullPath: '/v1/quotes'\n    }),\n    retrieve: stripeMethod$g({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}'\n    }),\n    update: stripeMethod$g({\n        method: 'POST',\n        fullPath: '/v1/quotes/{quote}'\n    }),\n    list: stripeMethod$g({\n        method: 'GET',\n        fullPath: '/v1/quotes',\n        methodType: 'list'\n    }),\n    accept: stripeMethod$g({\n        method: 'POST',\n        fullPath: '/v1/quotes/{quote}/accept'\n    }),\n    cancel: stripeMethod$g({\n        method: 'POST',\n        fullPath: '/v1/quotes/{quote}/cancel'\n    }),\n    finalizeQuote: stripeMethod$g({\n        method: 'POST',\n        fullPath: '/v1/quotes/{quote}/finalize'\n    }),\n    listComputedUpfrontLineItems: stripeMethod$g({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/computed_upfront_line_items',\n        methodType: 'list'\n    }),\n    listLineItems: stripeMethod$g({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/line_items',\n        methodType: 'list'\n    }),\n    pdf: stripeMethod$g({\n        method: 'GET',\n        fullPath: '/v1/quotes/{quote}/pdf',\n        host: 'files.stripe.com',\n        streaming: true\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$f = StripeResource.method;\nconst Refunds = StripeResource.extend({\n    create: stripeMethod$f({\n        method: 'POST',\n        fullPath: '/v1/refunds'\n    }),\n    retrieve: stripeMethod$f({\n        method: 'GET',\n        fullPath: '/v1/refunds/{refund}'\n    }),\n    update: stripeMethod$f({\n        method: 'POST',\n        fullPath: '/v1/refunds/{refund}'\n    }),\n    list: stripeMethod$f({\n        method: 'GET',\n        fullPath: '/v1/refunds',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$f({\n        method: 'POST',\n        fullPath: '/v1/refunds/{refund}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$e = StripeResource.method;\nconst Reviews = StripeResource.extend({\n    retrieve: stripeMethod$e({\n        method: 'GET',\n        fullPath: '/v1/reviews/{review}'\n    }),\n    list: stripeMethod$e({\n        method: 'GET',\n        fullPath: '/v1/reviews',\n        methodType: 'list'\n    }),\n    approve: stripeMethod$e({\n        method: 'POST',\n        fullPath: '/v1/reviews/{review}/approve'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$d = StripeResource.method;\nconst SetupAttempts = StripeResource.extend({\n    list: stripeMethod$d({\n        method: 'GET',\n        fullPath: '/v1/setup_attempts',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$c = StripeResource.method;\nconst SetupIntents = StripeResource.extend({\n    create: stripeMethod$c({\n        method: 'POST',\n        fullPath: '/v1/setup_intents'\n    }),\n    retrieve: stripeMethod$c({\n        method: 'GET',\n        fullPath: '/v1/setup_intents/{intent}'\n    }),\n    update: stripeMethod$c({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}'\n    }),\n    list: stripeMethod$c({\n        method: 'GET',\n        fullPath: '/v1/setup_intents',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$c({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/cancel'\n    }),\n    confirm: stripeMethod$c({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/confirm'\n    }),\n    verifyMicrodeposits: stripeMethod$c({\n        method: 'POST',\n        fullPath: '/v1/setup_intents/{intent}/verify_microdeposits'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$b = StripeResource.method;\nconst ShippingRates = StripeResource.extend({\n    create: stripeMethod$b({\n        method: 'POST',\n        fullPath: '/v1/shipping_rates'\n    }),\n    retrieve: stripeMethod$b({\n        method: 'GET',\n        fullPath: '/v1/shipping_rates/{shipping_rate_token}'\n    }),\n    update: stripeMethod$b({\n        method: 'POST',\n        fullPath: '/v1/shipping_rates/{shipping_rate_token}'\n    }),\n    list: stripeMethod$b({\n        method: 'GET',\n        fullPath: '/v1/shipping_rates',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$a = StripeResource.method;\nconst Sources = StripeResource.extend({\n    create: stripeMethod$a({\n        method: 'POST',\n        fullPath: '/v1/sources'\n    }),\n    retrieve: stripeMethod$a({\n        method: 'GET',\n        fullPath: '/v1/sources/{source}'\n    }),\n    update: stripeMethod$a({\n        method: 'POST',\n        fullPath: '/v1/sources/{source}'\n    }),\n    listSourceTransactions: stripeMethod$a({\n        method: 'GET',\n        fullPath: '/v1/sources/{source}/source_transactions',\n        methodType: 'list'\n    }),\n    verify: stripeMethod$a({\n        method: 'POST',\n        fullPath: '/v1/sources/{source}/verify'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$9 = StripeResource.method;\nconst SubscriptionItems = StripeResource.extend({\n    create: stripeMethod$9({\n        method: 'POST',\n        fullPath: '/v1/subscription_items'\n    }),\n    retrieve: stripeMethod$9({\n        method: 'GET',\n        fullPath: '/v1/subscription_items/{item}'\n    }),\n    update: stripeMethod$9({\n        method: 'POST',\n        fullPath: '/v1/subscription_items/{item}'\n    }),\n    list: stripeMethod$9({\n        method: 'GET',\n        fullPath: '/v1/subscription_items',\n        methodType: 'list'\n    }),\n    del: stripeMethod$9({\n        method: 'DELETE',\n        fullPath: '/v1/subscription_items/{item}'\n    }),\n    createUsageRecord: stripeMethod$9({\n        method: 'POST',\n        fullPath: '/v1/subscription_items/{subscription_item}/usage_records'\n    }),\n    listUsageRecordSummaries: stripeMethod$9({\n        method: 'GET',\n        fullPath: '/v1/subscription_items/{subscription_item}/usage_record_summaries',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$8 = StripeResource.method;\nconst SubscriptionSchedules = StripeResource.extend({\n    create: stripeMethod$8({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules'\n    }),\n    retrieve: stripeMethod$8({\n        method: 'GET',\n        fullPath: '/v1/subscription_schedules/{schedule}'\n    }),\n    update: stripeMethod$8({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}'\n    }),\n    list: stripeMethod$8({\n        method: 'GET',\n        fullPath: '/v1/subscription_schedules',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$8({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}/cancel'\n    }),\n    release: stripeMethod$8({\n        method: 'POST',\n        fullPath: '/v1/subscription_schedules/{schedule}/release'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$7 = StripeResource.method;\nconst Subscriptions = StripeResource.extend({\n    create: stripeMethod$7({\n        method: 'POST',\n        fullPath: '/v1/subscriptions'\n    }),\n    retrieve: stripeMethod$7({\n        method: 'GET',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}'\n    }),\n    update: stripeMethod$7({\n        method: 'POST',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}'\n    }),\n    list: stripeMethod$7({\n        method: 'GET',\n        fullPath: '/v1/subscriptions',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$7({\n        method: 'DELETE',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}'\n    }),\n    deleteDiscount: stripeMethod$7({\n        method: 'DELETE',\n        fullPath: '/v1/subscriptions/{subscription_exposed_id}/discount'\n    }),\n    resume: stripeMethod$7({\n        method: 'POST',\n        fullPath: '/v1/subscriptions/{subscription}/resume'\n    }),\n    search: stripeMethod$7({\n        method: 'GET',\n        fullPath: '/v1/subscriptions/search',\n        methodType: 'search'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$6 = StripeResource.method;\nconst TaxCodes = StripeResource.extend({\n    retrieve: stripeMethod$6({\n        method: 'GET',\n        fullPath: '/v1/tax_codes/{id}'\n    }),\n    list: stripeMethod$6({\n        method: 'GET',\n        fullPath: '/v1/tax_codes',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$5 = StripeResource.method;\nconst TaxIds = StripeResource.extend({\n    create: stripeMethod$5({\n        method: 'POST',\n        fullPath: '/v1/tax_ids'\n    }),\n    retrieve: stripeMethod$5({\n        method: 'GET',\n        fullPath: '/v1/tax_ids/{id}'\n    }),\n    list: stripeMethod$5({\n        method: 'GET',\n        fullPath: '/v1/tax_ids',\n        methodType: 'list'\n    }),\n    del: stripeMethod$5({\n        method: 'DELETE',\n        fullPath: '/v1/tax_ids/{id}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$4 = StripeResource.method;\nconst TaxRates = StripeResource.extend({\n    create: stripeMethod$4({\n        method: 'POST',\n        fullPath: '/v1/tax_rates'\n    }),\n    retrieve: stripeMethod$4({\n        method: 'GET',\n        fullPath: '/v1/tax_rates/{tax_rate}'\n    }),\n    update: stripeMethod$4({\n        method: 'POST',\n        fullPath: '/v1/tax_rates/{tax_rate}'\n    }),\n    list: stripeMethod$4({\n        method: 'GET',\n        fullPath: '/v1/tax_rates',\n        methodType: 'list'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$3 = StripeResource.method;\nconst Tokens = StripeResource.extend({\n    create: stripeMethod$3({\n        method: 'POST',\n        fullPath: '/v1/tokens'\n    }),\n    retrieve: stripeMethod$3({\n        method: 'GET',\n        fullPath: '/v1/tokens/{token}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$2 = StripeResource.method;\nconst Topups = StripeResource.extend({\n    create: stripeMethod$2({\n        method: 'POST',\n        fullPath: '/v1/topups'\n    }),\n    retrieve: stripeMethod$2({\n        method: 'GET',\n        fullPath: '/v1/topups/{topup}'\n    }),\n    update: stripeMethod$2({\n        method: 'POST',\n        fullPath: '/v1/topups/{topup}'\n    }),\n    list: stripeMethod$2({\n        method: 'GET',\n        fullPath: '/v1/topups',\n        methodType: 'list'\n    }),\n    cancel: stripeMethod$2({\n        method: 'POST',\n        fullPath: '/v1/topups/{topup}/cancel'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod$1 = StripeResource.method;\nconst Transfers = StripeResource.extend({\n    create: stripeMethod$1({\n        method: 'POST',\n        fullPath: '/v1/transfers'\n    }),\n    retrieve: stripeMethod$1({\n        method: 'GET',\n        fullPath: '/v1/transfers/{transfer}'\n    }),\n    update: stripeMethod$1({\n        method: 'POST',\n        fullPath: '/v1/transfers/{transfer}'\n    }),\n    list: stripeMethod$1({\n        method: 'GET',\n        fullPath: '/v1/transfers',\n        methodType: 'list'\n    }),\n    createReversal: stripeMethod$1({\n        method: 'POST',\n        fullPath: '/v1/transfers/{id}/reversals'\n    }),\n    listReversals: stripeMethod$1({\n        method: 'GET',\n        fullPath: '/v1/transfers/{id}/reversals',\n        methodType: 'list'\n    }),\n    retrieveReversal: stripeMethod$1({\n        method: 'GET',\n        fullPath: '/v1/transfers/{transfer}/reversals/{id}'\n    }),\n    updateReversal: stripeMethod$1({\n        method: 'POST',\n        fullPath: '/v1/transfers/{transfer}/reversals/{id}'\n    })\n});\n// File generated from our OpenAPI spec\nconst stripeMethod = StripeResource.method;\nconst WebhookEndpoints = StripeResource.extend({\n    create: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/webhook_endpoints'\n    }),\n    retrieve: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}'\n    }),\n    update: stripeMethod({\n        method: 'POST',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}'\n    }),\n    list: stripeMethod({\n        method: 'GET',\n        fullPath: '/v1/webhook_endpoints',\n        methodType: 'list'\n    }),\n    del: stripeMethod({\n        method: 'DELETE',\n        fullPath: '/v1/webhook_endpoints/{webhook_endpoint}'\n    })\n});\n// File generated from our OpenAPI spec\nconst Apps = resourceNamespace('apps', {\n    Secrets: Secrets\n});\nconst Billing = resourceNamespace('billing', {\n    Alerts: Alerts,\n    CreditBalanceSummary: CreditBalanceSummary,\n    CreditBalanceTransactions: CreditBalanceTransactions,\n    CreditGrants: CreditGrants,\n    MeterEventAdjustments: MeterEventAdjustments$1,\n    MeterEvents: MeterEvents$1,\n    Meters: Meters\n});\nconst BillingPortal = resourceNamespace('billingPortal', {\n    Configurations: Configurations$1,\n    Sessions: Sessions$2\n});\nconst Checkout = resourceNamespace('checkout', {\n    Sessions: Sessions$1\n});\nconst Climate = resourceNamespace('climate', {\n    Orders: Orders,\n    Products: Products$1,\n    Suppliers: Suppliers\n});\nconst Entitlements = resourceNamespace('entitlements', {\n    ActiveEntitlements: ActiveEntitlements,\n    Features: Features\n});\nconst FinancialConnections = resourceNamespace('financialConnections', {\n    Accounts: Accounts$1,\n    Sessions: Sessions,\n    Transactions: Transactions$3\n});\nconst Forwarding = resourceNamespace('forwarding', {\n    Requests: Requests\n});\nconst Identity = resourceNamespace('identity', {\n    VerificationReports: VerificationReports,\n    VerificationSessions: VerificationSessions\n});\nconst Issuing = resourceNamespace('issuing', {\n    Authorizations: Authorizations,\n    Cardholders: Cardholders,\n    Cards: Cards,\n    Disputes: Disputes$1,\n    PersonalizationDesigns: PersonalizationDesigns,\n    PhysicalBundles: PhysicalBundles,\n    Tokens: Tokens$1,\n    Transactions: Transactions$2\n});\nconst Radar = resourceNamespace('radar', {\n    EarlyFraudWarnings: EarlyFraudWarnings,\n    ValueListItems: ValueListItems,\n    ValueLists: ValueLists\n});\nconst Reporting = resourceNamespace('reporting', {\n    ReportRuns: ReportRuns,\n    ReportTypes: ReportTypes\n});\nconst Sigma = resourceNamespace('sigma', {\n    ScheduledQueryRuns: ScheduledQueryRuns\n});\nconst Tax = resourceNamespace('tax', {\n    Calculations: Calculations,\n    Registrations: Registrations,\n    Settings: Settings,\n    Transactions: Transactions$1\n});\nconst Terminal = resourceNamespace('terminal', {\n    Configurations: Configurations,\n    ConnectionTokens: ConnectionTokens,\n    Locations: Locations,\n    Readers: Readers\n});\nconst TestHelpers = resourceNamespace('testHelpers', {\n    ConfirmationTokens: ConfirmationTokens$1,\n    Customers: Customers$1,\n    Refunds: Refunds$1,\n    TestClocks: TestClocks,\n    Issuing: resourceNamespace('issuing', {\n        Authorizations: Authorizations$1,\n        Cards: Cards$1,\n        PersonalizationDesigns: PersonalizationDesigns$1,\n        Transactions: Transactions$4\n    }),\n    Terminal: resourceNamespace('terminal', {\n        Readers: Readers$1\n    }),\n    Treasury: resourceNamespace('treasury', {\n        InboundTransfers: InboundTransfers$1,\n        OutboundPayments: OutboundPayments$1,\n        OutboundTransfers: OutboundTransfers$1,\n        ReceivedCredits: ReceivedCredits$1,\n        ReceivedDebits: ReceivedDebits$1\n    })\n});\nconst Treasury = resourceNamespace('treasury', {\n    CreditReversals: CreditReversals,\n    DebitReversals: DebitReversals,\n    FinancialAccounts: FinancialAccounts,\n    InboundTransfers: InboundTransfers,\n    OutboundPayments: OutboundPayments,\n    OutboundTransfers: OutboundTransfers,\n    ReceivedCredits: ReceivedCredits,\n    ReceivedDebits: ReceivedDebits,\n    TransactionEntries: TransactionEntries,\n    Transactions: Transactions\n});\nconst V2 = resourceNamespace('v2', {\n    Billing: resourceNamespace('billing', {\n        MeterEventAdjustments: MeterEventAdjustments,\n        MeterEventSession: MeterEventSession,\n        MeterEventStream: MeterEventStream,\n        MeterEvents: MeterEvents\n    }),\n    Core: resourceNamespace('core', {\n        EventDestinations: EventDestinations,\n        Events: Events$1\n    })\n});\nvar resources = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    Account: Accounts,\n    AccountLinks: AccountLinks,\n    AccountSessions: AccountSessions,\n    Accounts: Accounts,\n    ApplePayDomains: ApplePayDomains,\n    ApplicationFees: ApplicationFees,\n    Apps: Apps,\n    Balance: Balance,\n    BalanceTransactions: BalanceTransactions,\n    Billing: Billing,\n    BillingPortal: BillingPortal,\n    Charges: Charges,\n    Checkout: Checkout,\n    Climate: Climate,\n    ConfirmationTokens: ConfirmationTokens,\n    CountrySpecs: CountrySpecs,\n    Coupons: Coupons,\n    CreditNotes: CreditNotes,\n    CustomerSessions: CustomerSessions,\n    Customers: Customers,\n    Disputes: Disputes,\n    Entitlements: Entitlements,\n    EphemeralKeys: EphemeralKeys,\n    Events: Events,\n    ExchangeRates: ExchangeRates,\n    FileLinks: FileLinks,\n    Files: Files,\n    FinancialConnections: FinancialConnections,\n    Forwarding: Forwarding,\n    Identity: Identity,\n    InvoiceItems: InvoiceItems,\n    InvoiceRenderingTemplates: InvoiceRenderingTemplates,\n    Invoices: Invoices,\n    Issuing: Issuing,\n    Mandates: Mandates,\n    OAuth: OAuth,\n    PaymentIntents: PaymentIntents,\n    PaymentLinks: PaymentLinks,\n    PaymentMethodConfigurations: PaymentMethodConfigurations,\n    PaymentMethodDomains: PaymentMethodDomains,\n    PaymentMethods: PaymentMethods,\n    Payouts: Payouts,\n    Plans: Plans,\n    Prices: Prices,\n    Products: Products,\n    PromotionCodes: PromotionCodes,\n    Quotes: Quotes,\n    Radar: Radar,\n    Refunds: Refunds,\n    Reporting: Reporting,\n    Reviews: Reviews,\n    SetupAttempts: SetupAttempts,\n    SetupIntents: SetupIntents,\n    ShippingRates: ShippingRates,\n    Sigma: Sigma,\n    Sources: Sources,\n    SubscriptionItems: SubscriptionItems,\n    SubscriptionSchedules: SubscriptionSchedules,\n    Subscriptions: Subscriptions,\n    Tax: Tax,\n    TaxCodes: TaxCodes,\n    TaxIds: TaxIds,\n    TaxRates: TaxRates,\n    Terminal: Terminal,\n    TestHelpers: TestHelpers,\n    Tokens: Tokens,\n    Topups: Topups,\n    Transfers: Transfers,\n    Treasury: Treasury,\n    V2: V2,\n    WebhookEndpoints: WebhookEndpoints\n});\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = ApiVersion;\nconst DEFAULT_TIMEOUT = 80000;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 5;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = [\n    'name',\n    'version',\n    'url',\n    'partner_id'\n];\nconst ALLOWED_CONFIG_PROPERTIES = [\n    'authenticator',\n    'apiVersion',\n    'typescript',\n    'maxNetworkRetries',\n    'httpAgent',\n    'httpClient',\n    'timeout',\n    'host',\n    'port',\n    'protocol',\n    'telemetry',\n    'appInfo',\n    'stripeAccount',\n    'stripeContext'\n];\nconst defaultRequestSenderFactory = (stripe)=>new RequestSender(stripe, StripeResource.MAX_BUFFERED_REQUEST_METRICS);\nfunction createStripe(platformFunctions, requestSender = defaultRequestSenderFactory) {\n    Stripe.PACKAGE_VERSION = '17.7.0';\n    Stripe.USER_AGENT = Object.assign({\n        bindings_version: Stripe.PACKAGE_VERSION,\n        lang: 'node',\n        publisher: 'stripe',\n        uname: null,\n        typescript: false\n    }, determineProcessUserAgentProperties());\n    Stripe.StripeResource = StripeResource;\n    Stripe.resources = resources;\n    Stripe.HttpClient = HttpClient;\n    Stripe.HttpClientResponse = HttpClientResponse;\n    Stripe.CryptoProvider = CryptoProvider;\n    // Previously Stripe.webhooks was just the createWebhooks() factory function\n    // however going forward it will be a WebhookObject instance. To maintain\n    // backwards compatibility it is currently a factory function that also\n    // complies to the WebhookObject signature. The factory function signature\n    // will be removed as a breaking change in the next major release.\n    // See https://github.com/stripe/stripe-node/issues/1956\n    function createWebhooksDefault(fns = platformFunctions) {\n        return createWebhooks(fns);\n    }\n    Stripe.webhooks = Object.assign(createWebhooksDefault, createWebhooks(platformFunctions));\n    function Stripe(key, config = {}) {\n        if (!(this instanceof Stripe)) {\n            return new Stripe(key, config);\n        }\n        const props = this._getPropsFromConfig(config);\n        this._platformFunctions = platformFunctions;\n        Object.defineProperty(this, '_emitter', {\n            value: this._platformFunctions.createEmitter(),\n            enumerable: false,\n            configurable: false,\n            writable: false\n        });\n        this.VERSION = Stripe.PACKAGE_VERSION;\n        this.on = this._emitter.on.bind(this._emitter);\n        this.once = this._emitter.once.bind(this._emitter);\n        this.off = this._emitter.removeListener.bind(this._emitter);\n        const agent = props.httpAgent || null;\n        this._api = {\n            host: props.host || DEFAULT_HOST,\n            port: props.port || DEFAULT_PORT,\n            protocol: props.protocol || 'https',\n            basePath: DEFAULT_BASE_PATH,\n            version: props.apiVersion || DEFAULT_API_VERSION,\n            timeout: validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n            maxNetworkRetries: validateInteger('maxNetworkRetries', props.maxNetworkRetries, 2),\n            agent: agent,\n            httpClient: props.httpClient || (agent ? this._platformFunctions.createNodeHttpClient(agent) : this._platformFunctions.createDefaultHttpClient()),\n            dev: false,\n            stripeAccount: props.stripeAccount || null,\n            stripeContext: props.stripeContext || null\n        };\n        const typescript = props.typescript || false;\n        if (typescript !== Stripe.USER_AGENT.typescript) {\n            // The mutation here is uncomfortable, but likely fastest;\n            // serializing the user agent involves shelling out to the system,\n            // and given some users may instantiate the library many times without switching between TS and non-TS,\n            // we only want to incur the performance hit when that actually happens.\n            Stripe.USER_AGENT.typescript = typescript;\n        }\n        if (props.appInfo) {\n            this._setAppInfo(props.appInfo);\n        }\n        this._prepResources();\n        this._setAuthenticator(key, props.authenticator);\n        this.errors = _Error;\n        // Once Stripe.webhooks looses the factory function signature in a future release\n        // then this should become this.webhooks = Stripe.webhooks\n        this.webhooks = createWebhooksDefault();\n        this._prevRequestMetrics = [];\n        this._enableTelemetry = props.telemetry !== false;\n        this._requestSender = requestSender(this);\n        // Expose StripeResource on the instance too\n        // @ts-ignore\n        this.StripeResource = Stripe.StripeResource;\n    }\n    Stripe.errors = _Error;\n    Stripe.createNodeHttpClient = platformFunctions.createNodeHttpClient;\n    /**\n     * Creates an HTTP client for issuing Stripe API requests which uses the Web\n     * Fetch API.\n     *\n     * A fetch function can optionally be passed in as a parameter. If none is\n     * passed, will default to the default `fetch` function in the global scope.\n     */ Stripe.createFetchHttpClient = platformFunctions.createFetchHttpClient;\n    /**\n     * Create a CryptoProvider which uses the built-in Node crypto libraries for\n     * its crypto operations.\n     */ Stripe.createNodeCryptoProvider = platformFunctions.createNodeCryptoProvider;\n    /**\n     * Creates a CryptoProvider which uses the Subtle Crypto API from the Web\n     * Crypto API spec for its crypto operations.\n     *\n     * A SubtleCrypto interface can optionally be passed in as a parameter. If none\n     * is passed, will default to the default `crypto.subtle` object in the global\n     * scope.\n     */ Stripe.createSubtleCryptoProvider = platformFunctions.createSubtleCryptoProvider;\n    Stripe.prototype = {\n        // Properties are set in the constructor above\n        _appInfo: undefined,\n        on: null,\n        off: null,\n        once: null,\n        VERSION: null,\n        StripeResource: null,\n        webhooks: null,\n        errors: null,\n        _api: null,\n        _prevRequestMetrics: null,\n        _emitter: null,\n        _enableTelemetry: null,\n        _requestSender: null,\n        _platformFunctions: null,\n        rawRequest (method, path, params, options) {\n            return this._requestSender._rawRequest(method, path, params, options);\n        },\n        /**\n         * @private\n         */ _setAuthenticator (key, authenticator) {\n            if (key && authenticator) {\n                throw new Error(\"Can't specify both apiKey and authenticator\");\n            }\n            if (!key && !authenticator) {\n                throw new Error('Neither apiKey nor config.authenticator provided');\n            }\n            this._authenticator = key ? createApiKeyAuthenticator(key) : authenticator;\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */ _setAppInfo (info) {\n            if (info && typeof info !== 'object') {\n                throw new Error('AppInfo must be an object.');\n            }\n            if (info && !info.name) {\n                throw new Error('AppInfo.name is required');\n            }\n            info = info || {};\n            this._appInfo = APP_INFO_PROPERTIES.reduce((accum, prop)=>{\n                if (typeof info[prop] == 'string') {\n                    accum = accum || {};\n                    accum[prop] = info[prop];\n                }\n                return accum;\n            }, undefined);\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */ _setApiField (key, value) {\n            this._api[key] = value;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */ getApiField (key) {\n            return this._api[key];\n        },\n        setClientId (clientId) {\n            this._clientId = clientId;\n        },\n        getClientId () {\n            return this._clientId;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */ getConstant: (c)=>{\n            switch(c){\n                case 'DEFAULT_HOST':\n                    return DEFAULT_HOST;\n                case 'DEFAULT_PORT':\n                    return DEFAULT_PORT;\n                case 'DEFAULT_BASE_PATH':\n                    return DEFAULT_BASE_PATH;\n                case 'DEFAULT_API_VERSION':\n                    return DEFAULT_API_VERSION;\n                case 'DEFAULT_TIMEOUT':\n                    return DEFAULT_TIMEOUT;\n                case 'MAX_NETWORK_RETRY_DELAY_SEC':\n                    return MAX_NETWORK_RETRY_DELAY_SEC;\n                case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n                    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n            }\n            return Stripe[c];\n        },\n        getMaxNetworkRetries () {\n            return this.getApiField('maxNetworkRetries');\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */ _setApiNumberField (prop, n, defaultVal) {\n            const val = validateInteger(prop, n, defaultVal);\n            this._setApiField(prop, val);\n        },\n        getMaxNetworkRetryDelay () {\n            return MAX_NETWORK_RETRY_DELAY_SEC;\n        },\n        getInitialNetworkRetryDelay () {\n            return INITIAL_NETWORK_RETRY_DELAY_SEC;\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent and uses a cached version for a slight\n         * speed advantage.\n         */ getClientUserAgent (cb) {\n            return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         *\n         * Gets a JSON version of a User-Agent by encoding a seeded object and\n         * fetching a uname from the system.\n         */ getClientUserAgentSeeded (seed, cb) {\n            this._platformFunctions.getUname().then((uname)=>{\n                var _a;\n                const userAgent = {};\n                for(const field in seed){\n                    if (!Object.prototype.hasOwnProperty.call(seed, field)) {\n                        continue;\n                    }\n                    userAgent[field] = encodeURIComponent((_a = seed[field]) !== null && _a !== void 0 ? _a : 'null');\n                }\n                // URI-encode in case there are unusual characters in the system's uname.\n                userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n                const client = this.getApiField('httpClient');\n                if (client) {\n                    userAgent.httplib = encodeURIComponent(client.getClientName());\n                }\n                if (this._appInfo) {\n                    userAgent.application = this._appInfo;\n                }\n                cb(JSON.stringify(userAgent));\n            });\n        },\n        /**\n         * @private\n         * Please open or upvote an issue at github.com/stripe/stripe-node\n         * if you use this, detailing your use-case.\n         *\n         * It may be deprecated and removed in the future.\n         */ getAppInfoAsString () {\n            if (!this._appInfo) {\n                return '';\n            }\n            let formatted = this._appInfo.name;\n            if (this._appInfo.version) {\n                formatted += `/${this._appInfo.version}`;\n            }\n            if (this._appInfo.url) {\n                formatted += ` (${this._appInfo.url})`;\n            }\n            return formatted;\n        },\n        getTelemetryEnabled () {\n            return this._enableTelemetry;\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */ _prepResources () {\n            for(const name in resources){\n                if (!Object.prototype.hasOwnProperty.call(resources, name)) {\n                    continue;\n                }\n                // @ts-ignore\n                this[pascalToCamelCase(name)] = new resources[name](this);\n            }\n        },\n        /**\n         * @private\n         * This may be removed in the future.\n         */ _getPropsFromConfig (config) {\n            // If config is null or undefined, just bail early with no props\n            if (!config) {\n                return {};\n            }\n            // config can be an object or a string\n            const isString = typeof config === 'string';\n            const isObject = config === Object(config) && !Array.isArray(config);\n            if (!isObject && !isString) {\n                throw new Error('Config must either be an object or a string');\n            }\n            // If config is a string, we assume the old behavior of passing in a string representation of the api version\n            if (isString) {\n                return {\n                    apiVersion: config\n                };\n            }\n            // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n            const values = Object.keys(config).filter((value)=>!ALLOWED_CONFIG_PROPERTIES.includes(value));\n            if (values.length > 0) {\n                throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n            }\n            return config;\n        },\n        parseThinEvent (payload, header, secret, tolerance, cryptoProvider, receivedAt) {\n            // parses and validates the event payload all in one go\n            return this.webhooks.constructEvent(payload, header, secret, tolerance, cryptoProvider, receivedAt);\n        }\n    };\n    return Stripe;\n}\ncreateStripe(new WebPlatformFunctions());\nvar V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n    var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n    for(var i = 0; i < scripts.length; i++){\n        var script = scripts[i];\n        if (!V3_URL_REGEX.test(script.src)) {\n            continue;\n        }\n        return script;\n    }\n    return null;\n};\nvar injectScript = function injectScript(params) {\n    var queryString = '';\n    var script = document.createElement('script');\n    script.src = \"\".concat(V3_URL).concat(queryString);\n    var headOrBody = document.head || document.body;\n    if (!headOrBody) {\n        throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n    }\n    headOrBody.appendChild(script);\n    return script;\n};\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n    if (!stripe || !stripe._registerWrapper) {\n        return;\n    }\n    stripe._registerWrapper({\n        name: 'stripe-js',\n        version: \"4.6.0\",\n        startTime: startTime\n    });\n};\nvar stripePromise$1 = null;\nvar onErrorListener = null;\nvar onLoadListener = null;\nvar onError = function onError(reject) {\n    return function() {\n        reject(new Error('Failed to load Stripe.js'));\n    };\n};\nvar onLoad = function onLoad(resolve, reject) {\n    return function() {\n        if (window.Stripe) {\n            resolve(window.Stripe);\n        } else {\n            reject(new Error('Stripe.js not available'));\n        }\n    };\n};\nvar loadScript = function loadScript(params) {\n    // Ensure that we only attempt to load Stripe.js at most once\n    if (stripePromise$1 !== null) {\n        return stripePromise$1;\n    }\n    stripePromise$1 = new Promise(function(resolve, reject) {\n        if (true) {\n            // Resolve to null when imported server side. This makes the module\n            // safe to import in an isomorphic code base.\n            resolve(null);\n            return;\n        }\n        if (window.Stripe) {\n            resolve(window.Stripe);\n            return;\n        }\n        try {\n            var script = findScript();\n            if (script && params) ;\n            else if (!script) {\n                script = injectScript(params);\n            } else if (script && onLoadListener !== null && onErrorListener !== null) {\n                var _script$parentNode;\n                // remove event listeners\n                script.removeEventListener('load', onLoadListener);\n                script.removeEventListener('error', onErrorListener); // if script exists, but we are reloading due to an error,\n                // reload script to trigger 'load' event\n                (_script$parentNode = script.parentNode) === null || _script$parentNode === void 0 ? void 0 : _script$parentNode.removeChild(script);\n                script = injectScript(params);\n            }\n            onLoadListener = onLoad(resolve, reject);\n            onErrorListener = onError(reject);\n            script.addEventListener('load', onLoadListener);\n            script.addEventListener('error', onErrorListener);\n        } catch (error) {\n            reject(error);\n            return;\n        }\n    }); // Resets stripePromise on error\n    return stripePromise$1[\"catch\"](function(error) {\n        stripePromise$1 = null;\n        return Promise.reject(error);\n    });\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n    if (maybeStripe === null) {\n        return null;\n    }\n    var stripe = maybeStripe.apply(undefined, args);\n    registerWrapper(stripe, startTime);\n    return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nvar stripePromise$1$1;\nvar loadCalled = false;\nvar getStripePromise = function getStripePromise() {\n    if (stripePromise$1$1) {\n        return stripePromise$1$1;\n    }\n    stripePromise$1$1 = loadScript(null)[\"catch\"](function(error) {\n        // clear cache on error\n        stripePromise$1$1 = null;\n        return Promise.reject(error);\n    });\n    return stripePromise$1$1;\n}; // Execute our own script injection after a tick to give users time to do their\n// own script injection.\nPromise.resolve().then(function() {\n    return getStripePromise();\n})[\"catch\"](function(error) {\n    if (!loadCalled) {\n        console.warn(error);\n    }\n});\nvar loadStripe = function loadStripe() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    loadCalled = true;\n    var startTime = Date.now(); // if previous attempts are unsuccessful, will re-load script\n    return getStripePromise().then(function(maybeStripe) {\n        return initStripe(maybeStripe, args, startTime);\n    });\n};\n// Subscription tier types\nvar SubscriptionTier = /*#__PURE__*/ function(SubscriptionTier) {\n    SubscriptionTier[\"FREE\"] = \"free\";\n    SubscriptionTier[\"PREMIUM\"] = \"premium\";\n    SubscriptionTier[\"PRO\"] = \"pro\";\n    SubscriptionTier[\"BUSINESS\"] = \"business\"; // $49.99/month\n    return SubscriptionTier;\n}({});\n// Billing cycle types\nvar BillingCycle = /*#__PURE__*/ function(BillingCycle) {\n    BillingCycle[\"MONTHLY\"] = \"monthly\";\n    BillingCycle[\"YEARLY\"] = \"yearly\";\n    return BillingCycle;\n}({});\n// Feature flags by tier\nconst FEATURES = {\n    [\"free\"]: [\n        'basic_calculator',\n        'single_trip_list',\n        'screenshot_export'\n    ],\n    [\"premium\"]: [\n        'basic_calculator',\n        'single_trip_list',\n        'screenshot_export',\n        'smart_alerts',\n        'unlimited_lists',\n        'pdf_export',\n        'dark_mode',\n        'no_ads',\n        'email_reports'\n    ],\n    [\"pro\"]: [\n        'basic_calculator',\n        'single_trip_list',\n        'screenshot_export',\n        'smart_alerts',\n        'unlimited_lists',\n        'pdf_export',\n        'dark_mode',\n        'no_ads',\n        'email_reports',\n        'trip_optimizer_pro',\n        'document_vault',\n        'multi_person_tracking',\n        'api_access_basic',\n        'priority_support'\n    ],\n    [\"business\"]: [\n        'basic_calculator',\n        'single_trip_list',\n        'screenshot_export',\n        'smart_alerts',\n        'unlimited_lists',\n        'pdf_export',\n        'dark_mode',\n        'no_ads',\n        'email_reports',\n        'trip_optimizer_pro',\n        'document_vault',\n        'multi_person_tracking',\n        'api_access_basic',\n        'priority_support',\n        'team_management',\n        'white_label',\n        'api_access_full',\n        'dedicated_support',\n        'custom_integrations'\n    ]\n};\n// Free tier artificial limitations (Day 1 monetization)\nconst FREE_TIER_LIMITS = {\n    calculationDelay: 2000,\n    exportFormats: [\n        'screenshot'\n    ],\n    tripLists: 1,\n    adsEnabled: true,\n    priorityCalculation: false,\n    maxTripsPerList: 10,\n    supportLevel: 'community',\n    apiRequestsPerMonth: 0 // No API access\n};\n// Pricing configuration\nconst TIER_PRICING$1 = {\n    [\"free\"]: {\n        monthly: 0,\n        yearly: 0,\n        name: 'Free',\n        description: 'Basic Schengen calculator'\n    },\n    [\"premium\"]: {\n        monthly: 999,\n        yearly: 9999,\n        name: 'Premium',\n        description: 'Smart alerts, unlimited lists, PDF export'\n    },\n    [\"pro\"]: {\n        monthly: 1999,\n        yearly: 19999,\n        name: 'Pro',\n        description: 'Trip optimizer, document vault, multi-person tracking'\n    },\n    [\"business\"]: {\n        monthly: 4999,\n        yearly: 49999,\n        name: 'Business',\n        description: 'Team management, white label, full API access'\n    }\n};\n// Client-side Stripe instance (already lazy)\nlet stripePromise = null;\nconst getStripe = ()=>{\n    if (!stripePromise) {\n        const publishableKey = \"pk_test_placeholder\";\n        if (!publishableKey) {\n            console.warn('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY not set, Stripe features will be disabled');\n            return Promise.resolve(null);\n        }\n        stripePromise = loadStripe(publishableKey);\n    }\n    return stripePromise;\n};\n// Stripe price IDs from environment variables (safe access)\n({\n    premium_monthly: process.env.STRIPE_PRICE_PREMIUM_MONTHLY || '',\n    premium_yearly: process.env.STRIPE_PRICE_PREMIUM_YEARLY || '',\n    pro_monthly: process.env.STRIPE_PRICE_PRO_MONTHLY || '',\n    pro_yearly: process.env.STRIPE_PRICE_PRO_YEARLY || '',\n    business_monthly: process.env.STRIPE_PRICE_BUSINESS_MONTHLY || '',\n    business_yearly: process.env.STRIPE_PRICE_BUSINESS_YEARLY || ''\n});\n// Webhook configuration\n({\n    secret: process.env.STRIPE_WEBHOOK_SECRET\n});\n// Format price for display\nfunction formatPrice(amountInCents, currency = 'USD') {\n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency\n    }).format(amountInCents / 100);\n}\n// Calculate savings for yearly billing\nfunction calculateYearlySavings(monthlyPrice, yearlyPrice) {\n    const monthlyTotal = monthlyPrice * 12;\n    const savingsAmount = monthlyTotal - yearlyPrice;\n    const savingsPercentage = Math.round(savingsAmount / monthlyTotal * 100);\n    const monthlyEquivalent = Math.round(yearlyPrice / 12);\n    return {\n        savingsAmount,\n        savingsPercentage,\n        monthlyEquivalent\n    };\n}\n/**\n * Feature access control system\n * Determines what features a user can access based on their subscription tier\n */ class FeatureGateSystem {\n    /**\n   * Check if user has access to a specific feature\n   */ hasFeature(feature) {\n        return FEATURES[this.tier].includes(feature);\n    }\n    /**\n   * Check if feature requires an upgrade from current tier\n   */ requiresUpgrade(feature) {\n        return !this.hasFeature(feature);\n    }\n    /**\n   * Get upgrade URL for a specific feature\n   */ getUpgradeUrl(feature) {\n        const recommendedTier = this.getRecommendedTierForFeature(feature);\n        return `/upgrade?tier=${recommendedTier}&feature=${feature}`;\n    }\n    /**\n   * Get remaining usage for a feature (if applicable)\n   */ getRemainingUsage(feature) {\n        if (this.tier !== SubscriptionTier.FREE || !this.usage) {\n            return null; // Paid tiers have unlimited usage\n        }\n        switch(feature){\n            case 'calculations':\n                return Math.max(0, 100 - this.usage.calculations); // 100 calculations per month for free\n            case 'api_requests':\n                return 0; // No API access for free tier\n            case 'exports':\n                return Math.max(0, 5 - this.usage.exportCount); // 5 exports per month for free\n            case 'storage':\n                return Math.max(0, 10 * 1024 * 1024 - this.usage.storageUsed); // 10MB storage for free\n            default:\n                return null;\n        }\n    }\n    /**\n   * Get comprehensive feature gate result\n   */ checkFeature(feature) {\n        const hasAccess = this.hasFeature(feature);\n        if (hasAccess) {\n            return {\n                allowed: true,\n                usageRemaining: this.getRemainingUsage(feature)\n            };\n        }\n        return {\n            allowed: false,\n            reason: this.getFeatureDenialReason(feature),\n            upgradeRequired: true,\n            recommendedTier: this.getRecommendedTierForFeature(feature)\n        };\n    }\n    /**\n   * Apply free tier limitations\n   */ applyFreeTierLimitations() {\n        if (this.tier !== SubscriptionTier.FREE) {\n            return null;\n        }\n        return {\n            calculationDelay: FREE_TIER_LIMITS.calculationDelay,\n            exportFormats: FREE_TIER_LIMITS.exportFormats,\n            tripLists: FREE_TIER_LIMITS.tripLists,\n            adsEnabled: FREE_TIER_LIMITS.adsEnabled,\n            priorityCalculation: FREE_TIER_LIMITS.priorityCalculation,\n            maxTripsPerList: FREE_TIER_LIMITS.maxTripsPerList,\n            supportLevel: FREE_TIER_LIMITS.supportLevel,\n            apiRequestsPerMonth: FREE_TIER_LIMITS.apiRequestsPerMonth\n        };\n    }\n    /**\n   * Check if user has hit usage limits\n   */ hasHitUsageLimit(feature) {\n        const remaining = this.getRemainingUsage(feature);\n        return remaining !== null && remaining <= 0;\n    }\n    /**\n   * Get recommended tier for a specific feature\n   */ getRecommendedTierForFeature(feature) {\n        // Find the lowest tier that includes this feature\n        const tiers = [\n            SubscriptionTier.PREMIUM,\n            SubscriptionTier.PRO,\n            SubscriptionTier.BUSINESS\n        ];\n        for (const tier of tiers){\n            if (FEATURES[tier].includes(feature)) {\n                return tier;\n            }\n        }\n        return SubscriptionTier.PREMIUM; // Default fallback\n    }\n    /**\n   * Get user-friendly reason for feature denial\n   */ getFeatureDenialReason(feature) {\n        const reasons = {\n            'smart_alerts': 'Smart alerts are available with Premium subscription',\n            'unlimited_lists': 'Unlimited trip lists require Premium subscription',\n            'pdf_export': 'PDF export is available with Premium subscription',\n            'dark_mode': 'Dark mode is available with Premium subscription',\n            'no_ads': 'Ad-free experience requires Premium subscription',\n            'email_reports': 'Email reports are available with Premium subscription',\n            'trip_optimizer_pro': 'Trip Optimizer Pro requires Pro subscription',\n            'document_vault': 'Document vault is available with Pro subscription',\n            'multi_person_tracking': 'Multi-person tracking requires Pro subscription',\n            'api_access_basic': 'API access requires Pro subscription',\n            'priority_support': 'Priority support is available with Pro subscription',\n            'team_management': 'Team management requires Business subscription',\n            'white_label': 'White label features require Business subscription',\n            'api_access_full': 'Full API access requires Business subscription',\n            'dedicated_support': 'Dedicated support requires Business subscription',\n            'custom_integrations': 'Custom integrations require Business subscription'\n        };\n        return reasons[feature] || 'This feature requires a paid subscription';\n    }\n    constructor(tier, usage){\n        this.tier = tier;\n        this.usage = usage;\n    }\n}\n/**\n * Create feature gate system for a user\n */ function createFeatureGates(tier, usage) {\n    return new FeatureGateSystem(tier, usage);\n}\n/**\n * Check if a specific action is allowed\n */ function checkFeatureAccess(tier, feature, usage) {\n    const gates = createFeatureGates(tier, usage);\n    return gates.checkFeature(feature);\n}\n/**\n * Get tier comparison data\n */ function getTierComparison() {\n    return {\n        [SubscriptionTier.FREE]: {\n            name: 'Free',\n            price: '$0',\n            features: FEATURES[SubscriptionTier.FREE],\n            limitations: FREE_TIER_LIMITS\n        },\n        [SubscriptionTier.PREMIUM]: {\n            name: 'Premium',\n            price: '$9.99/month',\n            features: FEATURES[SubscriptionTier.PREMIUM],\n            limitations: null\n        },\n        [SubscriptionTier.PRO]: {\n            name: 'Pro',\n            price: '$19.99/month',\n            features: FEATURES[SubscriptionTier.PRO],\n            limitations: null\n        },\n        [SubscriptionTier.BUSINESS]: {\n            name: 'Business',\n            price: '$49.99/month',\n            features: FEATURES[SubscriptionTier.BUSINESS],\n            limitations: null\n        }\n    };\n}\nconst TIER_ICONS = {\n    [SubscriptionTier.FREE]: null,\n    [SubscriptionTier.PREMIUM]: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Crown, {\n        className: \"w-5 h-5\"\n    }),\n    [SubscriptionTier.PRO]: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Zap, {\n        className: \"w-5 h-5\"\n    }),\n    [SubscriptionTier.BUSINESS]: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Building2, {\n        className: \"w-5 h-5\"\n    })\n};\nconst TIER_COLORS = {\n    [SubscriptionTier.FREE]: 'bg-gray-50 border-gray-200 text-gray-700',\n    [SubscriptionTier.PREMIUM]: 'bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-200 text-yellow-800',\n    [SubscriptionTier.PRO]: 'bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200 text-blue-800',\n    [SubscriptionTier.BUSINESS]: 'bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 text-purple-800'\n};\nconst FEATURE_DESCRIPTIONS = {\n    'smart_alerts': 'Get notified when you\\'re approaching your 90-day limit',\n    'unlimited_lists': 'Create unlimited trip lists for better organization',\n    'pdf_export': 'Export your trip calculations as professional PDF reports',\n    'dark_mode': 'Easy-on-the-eyes dark theme for night planning',\n    'no_ads': 'Ad-free experience for focused trip planning',\n    'email_reports': 'Automated email reports with trip summaries',\n    'trip_optimizer_pro': 'AI-powered trip optimization for maximum days',\n    'document_vault': 'Secure storage for travel documents and receipts',\n    'multi_person_tracking': 'Track Schengen compliance for multiple travelers',\n    'api_access_basic': 'Basic API access for custom integrations',\n    'priority_support': 'Priority customer support via email',\n    'team_management': 'Manage team access and permissions',\n    'white_label': 'White-label the calculator for your business',\n    'api_access_full': 'Full API access with higher rate limits',\n    'dedicated_support': 'Dedicated account manager and phone support',\n    'custom_integrations': 'Custom API integrations and partnerships'\n};\nfunction SubscriptionGate({ feature, currentTier, userUsage = {}, mode = 'modal', showComparison = true, showTrialOffer = false, onUpgrade, onClose, customMessage, customTitle, className }) {\n    const [selectedTier, setSelectedTier] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [showDetails, setShowDetails] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Check feature access\n    const accessResult = checkFeatureAccess(currentTier, feature, userUsage);\n    // If user already has access, don't show the gate\n    if (accessResult.allowed) {\n        return null;\n    }\n    const tierComparison = getTierComparison();\n    const recommendedTier = accessResult.recommendedTier || SubscriptionTier.PREMIUM;\n    const featureDescription = FEATURE_DESCRIPTIONS[feature] || 'Upgrade to unlock this premium feature';\n    // Pricing information\n    const tierPricing = {\n        [SubscriptionTier.PREMIUM]: {\n            monthly: 999,\n            yearly: 9999\n        },\n        [SubscriptionTier.PRO]: {\n            monthly: 1999,\n            yearly: 19999\n        },\n        [SubscriptionTier.BUSINESS]: {\n            monthly: 4999,\n            yearly: 49999\n        }\n    };\n    const handleUpgrade = (tier)=>{\n        onUpgrade?.(tier);\n    };\n    const renderTierCard = (tier, isRecommended = false)=>{\n        if (tier === SubscriptionTier.FREE) return null;\n        const pricing = tierPricing[tier];\n        const monthlyPrice = formatPrice(pricing.monthly);\n        const yearlyPrice = formatPrice(pricing.yearly);\n        const tierInfo = tierComparison[tier];\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, {\n            key: tier,\n            className: cn(\"relative cursor-pointer transition-all duration-200 hover:shadow-lg\", TIER_COLORS[tier], selectedTier === tier && \"ring-2 ring-primary ring-offset-2\", isRecommended && \"border-2 border-primary shadow-lg scale-105\"),\n            onClick: ()=>setSelectedTier(tier)\n        }, isRecommended && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"absolute -top-3 left-1/2 transform -translate-x-1/2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Badge, {\n            className: \"bg-primary text-primary-foreground px-3 py-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Star, {\n            className: \"w-3 h-3 mr-1\"\n        }), \"Recommended\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, {\n            className: \"pb-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n            className: \"flex items-center gap-2\"\n        }, TIER_ICONS[tier], /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, tierInfo.name)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-2xl font-bold\"\n        }, monthlyPrice, \"/month\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-sm opacity-70\"\n        }, \"or \", yearlyPrice, \"/year (save 17%)\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-2\"\n        }, tierInfo.features.slice(0, 4).map((featureName)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: featureName,\n                className: \"flex items-center gap-2 text-sm\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Check, {\n                className: \"w-4 h-4 text-green-600\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, FEATURE_DESCRIPTIONS[featureName] || featureName.replace('_', ' ')))), tierInfo.features.length > 4 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-sm opacity-70\"\n        }, \"+\", tierInfo.features.length - 4, \" more features\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            onClick: (e)=>{\n                e.stopPropagation();\n                handleUpgrade(tier);\n            },\n            className: cn(\"w-full\", isRecommended ? \"bg-primary hover:bg-primary/90\" : \"bg-secondary hover:bg-secondary/90\"),\n            size: \"sm\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ArrowRight, {\n            className: \"w-4 h-4 mr-2\"\n        }), \"Upgrade to \", tierInfo.name))));\n    };\n    const renderInlineMode = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: cn(\"border-2 border-dashed border-yellow-300 bg-yellow-50 rounded-lg p-4\", className)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-start gap-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TriangleAlert, {\n            className: \"w-5 h-5 text-yellow-600 mt-0.5\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h3\", {\n            className: \"font-semibold text-yellow-800 mb-1\"\n        }, customTitle || `${feature.replace('_', ' ')} requires ${recommendedTier} subscription`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-sm text-yellow-700 mb-3\"\n        }, customMessage || featureDescription), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            onClick: ()=>handleUpgrade(recommendedTier),\n            size: \"sm\",\n            className: \"bg-yellow-600 hover:bg-yellow-700 text-white\"\n        }, \"Upgrade Now\"), showTrialOffer && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            size: \"sm\"\n        }, \"Start Free Trial\")))));\n    const renderBannerMode = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: cn(\"bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 border border-primary/20 rounded-lg p-3\", className)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center justify-between\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Crown, {\n            className: \"w-5 h-5 text-primary\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium text-primary\"\n        }, customTitle || 'Premium Feature'), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-sm text-gray-600\"\n        }, customMessage || featureDescription))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            onClick: ()=>handleUpgrade(recommendedTier),\n            size: \"sm\"\n        }, \"Upgrade\"), onClose && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"ghost\",\n            size: \"sm\",\n            onClick: onClose\n        }, \"×\"))));\n    const renderModalMode = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: cn(\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\", className)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, {\n            className: \"w-full max-w-4xl max-h-[90vh] overflow-auto\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, {\n            className: \"text-center pb-6\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-center mb-4\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(TriangleAlert, {\n            className: \"w-12 h-12 text-yellow-500\"\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n            className: \"text-2xl mb-2\"\n        }, customTitle || 'Upgrade Required'), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-gray-600 max-w-2xl mx-auto\"\n        }, customMessage || `${featureDescription}. Choose a subscription plan to unlock this feature and many more.`)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, null, showComparison && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"grid md:grid-cols-3 gap-6 mb-6\"\n        }, [\n            SubscriptionTier.PREMIUM,\n            SubscriptionTier.PRO,\n            SubscriptionTier.BUSINESS\n        ].map((tier)=>renderTierCard(tier, tier === recommendedTier))), currentTier === SubscriptionTier.FREE && userUsage && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-gray-50 rounded-lg p-4 mb-6\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h4\", {\n            className: \"font-medium text-gray-800 mb-3\"\n        }, \"Your current usage (Free tier)\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-2 text-sm\"\n        }, userUsage.calculations !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Calculations this month:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, userUsage.calculations, \"/100\")), userUsage.exportCount !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Exports this month:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, userUsage.exportCount, \"/5\")), userUsage.storageUsed !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Storage used:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, Math.round(userUsage.storageUsed / 1024 / 1024), \"MB/10MB\")))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center justify-between pt-4 border-t\"\n        }, onClose && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            onClick: onClose\n        }, \"Not now\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-2 ml-auto\"\n        }, showTrialOffer && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\"\n        }, \"Start Free Trial\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            onClick: ()=>handleUpgrade(recommendedTier)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Crown, {\n            className: \"w-4 h-4 mr-2\"\n        }), \"Upgrade to \", recommendedTier))))));\n    // Render based on mode\n    switch(mode){\n        case 'inline':\n            return renderInlineMode();\n        case 'banner':\n            return renderBannerMode();\n        case 'modal':\n        default:\n            return renderModalMode();\n    }\n}\n// Hook for easy subscription gating\nfunction useSubscriptionGate(feature, currentTier, userUsage) {\n    const [showGate, setShowGate] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const accessResult = checkFeatureAccess(currentTier, feature, userUsage);\n    const requireFeature = ()=>{\n        if (!accessResult.allowed) {\n            setShowGate(true);\n            return false;\n        }\n        return true;\n    };\n    const closeGate = ()=>setShowGate(false);\n    return {\n        hasAccess: accessResult.allowed,\n        showGate,\n        requireFeature,\n        closeGate,\n        accessResult\n    };\n}\nconst TIER_FEATURES = {\n    [SubscriptionTier.PREMIUM]: [\n        'Smart alerts for compliance tracking',\n        'Unlimited trip lists',\n        'PDF export functionality',\n        'Dark mode theme',\n        'Ad-free experience',\n        'Email reports and summaries'\n    ],\n    [SubscriptionTier.PRO]: [\n        'Everything in Premium',\n        'AI-powered trip optimization',\n        'Secure document vault',\n        'Multi-person tracking',\n        'Basic API access',\n        'Priority email support'\n    ],\n    [SubscriptionTier.BUSINESS]: [\n        'Everything in Pro',\n        'Team management dashboard',\n        'White-label customization',\n        'Full API access',\n        'Dedicated account manager',\n        'Custom integrations'\n    ]\n};\nconst TIER_PRICING = {\n    [SubscriptionTier.PREMIUM]: {\n        monthly: 999,\n        yearly: 9999\n    },\n    [SubscriptionTier.PRO]: {\n        monthly: 1999,\n        yearly: 19999\n    },\n    [SubscriptionTier.BUSINESS]: {\n        monthly: 4999,\n        yearly: 49999\n    }\n};\nfunction PaymentModal({ isOpen, onClose, selectedTier, billingCycle = BillingCycle.MONTHLY, userId, userEmail, currentTier = SubscriptionTier.FREE, title, subtitle, showFeatureComparison = true, showSecurityBadges = true, onSuccess, onError, onCancel, stripePublishableKey, priceId, className }) {\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedBilling, setSelectedBilling] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(billingCycle);\n    const [step, setStep] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('plan');\n    if (!isOpen) return null;\n    const pricing = TIER_PRICING[selectedTier];\n    const monthlyPrice = formatPrice(pricing.monthly);\n    const yearlyPrice = formatPrice(pricing.yearly);\n    const savings = calculateYearlySavings(pricing.monthly, pricing.yearly);\n    const features = TIER_FEATURES[selectedTier] || [];\n    // Handle Stripe checkout\n    const handleCheckout = async ()=>{\n        setIsProcessing(true);\n        setStep('processing');\n        try {\n            // Initialize Stripe\n            const stripe = await getStripe();\n            if (!stripe) {\n                throw new Error('Stripe failed to initialize');\n            }\n            // Create checkout session\n            const response = await fetch('/api/create-checkout-session', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    priceId: priceId || `${selectedTier}_${selectedBilling}`,\n                    tier: selectedTier,\n                    billingCycle: selectedBilling,\n                    userId,\n                    userEmail,\n                    currentTier,\n                    successUrl: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,\n                    cancelUrl: `${window.location.origin}/pricing?canceled=true`\n                })\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.message || 'Failed to create checkout session');\n            }\n            const { sessionId } = await response.json();\n            // Redirect to Stripe Checkout\n            const { error } = await stripe.redirectToCheckout({\n                sessionId\n            });\n            if (error) {\n                throw error;\n            }\n        } catch (error) {\n            console.error('Checkout error:', error);\n            setIsProcessing(false);\n            setStep('checkout');\n            onError?.(error);\n        }\n    };\n    const renderPlanSelection = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-6\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center justify-center\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-gray-100 p-1 rounded-lg flex\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n            onClick: ()=>setSelectedBilling(BillingCycle.MONTHLY),\n            className: cn(\"px-4 py-2 text-sm font-medium rounded-md transition-colors\", selectedBilling === BillingCycle.MONTHLY ? \"bg-white text-gray-900 shadow-sm\" : \"text-gray-600 hover:text-gray-900\")\n        }, \"Monthly\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n            onClick: ()=>setSelectedBilling(BillingCycle.YEARLY),\n            className: cn(\"px-4 py-2 text-sm font-medium rounded-md transition-colors relative\", selectedBilling === BillingCycle.YEARLY ? \"bg-white text-gray-900 shadow-sm\" : \"text-gray-600 hover:text-gray-900\")\n        }, \"Yearly\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Badge, {\n            className: \"absolute -top-2 -right-2 bg-green-500 text-white text-xs px-1.5 py-0.5\"\n        }, \"Save \", savings.savingsPercentage, \"%\")))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, {\n            className: \"border-primary bg-primary/5\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, {\n            className: \"text-center\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center justify-center gap-2 mb-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Zap, {\n            className: \"w-5 h-5 text-primary\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n            className: \"text-xl\"\n        }, selectedTier, \" Plan\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-3xl font-bold text-primary\"\n        }, selectedBilling === BillingCycle.YEARLY ? yearlyPrice : monthlyPrice, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"text-lg font-normal text-gray-600\"\n        }, \"/\", selectedBilling === BillingCycle.YEARLY ? 'year' : 'month')), selectedBilling === BillingCycle.YEARLY && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-sm text-green-600 font-medium\"\n        }, \"Save \", formatPrice(savings.savingsAmount), \" compared to monthly\"))), showFeatureComparison && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h4\", {\n            className: \"font-medium text-gray-900\"\n        }, \"What's included:\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-2\"\n        }, features.map((feature, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: index,\n                className: \"flex items-center gap-2 text-sm\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Check, {\n                className: \"w-4 h-4 text-green-600 flex-shrink-0\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, feature))))))), showSecurityBadges && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center justify-center gap-4 text-sm text-gray-600\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Shield, {\n            className: \"w-4 h-4\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Secure payments\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CreditCard, {\n            className: \"w-4 h-4\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Stripe powered\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(X, {\n            className: \"w-4 h-4\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Cancel anytime\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            className: \"flex-1\",\n            onClick: ()=>{\n                onCancel?.();\n                onClose();\n            }\n        }, \"Cancel\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            className: \"flex-1\",\n            onClick: ()=>setStep('checkout')\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CreditCard, {\n            className: \"w-4 h-4 mr-2\"\n        }), \"Continue to Checkout\")));\n    const renderCheckout = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-6\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-gray-50 rounded-lg p-4\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h4\", {\n            className: \"font-medium text-gray-900 mb-3\"\n        }, \"Order Summary\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-2 text-sm\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, selectedTier, \" Plan (\", selectedBilling, \")\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, selectedBilling === BillingCycle.YEARLY ? yearlyPrice : monthlyPrice)), selectedBilling === BillingCycle.YEARLY && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between text-green-600\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Annual discount\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"-\", formatPrice(savings.savingsAmount))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"border-t pt-2 flex justify-between font-medium\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Total\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, selectedBilling === BillingCycle.YEARLY ? yearlyPrice : monthlyPrice)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n            className: \"text-lg\"\n        }, \"Payment Information\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-center text-gray-600 mb-4\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CreditCard, {\n            className: \"w-8 h-8 mx-auto mb-2 text-gray-400\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", null, \"You'll be redirected to Stripe's secure checkout\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-sm\"\n        }, \"Your payment information is never stored on our servers\")))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-center gap-3\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            className: \"flex-1\",\n            onClick: ()=>setStep('plan'),\n            disabled: isProcessing\n        }, \"Back\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            className: \"flex-1\",\n            onClick: handleCheckout,\n            disabled: isProcessing\n        }, isProcessing ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(LoaderCircle, {\n            className: \"w-4 h-4 mr-2 animate-spin\"\n        }), \"Processing...\") : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Shield, {\n            className: \"w-4 h-4 mr-2\"\n        }), \"Secure Checkout\"))));\n    const renderProcessing = ()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-center py-8\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(LoaderCircle, {\n            className: \"w-12 h-12 mx-auto mb-4 text-primary animate-spin\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h3\", {\n            className: \"text-lg font-medium mb-2\"\n        }, \"Processing your subscription...\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-gray-600 mb-4\"\n        }, \"Please wait while we set up your \", selectedTier, \" subscription.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-sm text-gray-500\"\n        }, \"This may take a few moments. Please do not close this window.\"));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: cn(\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\", className)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, {\n        className: \"w-full max-w-lg max-h-[90vh] overflow-auto\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, {\n        className: \"text-center\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center justify-between\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex-1\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n        className: \"text-xl\"\n    }, title || `Subscribe to ${selectedTier}`), subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n        className: \"text-gray-600 mt-1\"\n    }, subtitle)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n        variant: \"ghost\",\n        size: \"icon\",\n        onClick: onClose,\n        disabled: isProcessing\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(X, {\n        className: \"w-4 h-4\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, null, step === 'plan' && renderPlanSelection(), step === 'checkout' && renderCheckout(), step === 'processing' && renderProcessing())));\n}\n// Hook for payment modal management\nfunction usePaymentModal() {\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [selectedTier, setSelectedTier] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(SubscriptionTier.PREMIUM);\n    const [billingCycle, setBillingCycle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(BillingCycle.MONTHLY);\n    const openModal = (tier, cycle = BillingCycle.MONTHLY)=>{\n        setSelectedTier(tier);\n        setBillingCycle(cycle);\n        setIsOpen(true);\n    };\n    const closeModal = ()=>{\n        setIsOpen(false);\n    };\n    return {\n        isOpen,\n        selectedTier,\n        billingCycle,\n        openModal,\n        closeModal,\n        setSelectedTier,\n        setBillingCycle\n    };\n}\nconst TIER_CONFIG = {\n    [SubscriptionTier.FREE]: {\n        name: 'Free',\n        icon: null,\n        description: 'Perfect for trying out basic Schengen calculations',\n        color: 'bg-gray-50 border-gray-200 text-gray-700',\n        buttonColor: 'bg-gray-600 hover:bg-gray-700',\n        popular: false,\n        limitations: [\n            'Limited to 100 calculations per month',\n            'Single trip list only',\n            'Screenshot export only',\n            'Community support',\n            'Ads enabled'\n        ]\n    },\n    [SubscriptionTier.PREMIUM]: {\n        name: 'Premium',\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Crown, {\n            className: \"w-5 h-5\"\n        }),\n        description: 'Best for individual travelers who need advanced features',\n        color: 'bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-300 text-yellow-800',\n        buttonColor: 'bg-yellow-600 hover:bg-yellow-700',\n        popular: true,\n        features: [\n            'Unlimited calculations',\n            'Smart compliance alerts',\n            'Unlimited trip lists',\n            'PDF export & reporting',\n            'Dark mode theme',\n            'Ad-free experience',\n            'Email notifications',\n            'Priority calculation queue'\n        ]\n    },\n    [SubscriptionTier.PRO]: {\n        name: 'Pro',\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Zap, {\n            className: \"w-5 h-5\"\n        }),\n        description: 'Ideal for frequent travelers and travel professionals',\n        color: 'bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-300 text-blue-800',\n        buttonColor: 'bg-blue-600 hover:bg-blue-700',\n        popular: false,\n        features: [\n            'Everything in Premium',\n            'AI-powered trip optimizer',\n            'Secure document vault (10GB)',\n            'Multi-person tracking',\n            'Advanced analytics dashboard',\n            'API access (1,000 requests/month)',\n            'Priority email support',\n            'Excel/CSV export formats'\n        ]\n    },\n    [SubscriptionTier.BUSINESS]: {\n        name: 'Business',\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Building2, {\n            className: \"w-5 h-5\"\n        }),\n        description: 'Enterprise solution for teams and organizations',\n        color: 'bg-gradient-to-br from-purple-50 to-pink-50 border-purple-300 text-purple-800',\n        buttonColor: 'bg-purple-600 hover:bg-purple-700',\n        popular: false,\n        features: [\n            'Everything in Pro',\n            'Team management dashboard',\n            'White-label customization',\n            'Unlimited API access',\n            'Custom integrations',\n            'Dedicated account manager',\n            'Phone & priority support',\n            'Custom compliance rules'\n        ]\n    }\n};\nfunction PricingCards({ currentTier = SubscriptionTier.FREE, currentUsage = {}, showComparison = true, showPopularBadge = true, showAnnualToggle = true, highlightTier, compact = false, onSelectPlan, onStartTrial, title = \"Choose Your Plan\", subtitle = \"Upgrade anytime. Cancel anytime. Start your journey to smarter travel planning.\", className }) {\n    const [billingCycle, setBillingCycle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(BillingCycle.MONTHLY);\n    const [hoveredTier, setHoveredTier] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const handleSelectPlan = (tier)=>{\n        onSelectPlan?.(tier, billingCycle);\n    };\n    const handleStartTrial = (tier)=>{\n        onStartTrial?.(tier);\n    };\n    const renderUsageLimits = ()=>{\n        if (currentTier !== SubscriptionTier.FREE || !Object.keys(currentUsage).length) return null;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"mb-8 p-4 bg-amber-50 border border-amber-200 rounded-lg\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h3\", {\n            className: \"font-medium text-amber-800 mb-3 flex items-center gap-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Crown, {\n            className: \"w-4 h-4\"\n        }), \"Your Current Usage (Free Plan)\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\"\n        }, currentUsage.calculations !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between mb-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Calculations\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, currentUsage.calculations, \"/100\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"w-full bg-amber-200 rounded-full h-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-amber-500 h-2 rounded-full transition-all duration-300\",\n            style: {\n                width: `${Math.min(currentUsage.calculations / 100 * 100, 100)}%`\n            }\n        }))), currentUsage.exportCount !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between mb-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Exports\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, currentUsage.exportCount, \"/5\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"w-full bg-amber-200 rounded-full h-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-amber-500 h-2 rounded-full transition-all duration-300\",\n            style: {\n                width: `${Math.min(currentUsage.exportCount / 5 * 100, 100)}%`\n            }\n        }))), currentUsage.storageUsed !== undefined && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex justify-between mb-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"Storage\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"font-medium\"\n        }, Math.round(currentUsage.storageUsed / 1024 / 1024), \"MB/0MB\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"w-full bg-amber-200 rounded-full h-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"bg-amber-500 h-2 rounded-full w-full\"\n        })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-amber-700 text-sm mt-3\"\n        }, \"Upgrade to remove limits and unlock premium features\"));\n    };\n    const renderPricingCard = (tier)=>{\n        const config = TIER_CONFIG[tier];\n        const pricing = TIER_PRICING$1[tier];\n        const isCurrentTier = tier === currentTier;\n        const isHighlighted = tier === (highlightTier || SubscriptionTier.PREMIUM);\n        const isHovered = tier === hoveredTier;\n        // Calculate pricing\n        let displayPrice = \"Free\";\n        let billingText = \"\";\n        let savings = null;\n        if (tier !== SubscriptionTier.FREE) {\n            const monthlyPrice = formatPrice(pricing.monthly);\n            const yearlyPrice = formatPrice(pricing.yearly);\n            if (billingCycle === BillingCycle.YEARLY) {\n                displayPrice = yearlyPrice;\n                billingText = \"/year\";\n                savings = calculateYearlySavings(pricing.monthly, pricing.yearly);\n            } else {\n                displayPrice = monthlyPrice;\n                billingText = \"/month\";\n            }\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Card, {\n            key: tier,\n            className: cn(\"relative transition-all duration-300 hover:shadow-lg\", config.color, isHighlighted && \"border-2 border-primary shadow-lg scale-105\", isHovered && \"transform -translate-y-1\", isCurrentTier && \"ring-2 ring-green-500 ring-offset-2\", compact ? \"p-4\" : \"p-6\"),\n            onMouseEnter: ()=>setHoveredTier(tier),\n            onMouseLeave: ()=>setHoveredTier(null)\n        }, config.popular && showPopularBadge && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"absolute -top-3 left-1/2 transform -translate-x-1/2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Badge, {\n            className: \"bg-primary text-primary-foreground px-3 py-1 font-medium\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Star, {\n            className: \"w-3 h-3 mr-1\"\n        }), \"Most Popular\")), isCurrentTier && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"absolute -top-2 -right-2\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Badge, {\n            className: \"bg-green-500 text-white\"\n        }, \"Current Plan\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardHeader, {\n            className: compact ? \"pb-3\" : \"pb-4\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardTitle, {\n            className: \"flex items-center gap-2 text-xl\"\n        }, config.icon, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, config.name)), !compact && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n            className: \"text-sm opacity-80\"\n        }, config.description), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"flex items-baseline gap-1\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"text-3xl font-bold\"\n        }, displayPrice), billingText && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n            className: \"text-lg opacity-70\"\n        }, billingText)), savings && billingCycle === BillingCycle.YEARLY && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-sm text-green-600 font-medium\"\n        }, \"Save \", formatPrice(savings.savingsAmount), \" annually (\", savings.savingsPercentage, \"% off)\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(CardContent, {\n            className: \"space-y-4\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"space-y-2\"\n        }, tier === SubscriptionTier.FREE ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, config.limitations?.map((limitation, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: index,\n                className: \"flex items-start gap-2 text-sm\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                className: \"w-4 h-4 rounded-full bg-gray-300 flex-shrink-0 mt-0.5\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", {\n                className: \"opacity-80\"\n            }, limitation)))) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, config.features?.slice(0, compact ? 4 : 8).map((feature, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n                key: index,\n                className: \"flex items-start gap-2 text-sm\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Check, {\n                className: \"w-4 h-4 text-green-600 flex-shrink-0 mt-0.5\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, feature))), config.features && config.features.length > (compact ? 4 : 8) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"text-sm opacity-70 italic\"\n        }, \"+\", config.features.length - (compact ? 4 : 8), \" more features\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n            className: \"pt-4 space-y-2\"\n        }, isCurrentTier ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            className: \"w-full\",\n            disabled: true\n        }, \"Current Plan\") : tier === SubscriptionTier.FREE ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"outline\",\n            className: \"w-full\",\n            onClick: ()=>handleSelectPlan(tier)\n        }, \"Your Current Plan\") : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            className: cn(\"w-full text-white\", config.buttonColor),\n            onClick: ()=>handleSelectPlan(tier)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(ArrowRight, {\n            className: \"w-4 h-4 mr-2\"\n        }), \"Upgrade to \", config.name), tier !== SubscriptionTier.BUSINESS && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Button$1, {\n            variant: \"ghost\",\n            size: \"sm\",\n            className: \"w-full text-xs\",\n            onClick: ()=>handleStartTrial(tier)\n        }, \"Start 7-day free trial\")))));\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: cn(\"w-full\", className)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"text-center mb-8\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h2\", {\n        className: \"text-3xl font-bold mb-4\"\n    }, title), subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"p\", {\n        className: \"text-gray-600 max-w-2xl mx-auto\"\n    }, subtitle), showAnnualToggle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center justify-center mt-6\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"bg-gray-100 p-1 rounded-lg flex relative\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n        onClick: ()=>setBillingCycle(BillingCycle.MONTHLY),\n        className: cn(\"px-4 py-2 text-sm font-medium rounded-md transition-colors relative z-10\", billingCycle === BillingCycle.MONTHLY ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\")\n    }, \"Monthly\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"button\", {\n        onClick: ()=>setBillingCycle(BillingCycle.YEARLY),\n        className: cn(\"px-4 py-2 text-sm font-medium rounded-md transition-colors relative z-10\", billingCycle === BillingCycle.YEARLY ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\")\n    }, \"Yearly\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Badge, {\n        className: \"absolute -top-2 -right-2 bg-green-500 text-white text-xs px-1.5 py-0.5\"\n    }, \"Save 17%\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: cn(\"absolute top-1 bottom-1 bg-white rounded-md shadow-sm transition-transform duration-200 z-0\", \"w-[calc(50%-4px)]\", billingCycle === BillingCycle.YEARLY ? \"transform translate-x-[calc(100%+8px)]\" : \"transform translate-x-1\")\n    })))), renderUsageLimits(), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: cn(\"grid gap-6\", compact ? \"grid-cols-1 md:grid-cols-4\" : \"grid-cols-1 md:grid-cols-2 lg:grid-cols-4\", showComparison && \"lg:grid-cols-4\")\n    }, Object.values(SubscriptionTier).map((tier)=>renderPricingCard(tier))), showComparison && !compact && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"mt-12 bg-white rounded-lg border shadow-sm overflow-hidden\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"px-6 py-4 bg-gray-50 border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"h3\", {\n        className: \"text-lg font-semibold\"\n    }, \"Compare Plans\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"overflow-x-auto\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"table\", {\n        className: \"w-full\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"thead\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        className: \"border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"th\", {\n        className: \"text-left py-3 px-6 font-medium\"\n    }, \"Features\"), Object.values(SubscriptionTier).map((tier)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"th\", {\n            key: tier,\n            className: \"text-center py-3 px-6 font-medium\"\n        }, TIER_CONFIG[tier].name)))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tbody\", {\n        className: \"text-sm\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        className: \"border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"py-3 px-6\"\n    }, \"Monthly calculations\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"100\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        className: \"border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"py-3 px-6\"\n    }, \"Trip lists\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"1\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Unlimited\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        className: \"border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"py-3 px-6\"\n    }, \"Export formats\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Screenshot\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"PDF\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"PDF, Excel\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"All formats\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"tr\", {\n        className: \"border-b\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"py-3 px-6\"\n    }, \"Support\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Community\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Email\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Priority\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"td\", {\n        className: \"text-center py-3 px-6\"\n    }, \"Dedicated\")))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"mt-8 flex items-center justify-center gap-8 text-sm text-gray-500\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Shield, {\n        className: \"w-4 h-4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"30-day money back\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Users, {\n        className: \"w-4 h-4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"10,000+ travelers trust us\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", {\n        className: \"flex items-center gap-2\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(Headphones, {\n        className: \"w-4 h-4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"span\", null, \"24/7 support\"))));\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../ui/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HomePage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @schengen/calculator */ \"(ssr)/../calculator/dist/index.esm.js\");\n/* harmony import */ var _schengen_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @schengen/ui */ \"(ssr)/../ui/dist/index.esm.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/info.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/circle-x.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/calendar.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/circle-check-big.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/map-pin.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/circle-alert.js\");\n/* harmony import */ var _barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=AlertCircle,Calculator,Calendar,CheckCircle,Info,MapPin,XCircle!=!lucide-react */ \"(ssr)/../../node_modules/lucide-react/dist/esm/icons/calculator.js\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"(ssr)/../../node_modules/date-fns/format.mjs\");\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sonner */ \"(ssr)/../../node_modules/sonner/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\n\n\n\nfunction HomePage() {\n    const [selectedCountry, setSelectedCountry] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [selectedDateRange, setSelectedDateRange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        startDate: null,\n        endDate: null\n    });\n    const [isCalendarOpen, setIsCalendarOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [trips, setTrips] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [calculationResult, setCalculationResult] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCalculating, setIsCalculating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentFormStage, setCurrentFormStage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('country');\n    // Real-time calculation states\n    const [currentTripDays, setCurrentTripDays] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [totalDaysInPeriod, setTotalDaysInPeriod] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [remainingDays, setRemainingDays] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(90);\n    // Get countries for dropdown\n    const countryOptions = (0,_schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.getCountriesForSelect)();\n    // Determine current form stage\n    const getFormStage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[getFormStage]\": ()=>{\n            if (!selectedCountry) return 'country';\n            if (!selectedDateRange.startDate || !selectedDateRange.endDate) return 'dates';\n            return 'complete';\n        }\n    }[\"HomePage.useCallback[getFormStage]\"], [\n        selectedCountry,\n        selectedDateRange\n    ]);\n    // Update form stage when dependencies change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"HomePage.useEffect\": ()=>{\n            setCurrentFormStage(getFormStage());\n        }\n    }[\"HomePage.useEffect\"], [\n        getFormStage\n    ]);\n    // Get column styling based on current stage\n    const getColumnStyle = (columnStage)=>{\n        const stage = getFormStage();\n        if (columnStage === stage) {\n            return 'border-2 border-blue-400 bg-blue-50 shadow-md transition-all duration-300';\n        }\n        if (columnStage === 'country' && (stage === 'dates' || stage === 'complete') || columnStage === 'dates' && stage === 'complete') {\n            return 'border-2 border-green-400 bg-green-50 transition-all duration-300';\n        }\n        return 'border-2 border-gray-200 bg-gray-50 transition-all duration-300';\n    };\n    // Get progress dot styling\n    const getProgressDotStyle = (dotStage)=>{\n        const stage = getFormStage();\n        if (dotStage === stage) {\n            return 'w-3 h-3 rounded-full bg-primary animate-pulse transition-all duration-300 shadow-sm';\n        }\n        if (dotStage === 'country' && (stage === 'dates' || stage === 'complete') || dotStage === 'dates' && stage === 'complete') {\n            return 'w-3 h-3 rounded-full bg-calendar-valid transition-all duration-300 shadow-sm';\n        }\n        return 'w-3 h-3 rounded-full bg-gray-300 transition-all duration-300';\n    };\n    const handleCalculate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleCalculate]\": async ()=>{\n            console.log('handleCalculate called', {\n                selectedCountry,\n                selectedDateRange,\n                trips: trips.length\n            });\n            if (!selectedCountry || !selectedDateRange.startDate || !selectedDateRange.endDate) {\n                sonner__WEBPACK_IMPORTED_MODULE_4__.toast.error('Please select country and travel dates');\n                return;\n            }\n            const start = selectedDateRange.startDate;\n            const end = selectedDateRange.endDate;\n            if (start >= end) {\n                sonner__WEBPACK_IMPORTED_MODULE_4__.toast.error('End date must be after start date');\n                return;\n            }\n            setIsCalculating(true);\n            try {\n                const selectedCountryData = _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.SCHENGEN_COUNTRIES.find({\n                    \"HomePage.useCallback[handleCalculate].selectedCountryData\": (c)=>c.code === selectedCountry\n                }[\"HomePage.useCallback[handleCalculate].selectedCountryData\"]);\n                const days = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                const newTrip = {\n                    id: `trip-${Date.now()}`,\n                    country: selectedCountryData?.name || selectedCountry,\n                    startDate: start,\n                    endDate: end,\n                    days\n                };\n                const updatedTrips = [\n                    ...trips,\n                    newTrip\n                ];\n                console.log('Adding trip:', newTrip);\n                console.log('Updated trips:', updatedTrips);\n                // Calculate compliance using RobustSchengenCalculator\n                const result = _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.RobustSchengenCalculator.calculateExactCompliance(updatedTrips, new Date());\n                setTrips(updatedTrips);\n                setCalculationResult(result);\n                // Update real-time calculations\n                setTotalDaysInPeriod(result.totalDaysUsed);\n                setRemainingDays(result.daysRemaining);\n                sonner__WEBPACK_IMPORTED_MODULE_4__.toast.success(`Trip to ${selectedCountryData?.name || selectedCountry} added successfully!`);\n                // Clear form after a short delay to show the trip was added\n                setTimeout({\n                    \"HomePage.useCallback[handleCalculate]\": ()=>{\n                        setSelectedCountry('');\n                        setSelectedDateRange({\n                            startDate: null,\n                            endDate: null\n                        });\n                    }\n                }[\"HomePage.useCallback[handleCalculate]\"], 100);\n            } catch (error) {\n                console.error('Calculation error:', error);\n                sonner__WEBPACK_IMPORTED_MODULE_4__.toast.error(`Error adding trip: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            } finally{\n                setIsCalculating(false);\n            }\n        }\n    }[\"HomePage.useCallback[handleCalculate]\"], [\n        selectedCountry,\n        selectedDateRange,\n        trips\n    ]);\n    const handleClearTrips = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleClearTrips]\": ()=>{\n            setTrips([]);\n            setCalculationResult(null);\n            sonner__WEBPACK_IMPORTED_MODULE_4__.toast.success('Cleared all trips');\n        }\n    }[\"HomePage.useCallback[handleClearTrips]\"], []);\n    const handleDeleteTrip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleDeleteTrip]\": (tripId)=>{\n            const updatedTrips = trips.filter({\n                \"HomePage.useCallback[handleDeleteTrip].updatedTrips\": (t)=>t.id !== tripId\n            }[\"HomePage.useCallback[handleDeleteTrip].updatedTrips\"]);\n            setTrips(updatedTrips);\n            if (updatedTrips.length === 0) {\n                setCalculationResult(null);\n            } else {\n                // Recalculate with remaining trips\n                const result = _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.RobustSchengenCalculator.calculateExactCompliance(updatedTrips, new Date());\n                setCalculationResult(result);\n            }\n            sonner__WEBPACK_IMPORTED_MODULE_4__.toast.success('Trip removed and compliance recalculated');\n        }\n    }[\"HomePage.useCallback[handleDeleteTrip]\"], [\n        trips\n    ]);\n    // Calendar modal handlers\n    const handleOpenCalendar = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleOpenCalendar]\": ()=>{\n            setIsCalendarOpen(true);\n        }\n    }[\"HomePage.useCallback[handleOpenCalendar]\"], []);\n    const handleCloseCalendar = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleCloseCalendar]\": ()=>{\n            setIsCalendarOpen(false);\n        }\n    }[\"HomePage.useCallback[handleCloseCalendar]\"], []);\n    const handleDateRangeSelect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"HomePage.useCallback[handleDateRangeSelect]\": (range)=>{\n            setSelectedDateRange(range);\n        }\n    }[\"HomePage.useCallback[handleDateRangeSelect]\"], []);\n    // Real-time calculation effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"HomePage.useEffect\": ()=>{\n            // Calculate current trip days\n            if (selectedDateRange.startDate && selectedDateRange.endDate) {\n                const days = Math.ceil((selectedDateRange.endDate.getTime() - selectedDateRange.startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                setCurrentTripDays(days);\n            } else {\n                setCurrentTripDays(0);\n            }\n            // Calculate 180-day rolling window total\n            const today = new Date();\n            const oneEightyDaysAgo = new Date(today.getTime() - 180 * 24 * 60 * 60 * 1000);\n            let totalDaysUsed = 0;\n            // Add days from existing trips that fall within the 180-day window\n            trips.forEach({\n                \"HomePage.useEffect\": (trip)=>{\n                    const tripStart = new Date(trip.startDate);\n                    const tripEnd = new Date(trip.endDate);\n                    // Check if trip overlaps with 180-day window\n                    if (tripEnd >= oneEightyDaysAgo && tripStart <= today) {\n                        // Calculate overlapping days\n                        const windowStart = new Date(Math.max(tripStart.getTime(), oneEightyDaysAgo.getTime()));\n                        const windowEnd = new Date(Math.min(tripEnd.getTime(), today.getTime()));\n                        const daysInWindow = Math.ceil((windowEnd.getTime() - windowStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                        totalDaysUsed += Math.max(0, daysInWindow);\n                    }\n                }\n            }[\"HomePage.useEffect\"]);\n            // Add current trip days if they would fall within the window\n            if (selectedDateRange.startDate && selectedDateRange.endDate) {\n                const currentTripStart = selectedDateRange.startDate;\n                const currentTripEnd = selectedDateRange.endDate;\n                // Check if current trip overlaps with 180-day window\n                if (currentTripEnd >= oneEightyDaysAgo && currentTripStart <= today) {\n                    const windowStart = new Date(Math.max(currentTripStart.getTime(), oneEightyDaysAgo.getTime()));\n                    const windowEnd = new Date(Math.min(currentTripEnd.getTime(), today.getTime()));\n                    const daysInWindow = Math.ceil((windowEnd.getTime() - windowStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                    totalDaysUsed += Math.max(0, daysInWindow);\n                }\n            }\n            setTotalDaysInPeriod(totalDaysUsed);\n            setRemainingDays(Math.max(0, 90 - totalDaysUsed));\n        }\n    }[\"HomePage.useEffect\"], [\n        selectedDateRange,\n        trips\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        id: \"main-content\",\n        className: \"min-h-screen bg-cream\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"container mx-auto p-4 mobile:p-6 max-w-6xl\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"text-center mb-8 mobile:mb-12\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-4xl mobile:text-5xl font-bold mb-4 text-balance\",\n                            children: \"Schengen Visa Calculator\"\n                        }, void 0, false, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 222,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-xl mobile:text-2xl text-muted-foreground font-medium mb-6 text-balance\",\n                            children: \"Check Your 90/180 Day Rule Compliance - Avoid Overstay Penalties\"\n                        }, void 0, false, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 225,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-lg mb-6 max-w-3xl mx-auto text-balance leading-relaxed\",\n                            children: [\n                                \"The Schengen Area allows visitors to stay for up to \",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"90 days within any 180-day period\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 229,\n                                    columnNumber: 63\n                                }, this),\n                                \". Overstaying can result in \",\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n                                    children: \"entry bans, fines up to €5,000, and deportation\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 230,\n                                    columnNumber: 37\n                                }, this),\n                                \". Our calculator ensures your European travel stays compliant and penalty-free.\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 228,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"bg-primary-50 border border-primary-200 rounded-lg p-4 mb-8 max-w-2xl mx-auto shadow-schengen-card\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center gap-2 mb-2\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                                            className: \"w-5 h-5 text-primary-600\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 236,\n                                            columnNumber: 13\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"font-semibold text-primary-900\",\n                                            children: \"Why This Matters\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 237,\n                                            columnNumber: 13\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 235,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-sm text-primary-800\",\n                                    children: \"Visa violations can ban you from Europe for 3+ years. Our tool calculates your exact compliance status and helps you plan safe travel within the 27 Schengen countries.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 239,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 234,\n                            columnNumber: 9\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 221,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex items-center justify-center gap-4 mb-8\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: getProgressDotStyle('country')\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 249,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: `text-sm font-medium transition-colors duration-300 ${currentFormStage === 'country' ? 'text-primary-600' : currentFormStage === 'dates' || currentFormStage === 'complete' ? 'text-calendar-valid' : 'text-gray-400'}`,\n                                    children: \"Country\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 250,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 248,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: `h-px w-8 transition-colors duration-300 ${currentFormStage === 'dates' || currentFormStage === 'complete' ? 'bg-calendar-valid' : 'bg-gray-300'}`\n                        }, void 0, false, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 259,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: getProgressDotStyle('dates')\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 264,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: `text-sm font-medium transition-colors duration-300 ${currentFormStage === 'dates' ? 'text-primary-600' : currentFormStage === 'complete' ? 'text-calendar-valid' : 'text-gray-400'}`,\n                                    children: \"Dates\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 265,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 263,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: `h-px w-8 transition-colors duration-300 ${currentFormStage === 'complete' ? 'bg-calendar-valid' : 'bg-gray-300'}`\n                        }, void 0, false, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 274,\n                            columnNumber: 9\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center gap-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: getProgressDotStyle('complete')\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 279,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: `text-sm font-medium transition-colors duration-300 ${currentFormStage === 'complete' ? 'text-calendar-valid' : 'text-gray-400'}`,\n                                    children: \"Complete\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 280,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 278,\n                            columnNumber: 9\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 247,\n                    columnNumber: 7\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Card, {\n                    className: \"mb-8 p-6 bg-white shadow-schengen-card border-0 rounded-2xl hidden tablet:block\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"overflow-x-auto\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"table\", {\n                                className: \"w-full\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"thead\", {\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                            className: \"mb-4\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                    className: \"text-left p-2 font-semibold text-gray-700\",\n                                                    children: \"Country\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 294,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                    className: \"text-left p-2 font-semibold text-gray-700\",\n                                                    children: \"Date Range\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 295,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                    className: \"text-left p-2 font-semibold text-gray-700\",\n                                                    children: \"Days of Stay\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 296,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                    className: \"text-left p-2 font-semibold text-gray-700\",\n                                                    children: \"Days of Stay in the last 180 days\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 297,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"th\", {\n                                                    className: \"text-left p-2 font-semibold text-gray-700\",\n                                                    children: \"Days Remaining\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 298,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 293,\n                                            columnNumber: 17\n                                        }, this)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 292,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tbody\", {\n                                        children: [\n                                            trips.map((trip, index)=>{\n                                                const tripDays = Math.ceil((trip.endDate.getTime() - trip.startDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                                                // Calculate cumulative compliance up to this trip (including this trip)\n                                                const tripsUpToThis = trips.slice(0, index + 1);\n                                                const cumulativeCompliance = _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.RobustSchengenCalculator.calculateExactCompliance(tripsUpToThis, new Date());\n                                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                                    className: \"border-b border-gray-100\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                            className: \"p-2\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"flex items-center justify-center gap-2 mb-2\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 314,\n                                                                            columnNumber: 27\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 315,\n                                                                            columnNumber: 27\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 316,\n                                                                            columnNumber: 27\n                                                                        }, this)\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 313,\n                                                                    columnNumber: 25\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"rounded-lg p-4 min-w-[200px] border-2 border-green-300 bg-green-50\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"flex items-center justify-between\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                                className: \"flex items-center gap-2\",\n                                                                                children: [\n                                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                                        className: \"text-2xl\",\n                                                                                        children: _schengen_calculator__WEBPACK_IMPORTED_MODULE_2__.SCHENGEN_COUNTRIES.find((c)=>c.name === trip.country)?.flag || '🇪🇺'\n                                                                                    }, void 0, false, {\n                                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                        lineNumber: 321,\n                                                                                        columnNumber: 31\n                                                                                    }, this),\n                                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                                        className: \"font-semibold text-gray-800\",\n                                                                                        children: trip.country\n                                                                                    }, void 0, false, {\n                                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                        lineNumber: 322,\n                                                                                        columnNumber: 31\n                                                                                    }, this)\n                                                                                ]\n                                                                            }, void 0, true, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 320,\n                                                                                columnNumber: 29\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                                                onClick: ()=>handleDeleteTrip(trip.id),\n                                                                                variant: \"ghost\",\n                                                                                size: \"sm\",\n                                                                                className: \"text-red-600 hover:text-red-700 hover:bg-red-50 p-1\",\n                                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                                                    className: \"w-4 h-4\"\n                                                                                }, void 0, false, {\n                                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                    lineNumber: 330,\n                                                                                    columnNumber: 31\n                                                                                }, this)\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 324,\n                                                                                columnNumber: 29\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 319,\n                                                                        columnNumber: 27\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 318,\n                                                                    columnNumber: 25\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 312,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                            className: \"p-2\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"flex items-center justify-center gap-2 mb-2\",\n                                                                    children: [\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 339,\n                                                                            columnNumber: 27\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 340,\n                                                                            columnNumber: 27\n                                                                        }, this),\n                                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                            className: \"w-3 h-3 rounded-full bg-calendar-valid\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 341,\n                                                                            columnNumber: 27\n                                                                        }, this)\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 338,\n                                                                    columnNumber: 25\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"rounded-lg p-4 min-w-[220px] border-2 border-blue-300 bg-blue-50\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"flex flex-col items-center text-center\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                                                className: \"w-5 h-5 mb-2 text-blue-600\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 345,\n                                                                                columnNumber: 29\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                                className: \"font-semibold text-gray-800\",\n                                                                                children: [\n                                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(trip.startDate, 'MMM dd'),\n                                                                                    \" - \",\n                                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(trip.endDate, 'MMM dd')\n                                                                                ]\n                                                                            }, void 0, true, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 346,\n                                                                                columnNumber: 29\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 344,\n                                                                        columnNumber: 27\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 343,\n                                                                    columnNumber: 25\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 337,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                            className: \"p-2\",\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"rounded-lg p-4 min-w-[120px] text-center bg-gray-50 border-2 border-gray-200\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-xl font-bold text-gray-800\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                        value: tripDays,\n                                                                        suffix: \" days\"\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 357,\n                                                                        columnNumber: 29\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 356,\n                                                                    columnNumber: 27\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 355,\n                                                                columnNumber: 25\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 354,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                            className: \"p-2\",\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: `rounded-lg p-4 min-w-[140px] text-center border-2 ${cumulativeCompliance.totalDaysUsed > 90 ? 'bg-red-50 border-red-300' : cumulativeCompliance.totalDaysUsed > 70 ? 'bg-orange-50 border-orange-300' : 'bg-gray-50 border-gray-200'}`,\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: `text-xl font-bold ${cumulativeCompliance.totalDaysUsed > 90 ? 'text-red-700' : cumulativeCompliance.totalDaysUsed > 70 ? 'text-orange-700' : 'text-gray-800'}`,\n                                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                            value: cumulativeCompliance.totalDaysUsed,\n                                                                            suffix: \" days\"\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 374,\n                                                                            columnNumber: 29\n                                                                        }, this)\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 369,\n                                                                        columnNumber: 27\n                                                                    }, this),\n                                                                    cumulativeCompliance.totalDaysUsed > 90 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"text-xs text-red-600 mt-1 font-medium\",\n                                                                        children: \"Over Limit!\"\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 377,\n                                                                        columnNumber: 29\n                                                                    }, this)\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 364,\n                                                                columnNumber: 25\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 363,\n                                                            columnNumber: 23\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                            className: \"p-2\",\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"flex flex-col items-center justify-center min-w-[120px]\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {\n                                                                        value: Math.max(0, cumulativeCompliance.daysRemaining),\n                                                                        max: 90,\n                                                                        size: 80,\n                                                                        strokeWidth: 6,\n                                                                        progressColor: cumulativeCompliance.daysRemaining > 60 ? \"#10b981\" : cumulativeCompliance.daysRemaining > 30 ? \"#f59e0b\" : cumulativeCompliance.daysRemaining > 10 ? \"#ef4444\" : \"#dc2626\"\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 387,\n                                                                        columnNumber: 27\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"text-center mt-1\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                                className: `text-xs font-medium ${cumulativeCompliance.daysRemaining > 60 ? 'text-green-600' : cumulativeCompliance.daysRemaining > 30 ? 'text-orange-600' : cumulativeCompliance.daysRemaining > 10 ? 'text-red-600' : 'text-red-700'}`,\n                                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                                    value: Math.max(0, cumulativeCompliance.daysRemaining)\n                                                                                }, void 0, false, {\n                                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                    lineNumber: 406,\n                                                                                    columnNumber: 31\n                                                                                }, this)\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 400,\n                                                                                columnNumber: 29\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                                className: `text-xs ${cumulativeCompliance.daysRemaining > 60 ? 'text-green-500' : cumulativeCompliance.daysRemaining > 30 ? 'text-orange-500' : cumulativeCompliance.daysRemaining > 10 ? 'text-red-500' : 'text-red-600'}`,\n                                                                                children: cumulativeCompliance.daysRemaining <= 0 ? 'Violated' : cumulativeCompliance.daysRemaining > 60 ? 'Safe' : cumulativeCompliance.daysRemaining > 30 ? 'Caution' : 'Warning'\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 408,\n                                                                                columnNumber: 29\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 399,\n                                                                        columnNumber: 27\n                                                                    }, this)\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 386,\n                                                                columnNumber: 25\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 385,\n                                                            columnNumber: 23\n                                                        }, this)\n                                                    ]\n                                                }, trip.id, true, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 310,\n                                                    columnNumber: 21\n                                                }, this);\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"tr\", {\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                        className: \"p-2\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"flex items-center justify-center gap-2 mb-2\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('country')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 431,\n                                                                        columnNumber: 23\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('dates')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 432,\n                                                                        columnNumber: 23\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('complete')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 433,\n                                                                        columnNumber: 23\n                                                                    }, this)\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 430,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: `rounded-lg p-4 min-w-[200px] ${getColumnStyle('country')}`,\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                                                    options: countryOptions,\n                                                                    value: selectedCountry,\n                                                                    onValueChange: setSelectedCountry,\n                                                                    placeholder: \"\\uD83C\\uDDEA\\uD83C\\uDDFA Select a Country\",\n                                                                    searchable: true,\n                                                                    className: \"w-full border-none\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 436,\n                                                                    columnNumber: 23\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 435,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 429,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                        className: \"p-2\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"flex items-center justify-center gap-2 mb-2\",\n                                                                children: [\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('country')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 450,\n                                                                        columnNumber: 23\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('dates')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 451,\n                                                                        columnNumber: 23\n                                                                    }, this),\n                                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: getProgressDotStyle('complete')\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 452,\n                                                                        columnNumber: 23\n                                                                    }, this)\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 449,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: `rounded-lg p-4 min-w-[220px] ${getColumnStyle('dates')}`,\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                                    onClick: handleOpenCalendar,\n                                                                    variant: \"ghost\",\n                                                                    disabled: !selectedCountry,\n                                                                    className: \"w-full h-auto p-4 flex items-center justify-center\",\n                                                                    children: selectedDateRange.startDate && selectedDateRange.endDate ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"flex flex-col items-center justify-center text-center\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                                                className: \"w-5 h-5 mb-2 text-blue-600\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 463,\n                                                                                columnNumber: 29\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                                className: \"font-semibold text-gray-800\",\n                                                                                children: [\n                                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(selectedDateRange.startDate, 'MMM dd'),\n                                                                                    \" - \",\n                                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(selectedDateRange.endDate, 'MMM dd')\n                                                                                ]\n                                                                            }, void 0, true, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 464,\n                                                                                columnNumber: 29\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 462,\n                                                                        columnNumber: 27\n                                                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"flex flex-col items-center justify-center gap-3\",\n                                                                        children: [\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                                                className: \"w-6 h-6 text-gray-400\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 470,\n                                                                                columnNumber: 29\n                                                                            }, this),\n                                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                                className: \"font-medium text-black\",\n                                                                                children: \"Select Travel Dates\"\n                                                                            }, void 0, false, {\n                                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                                lineNumber: 471,\n                                                                                columnNumber: 29\n                                                                            }, this)\n                                                                        ]\n                                                                    }, void 0, true, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 469,\n                                                                        columnNumber: 27\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 455,\n                                                                    columnNumber: 23\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 454,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 448,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                        className: \"p-2\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: `rounded-lg p-4 min-w-[120px] text-center ${getColumnStyle('complete')}`,\n                                                            children: currentTripDays > 0 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-xl font-bold text-gray-800\",\n                                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                    value: currentTripDays,\n                                                                    suffix: \" days\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 483,\n                                                                    columnNumber: 27\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 482,\n                                                                columnNumber: 25\n                                                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-2xl font-bold text-gray-400\",\n                                                                children: \"—\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 486,\n                                                                columnNumber: 25\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 480,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 479,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                        className: \"p-2\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: `rounded-lg p-4 min-w-[140px] text-center ${getColumnStyle('complete')}`,\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-xl font-bold text-gray-800\",\n                                                                children: calculationResult ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                    value: calculationResult.totalDaysUsed,\n                                                                    suffix: \" days\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 496,\n                                                                    columnNumber: 27\n                                                                }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                    className: \"text-2xl font-bold text-gray-400\",\n                                                                    children: \"—\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 498,\n                                                                    columnNumber: 27\n                                                                }, this)\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 494,\n                                                                columnNumber: 23\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 493,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 492,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"td\", {\n                                                        className: \"p-2\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"flex flex-col items-center justify-center min-w-[120px]\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {\n                                                                    value: calculationResult ? calculationResult.daysRemaining : remainingDays,\n                                                                    max: 90,\n                                                                    size: 80,\n                                                                    strokeWidth: 6,\n                                                                    progressColor: (calculationResult ? calculationResult.daysRemaining : remainingDays) > 60 ? \"#10b981\" : (calculationResult ? calculationResult.daysRemaining : remainingDays) > 30 ? \"#f59e0b\" : \"#ef4444\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 507,\n                                                                    columnNumber: 23\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-center mt-1\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                        className: \"text-xs font-medium text-gray-600\",\n                                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                            value: calculationResult ? calculationResult.daysRemaining : remainingDays\n                                                                        }, void 0, false, {\n                                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                            lineNumber: 520,\n                                                                            columnNumber: 27\n                                                                        }, this)\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 519,\n                                                                        columnNumber: 25\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 518,\n                                                                    columnNumber: 23\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 506,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 505,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 427,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 301,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                lineNumber: 291,\n                                columnNumber: 13\n                            }, this)\n                        }, void 0, false, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 290,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex items-center justify-center gap-4 mt-8\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    onClick: handleCalculate,\n                                    variant: \"outline\",\n                                    disabled: isCalculating || !selectedCountry || !selectedDateRange.startDate || !selectedDateRange.endDate,\n                                    className: `flex items-center gap-2 px-6 py-3 rounded-lg border-2 transition-all duration-200 ${selectedCountry && selectedDateRange.startDate && selectedDateRange.endDate ? 'border-primary hover:border-primary-600 hover:bg-primary-50 text-primary' : 'border-gray-300 hover:border-gray-400 text-gray-500'}`,\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: `w-5 h-5 rounded-full border-2 flex items-center justify-center ${selectedCountry && selectedDateRange.startDate && selectedDateRange.endDate ? 'border-primary' : 'border-gray-400'}`,\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                className: \"text-lg\",\n                                                children: \"+\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 547,\n                                                columnNumber: 17\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 542,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                            className: \"font-medium\",\n                                            children: isCalculating ? 'Adding Trip...' : trips.length > 0 ? 'Add Another Trip' : 'Add This Trip'\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 549,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 532,\n                                    columnNumber: 13\n                                }, this),\n                                trips.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                    variant: \"default\",\n                                    className: \"px-6 py-3 rounded-lg bg-primary hover:bg-primary-600 text-white font-medium shadow-schengen-button transition-all duration-200 hover:scale-105\",\n                                    children: \"Save Progress\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 555,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 531,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 289,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"tablet:hidden mb-8 space-y-6\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Card, {\n                            className: \"p-6 bg-white shadow-schengen-card border-0 rounded-2xl\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-lg font-semibold mb-4 text-center\",\n                                    children: \"Quick Status\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 569,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"grid grid-cols-3 gap-4 text-center\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-2xl font-bold text-primary mb-1\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                        value: currentTripDays\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 573,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 572,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-xs text-gray-600\",\n                                                    children: \"Current Trip\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 575,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 571,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-2xl font-bold text-calendar-warning mb-1\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                        value: totalDaysInPeriod\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 579,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 578,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-xs text-gray-600\",\n                                                    children: \"Days Used\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 581,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 577,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-2xl font-bold text-calendar-valid mb-1\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                        value: remainingDays\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 585,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 584,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-xs text-gray-600\",\n                                                    children: \"Remaining\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 587,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 583,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 570,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 568,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Card, {\n                            className: \"p-6 bg-white shadow-schengen-card border-0 rounded-2xl\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"space-y-6\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: `p-4 rounded-xl transition-all duration-300 ${currentFormStage === 'country' ? 'bg-primary-50 border-2 border-primary-300' : selectedCountry ? 'bg-green-50 border-2 border-green-300' : 'bg-gray-50 border-2 border-gray-200'}`,\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex items-center gap-3 mb-3\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: `w-8 h-8 rounded-full flex items-center justify-center ${currentFormStage === 'country' ? 'bg-primary text-white' : selectedCountry ? 'bg-calendar-valid text-white' : 'bg-gray-300 text-gray-600'}`,\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                className: \"text-sm font-bold\",\n                                                                children: \"1\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 607,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 602,\n                                                            columnNumber: 19\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                                            className: \"text-lg font-semibold\",\n                                                            children: \"Select Country\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 609,\n                                                            columnNumber: 19\n                                                        }, this),\n                                                        selectedCountry && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                            className: \"w-5 h-5 text-calendar-valid ml-auto\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 611,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 601,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Select, {\n                                                    options: countryOptions,\n                                                    value: selectedCountry,\n                                                    onValueChange: setSelectedCountry,\n                                                    placeholder: \"\\uD83C\\uDDEA\\uD83C\\uDDFA Choose a Schengen Country\",\n                                                    searchable: true,\n                                                    className: \"w-full\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 614,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 596,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: `p-4 rounded-xl transition-all duration-300 ${currentFormStage === 'dates' ? 'bg-primary-50 border-2 border-primary-300' : selectedDateRange.startDate && selectedDateRange.endDate ? 'bg-green-50 border-2 border-green-300' : selectedCountry ? 'bg-gray-50 border-2 border-gray-300' : 'bg-gray-50 border-2 border-gray-200'}`,\n                                            children: [\n                                                selectedDateRange.startDate && selectedDateRange.endDate && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex justify-end mb-2\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                        className: \"w-5 h-5 text-calendar-valid\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 633,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 632,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                    onClick: handleOpenCalendar,\n                                                    variant: \"ghost\",\n                                                    disabled: !selectedCountry,\n                                                    className: `w-full p-6 h-auto min-h-touch border-2 border-dashed transition-all duration-200 flex items-center justify-center ${!selectedCountry ? 'opacity-50 cursor-not-allowed border-gray-200' : currentFormStage === 'dates' ? 'border-primary-300 hover:border-primary-400' : 'border-gray-300 hover:border-gray-400'}`,\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"flex flex-col items-center justify-center text-center\",\n                                                        children: selectedDateRange.startDate && selectedDateRange.endDate ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"font-semibold text-black text-lg\",\n                                                                    children: [\n                                                                        (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(selectedDateRange.startDate, 'MMM dd, yyyy'),\n                                                                        \" → \",\n                                                                        (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(selectedDateRange.endDate, 'MMM dd, yyyy')\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 649,\n                                                                    columnNumber: 25\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-sm text-calendar-valid mt-1\",\n                                                                    children: [\n                                                                        currentTripDays,\n                                                                        \" days selected\"\n                                                                    ]\n                                                                }, void 0, true, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 652,\n                                                                    columnNumber: 25\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 648,\n                                                            columnNumber: 23\n                                                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"flex flex-col items-center justify-center\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                                                                    className: \"w-8 h-8 mb-3 text-gray-400\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 658,\n                                                                    columnNumber: 25\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                    className: \"font-medium text-black text-base\",\n                                                                    children: \"Select Travel Dates\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 659,\n                                                                    columnNumber: 25\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 657,\n                                                            columnNumber: 23\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 646,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 636,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 625,\n                                            columnNumber: 15\n                                        }, this),\n                                        currentFormStage === 'complete' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"p-4 rounded-xl bg-green-50 border-2 border-green-300 animate-fade-in\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex items-center gap-3 mb-4\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"w-8 h-8 rounded-full bg-calendar-valid text-white flex items-center justify-center\",\n                                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                                className: \"w-5 h-5\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 673,\n                                                                columnNumber: 23\n                                                            }, this)\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 672,\n                                                            columnNumber: 21\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                                            className: \"text-lg font-semibold\",\n                                                            children: \"Trip Summary\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 675,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 671,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"flex items-center justify-center mb-4\",\n                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CircularProgress, {\n                                                        value: remainingDays,\n                                                        max: 90,\n                                                        size: 100,\n                                                        strokeWidth: 8,\n                                                        progressColor: remainingDays > 60 ? \"#10b981\" : remainingDays > 30 ? \"#f59e0b\" : remainingDays > 10 ? \"#ef4444\" : \"#dc2626\",\n                                                        className: \"scale-105 shadow-lg\"\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 679,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 678,\n                                                    columnNumber: 19\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"grid grid-cols-2 gap-4 text-center\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"p-3 bg-white rounded-lg\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-lg font-bold text-calendar-warning\",\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                        value: totalDaysInPeriod,\n                                                                        suffix: \" days\"\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 697,\n                                                                        columnNumber: 25\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 696,\n                                                                    columnNumber: 23\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-xs text-gray-600\",\n                                                                    children: \"Used in 180 days\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 699,\n                                                                    columnNumber: 23\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 695,\n                                                            columnNumber: 21\n                                                        }, this),\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                            className: \"p-3 bg-white rounded-lg\",\n                                                            children: [\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: `text-lg font-bold ${remainingDays > 60 ? 'text-calendar-valid' : remainingDays > 30 ? 'text-calendar-warning' : 'text-red-600'}`,\n                                                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.AnimatedCounter, {\n                                                                        value: remainingDays,\n                                                                        suffix: \" days\"\n                                                                    }, void 0, false, {\n                                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                        lineNumber: 707,\n                                                                        columnNumber: 25\n                                                                    }, this)\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 702,\n                                                                    columnNumber: 23\n                                                                }, this),\n                                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                    className: \"text-xs text-gray-600\",\n                                                                    children: \"Remaining\"\n                                                                }, void 0, false, {\n                                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                    lineNumber: 709,\n                                                                    columnNumber: 23\n                                                                }, this)\n                                                            ]\n                                                        }, void 0, true, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 701,\n                                                            columnNumber: 21\n                                                        }, this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 694,\n                                                    columnNumber: 19\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 670,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 594,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex flex-col gap-3 mt-6\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                            onClick: handleCalculate,\n                                            disabled: isCalculating || !selectedCountry || !selectedDateRange.startDate || !selectedDateRange.endDate,\n                                            className: `w-full py-4 min-h-touch text-base font-medium transition-all duration-200 ${selectedCountry && selectedDateRange.startDate && selectedDateRange.endDate ? 'bg-primary hover:bg-primary-600 text-white shadow-schengen-button hover:scale-105' : 'bg-gray-200 text-gray-500 cursor-not-allowed'}`,\n                                            children: isCalculating ? 'Calculating...' : 'Add This Trip'\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 718,\n                                            columnNumber: 15\n                                        }, this),\n                                        (currentTripDays > 0 || trips.length > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                            variant: \"outline\",\n                                            className: \"w-full py-4 min-h-touch text-base font-medium border-2 border-primary-300 text-primary hover:bg-primary-50 transition-all duration-200\",\n                                            children: \"Save Progress\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 731,\n                                            columnNumber: 17\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 717,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 593,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 566,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"grid grid-cols-1 desktop:grid-cols-2 gap-6 mobile:gap-8\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Card, {\n                            className: \"bg-white shadow-schengen-card border-0 rounded-2xl\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CardHeader, {\n                                    className: \"flex flex-row items-center justify-between\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-xl font-semibold flex items-center gap-2\",\n                                                    children: [\n                                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                                            className: \"w-5 h-5 text-primary\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 749,\n                                                            columnNumber: 17\n                                                        }, this),\n                                                        \"Your Trips\",\n                                                        trips.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                            className: \"bg-primary/10 text-primary px-2 py-1 rounded-full text-xs font-medium\",\n                                                            children: trips.length\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 752,\n                                                            columnNumber: 19\n                                                        }, this)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 748,\n                                                    columnNumber: 15\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm text-muted-foreground\",\n                                                    children: \"Schengen area travel history\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 757,\n                                                    columnNumber: 15\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 747,\n                                            columnNumber: 13\n                                        }, this),\n                                        trips.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                            onClick: handleClearTrips,\n                                            variant: \"outline\",\n                                            size: \"sm\",\n                                            children: \"Clear All\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 762,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 746,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CardContent, {\n                                    children: trips.length === 0 ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-center py-8\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                                                className: \"w-12 h-12 text-muted-foreground/50 mx-auto mb-4\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 775,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                                className: \"font-medium mb-2\",\n                                                children: \"No trips added yet\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 776,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-sm text-muted-foreground\",\n                                                children: \"Use the calculator above to add your first trip\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 777,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 774,\n                                        columnNumber: 15\n                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"space-y-3\",\n                                        children: trips.map((trip)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"flex items-center justify-between p-3 bg-muted/50 rounded-lg\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"font-medium\",\n                                                                children: trip.country\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 789,\n                                                                columnNumber: 23\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-sm text-muted-foreground\",\n                                                                children: [\n                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(trip.startDate, 'MMM dd, yyyy'),\n                                                                    \" → \",\n                                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(trip.endDate, 'MMM dd, yyyy')\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 790,\n                                                                columnNumber: 23\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-xs text-muted-foreground\",\n                                                                children: [\n                                                                    trip.days,\n                                                                    \" days\"\n                                                                ]\n                                                            }, void 0, true, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 793,\n                                                                columnNumber: 23\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 788,\n                                                        columnNumber: 21\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n                                                        onClick: ()=>handleDeleteTrip(trip.id),\n                                                        variant: \"ghost\",\n                                                        size: \"sm\",\n                                                        className: \"text-red-600 hover:text-red-700 hover:bg-red-50\",\n                                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                            className: \"w-4 h-4\"\n                                                        }, void 0, false, {\n                                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                            lineNumber: 803,\n                                                            columnNumber: 23\n                                                        }, this)\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 797,\n                                                        columnNumber: 21\n                                                    }, this)\n                                                ]\n                                            }, trip.id, true, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 784,\n                                                columnNumber: 19\n                                            }, this))\n                                    }, void 0, false, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 782,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 772,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 745,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.Card, {\n                            className: \"bg-white shadow-schengen-card border-0 rounded-2xl\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CardHeader, {\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                            className: \"text-xl font-semibold flex items-center gap-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                                                    className: \"w-5 h-5 text-primary\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                    lineNumber: 816,\n                                                    columnNumber: 15\n                                                }, this),\n                                                \"Compliance Status\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 815,\n                                            columnNumber: 13\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-muted-foreground\",\n                                            children: \"90/180-day rule analysis\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                            lineNumber: 819,\n                                            columnNumber: 13\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 814,\n                                    columnNumber: 11\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CardContent, {\n                                    children: !calculationResult ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-center py-8\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                                                className: \"w-12 h-12 text-muted-foreground/50 mx-auto mb-4\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 827,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h4\", {\n                                                className: \"font-medium mb-2\",\n                                                children: \"No calculations yet\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 828,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-sm text-muted-foreground\",\n                                                children: \"Add a trip to see your compliance status\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 829,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 826,\n                                        columnNumber: 15\n                                    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"space-y-4\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: `p-4 rounded-lg border ${calculationResult.isCompliant ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`,\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"flex items-center gap-2 mb-2\",\n                                                        children: [\n                                                            calculationResult.isCompliant ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                                                                className: \"w-5 h-5 text-green-600\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 843,\n                                                                columnNumber: 23\n                                                            }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_barrel_optimize_names_AlertCircle_Calculator_Calendar_CheckCircle_Info_MapPin_XCircle_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                                                                className: \"w-5 h-5 text-red-600\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 845,\n                                                                columnNumber: 23\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                                className: `font-semibold ${calculationResult.isCompliant ? 'text-green-900' : 'text-red-900'}`,\n                                                                children: calculationResult.isCompliant ? 'Compliant' : 'Overstay Risk'\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 847,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 841,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                        className: `text-sm ${calculationResult.isCompliant ? 'text-green-800' : 'text-red-800'}`,\n                                                        children: calculationResult.isCompliant ? 'Your travel plans comply with the 90/180-day rule' : `You may exceed the 90-day limit by ${calculationResult.overstayDays} days`\n                                                    }, void 0, false, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 853,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 836,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"grid grid-cols-2 gap-4\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"text-center p-3 bg-muted/50 rounded-lg\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-2xl font-bold text-primary\",\n                                                                children: calculationResult.totalDaysUsed\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 866,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-xs text-muted-foreground\",\n                                                                children: \"Days Used\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 869,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 865,\n                                                        columnNumber: 19\n                                                    }, this),\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                        className: \"text-center p-3 bg-muted/50 rounded-lg\",\n                                                        children: [\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-2xl font-bold text-green-600\",\n                                                                children: calculationResult.daysRemaining\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 872,\n                                                                columnNumber: 21\n                                                            }, this),\n                                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                                className: \"text-xs text-muted-foreground\",\n                                                                children: \"Days Remaining\"\n                                                            }, void 0, false, {\n                                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                                lineNumber: 875,\n                                                                columnNumber: 21\n                                                            }, this)\n                                                        ]\n                                                    }, void 0, true, {\n                                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                        lineNumber: 871,\n                                                        columnNumber: 19\n                                                    }, this)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 864,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"text-xs text-muted-foreground\",\n                                                children: [\n                                                    \"Calculation period: \",\n                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(calculationResult.periodStart, 'MMM dd, yyyy'),\n                                                    \" - \",\n                                                    (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_8__.format)(calculationResult.periodEnd, 'MMM dd, yyyy')\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                                lineNumber: 879,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                        lineNumber: 834,\n                                        columnNumber: 15\n                                    }, this)\n                                }, void 0, false, {\n                                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                                    lineNumber: 824,\n                                    columnNumber: 11\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                            lineNumber: 813,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 743,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_schengen_ui__WEBPACK_IMPORTED_MODULE_3__.CalendarModal, {\n                    isOpen: isCalendarOpen,\n                    onClose: handleCloseCalendar,\n                    onDateRangeSelect: handleDateRangeSelect,\n                    initialRange: selectedDateRange\n                }, void 0, false, {\n                    fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n                    lineNumber: 889,\n                    columnNumber: 7\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n            lineNumber: 219,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/troysamuels/SCHENGEN VISA CALCULATOR/schengenvisacalculator/packages/app/src/app/page.tsx\",\n        lineNumber: 218,\n        columnNumber: 5\n    }, this);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/app/page.tsx\n");

/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/dynamic-access-async-storage.external":
/*!***************************************************************************************!*\
  !*** external "next/dist/server/app-render/dynamic-access-async-storage.external.js" ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/dynamic-access-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("module");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/is-bot":
/*!***********************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-bot" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-bot");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/date-fns","vendor-chunks/lucide-react","vendor-chunks/tailwind-merge","vendor-chunks/sonner","vendor-chunks/clsx","vendor-chunks/class-variance-authority"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.tsx&appDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Ftroysamuels%2FSCHENGEN%20VISA%20CALCULATOR%2Fschengenvisacalculator%2Fpackages%2Fapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();