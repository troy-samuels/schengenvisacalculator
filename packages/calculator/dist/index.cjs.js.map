{"version":3,"file":"index.cjs.js","sources":["../src/calculator/robust-schengen-calculator.ts","../src/validators/date-overlap-validator.ts","../src/data/countries.ts"],"sourcesContent":["import { differenceInDays, subDays, addDays, startOfDay, isValid, isLeapYear, format } from \"date-fns\"\n\nimport type {\n  Trip,\n  ComplianceResult,\n  DayBreakdown,\n  ValidationError,\n  RollingWindowCheck,\n  PlannedTripValidation,\n  TripValidationResult\n} from '../types'\n\n/**\n * Robust Schengen Calculator implementing exact 180-day rolling window rules\n * \n * Key Schengen Rules:\n * 1. Maximum 90 days in any 180-day period\n * 2. The 180-day period is ROLLING - calculated from any given date backward\n * 3. Entry and exit days both count as stay days\n * 4. Days must be calculated for EVERY day, not just trip endpoints\n */\nexport class RobustSchengenCalculator {\n  private static readonly MAX_DAYS_IN_PERIOD = 90\n  private static readonly ROLLING_PERIOD_DAYS = 180\n\n  /**\n   * Calculate compliance using exact rolling window algorithm\n   * This checks compliance for EVERY day in the period, not just trip endpoints\n   * Enhanced with edge case handling for leap years, timezones, and boundary conditions\n   */\n  static calculateExactCompliance(trips: Trip[], referenceDate: Date = new Date()): ComplianceResult {\n    try {\n      // Enhanced input validation\n      if (!Array.isArray(trips)) {\n        throw new Error('Trips must be an array')\n      }\n\n      if (!referenceDate || !isValid(referenceDate)) {\n        throw new Error('Reference date must be a valid Date object')\n      }\n\n      // Validate reference date is not in extreme future/past\n      const now = new Date()\n      const tenYearsAgo = subDays(now, 365 * 10)\n      const fiveYearsFromNow = addDays(now, 365 * 5)\n      \n      if (referenceDate < tenYearsAgo || referenceDate > fiveYearsFromNow) {\n        console.warn(`Reference date ${format(referenceDate, 'yyyy-MM-dd')} is outside reasonable range`)\n      }\n\n      // Normalize reference date to start of day (UTC-agnostic)\n      const normalizedRefDate = this.normalizeToStartOfDay(referenceDate)\n      const periodStart = this.calculatePeriodStart(normalizedRefDate)\n      \n      // Validate and normalize all trips\n      const validTrips = this.validateAndNormalizeTrips(trips)\n      \n      // Handle empty trips case\n      if (validTrips.length === 0) {\n        return {\n          totalDaysUsed: 0,\n          daysRemaining: this.MAX_DAYS_IN_PERIOD,\n          isCompliant: true,\n          overstayDays: 0,\n          referenceDate: normalizedRefDate,\n          periodStart,\n          periodEnd: normalizedRefDate,\n          detailedBreakdown: []\n        }\n      }\n      \n      // Create a map of all days with stays\n      const dailyStays = this.createDailyStayMap(validTrips, periodStart, normalizedRefDate)\n      \n      // Calculate rolling compliance for each day\n      const rollingChecks = this.calculateRollingComplianceForAllDays(\n        dailyStays,\n        periodStart,\n        normalizedRefDate\n      )\n      \n      // Validate rolling checks\n      if (rollingChecks.length === 0) {\n        throw new Error('Failed to generate rolling compliance checks')\n      }\n      \n      // Find the maximum violation and current status\n      const maxViolation = Math.max(...rollingChecks.map(check => check.overstayDays))\n      const currentCompliance = rollingChecks[rollingChecks.length - 1]\n      \n      if (!currentCompliance) {\n        throw new Error('Failed to get current compliance status')\n      }\n      \n      // Generate detailed breakdown\n      const detailedBreakdown = this.generateDetailedBreakdown(\n        dailyStays,\n        rollingChecks,\n        periodStart,\n        normalizedRefDate\n      )\n      \n      const result = {\n        totalDaysUsed: currentCompliance.daysInWindow,\n        daysRemaining: Math.max(0, this.MAX_DAYS_IN_PERIOD - currentCompliance.daysInWindow),\n        isCompliant: maxViolation === 0,\n        overstayDays: maxViolation,\n        referenceDate: normalizedRefDate,\n        periodStart,\n        periodEnd: normalizedRefDate,\n        detailedBreakdown\n      }\n\n      // Final validation of result\n      if (result.totalDaysUsed < 0 || result.daysRemaining < 0) {\n        console.error('Invalid calculation result:', result)\n        throw new Error('Calculation produced invalid negative values')\n      }\n\n      return result\n    } catch (error) {\n      console.error('Error in calculateExactCompliance:', error)\n      \n      // Return safe fallback\n      const normalizedRefDate = startOfDay(referenceDate)\n      return {\n        totalDaysUsed: 0,\n        daysRemaining: this.MAX_DAYS_IN_PERIOD,\n        isCompliant: true,\n        overstayDays: 0,\n        referenceDate: normalizedRefDate,\n        periodStart: subDays(normalizedRefDate, this.ROLLING_PERIOD_DAYS - 1),\n        periodEnd: normalizedRefDate,\n        detailedBreakdown: []\n      }\n    }\n  }\n\n  /**\n   * Calculate the exact number of days used in any 180-day window ending on a specific date\n   */\n  static calculateDaysInWindow(trips: Trip[], endDate: Date): number {\n    if (!isValid(endDate)) {\n      throw new Error('End date must be valid')\n    }\n    \n    const normalizedEndDate = this.normalizeToStartOfDay(endDate)\n    const windowStart = this.calculatePeriodStart(normalizedEndDate)\n    \n    let totalDays = 0\n    \n    for (const trip of trips) {\n      if (!isValid(trip.startDate) || !isValid(trip.endDate)) {\n        console.warn(`Skipping trip ${trip.id} with invalid dates`)\n        continue\n      }\n      \n      const tripStart = this.normalizeToStartOfDay(trip.startDate)\n      const tripEnd = this.normalizeToStartOfDay(trip.endDate)\n      \n      // Calculate overlap with the window (inclusive of both start and end)\n      const overlapStart = tripStart > windowStart ? tripStart : windowStart\n      const overlapEnd = tripEnd < normalizedEndDate ? tripEnd : normalizedEndDate\n      \n      if (overlapStart <= overlapEnd) {\n        // Both start and end days count, so we add 1\n        const daysInOverlap = differenceInDays(overlapEnd, overlapStart) + 1\n        \n        // Validate the calculated days\n        if (daysInOverlap < 0) {\n          console.error(`Negative days calculated for trip ${trip.id}`)\n          continue\n        }\n        \n        totalDays += daysInOverlap\n      }\n    }\n    \n    return totalDays\n  }\n\n  /**\n   * Check if a planned trip would violate the 90/180 rule\n   */\n  static validatePlannedTrip(\n    existingTrips: Trip[],\n    plannedTrip: Trip\n  ): PlannedTripValidation {\n    const allTrips = [...existingTrips, plannedTrip]\n    \n    // Check compliance for every day of the planned trip\n    let currentDate = startOfDay(plannedTrip.startDate)\n    const endDate = startOfDay(plannedTrip.endDate)\n    \n    let maxViolation = 0\n    let violationDate: Date | null = null\n    \n    while (currentDate <= endDate) {\n      const daysInWindow = this.calculateDaysInWindow(allTrips, currentDate)\n      const overstay = Math.max(0, daysInWindow - this.MAX_DAYS_IN_PERIOD)\n      \n      if (overstay > maxViolation) {\n        maxViolation = overstay\n        violationDate = new Date(currentDate)\n      }\n      \n      currentDate = addDays(currentDate, 1)\n    }\n    \n    return {\n      isValid: maxViolation === 0,\n      violationDays: maxViolation,\n      violationDate\n    }\n  }\n\n  /**\n   * Find the latest date when a trip of specified length could start without violation\n   */\n  static findLatestValidStartDate(\n    existingTrips: Trip[],\n    tripLength: number,\n    earliestStart: Date,\n    latestStart: Date\n  ): Date | null {\n    let testDate = startOfDay(latestStart)\n    const minDate = startOfDay(earliestStart)\n    \n    while (testDate >= minDate) {\n      const testTrip: Trip = {\n        id: 'test',\n        country: 'TEST',\n        startDate: testDate,\n        endDate: addDays(testDate, tripLength - 1),\n        days: tripLength\n      }\n      \n      const validation = this.validatePlannedTrip(existingTrips, testTrip)\n      if (validation.isValid) {\n        return testDate\n      }\n      \n      testDate = subDays(testDate, 1)\n    }\n    \n    return null\n  }\n\n  /**\n   * Calculate maximum consecutive days available from a start date\n   */\n  static calculateMaxConsecutiveDays(existingTrips: Trip[], startDate: Date): number {\n    let maxDays = 0\n    let testLength = 1\n    const maxTestLength = 100 // Safety limit\n    \n    while (testLength <= maxTestLength) {\n      const testTrip: Trip = {\n        id: 'test',\n        country: 'TEST',\n        startDate: startOfDay(startDate),\n        endDate: addDays(startOfDay(startDate), testLength - 1),\n        days: testLength\n      }\n      \n      const validation = this.validatePlannedTrip(existingTrips, testTrip)\n      if (validation.isValid) {\n        maxDays = testLength\n        testLength++\n      } else {\n        break\n      }\n    }\n    \n    return Math.min(maxDays, this.MAX_DAYS_IN_PERIOD)\n  }\n\n  /**\n   * Comprehensive trip validation\n   */\n  static validateTrips(trips: Trip[]): TripValidationResult {\n    const errors: ValidationError[] = []\n    const warnings: ValidationError[] = []\n    const seenIds = new Set<string>()\n\n    trips.forEach((trip, index) => {\n      // Check for duplicate IDs\n      if (seenIds.has(trip.id)) {\n        errors.push({\n          field: 'id',\n          message: `Duplicate trip ID: ${trip.id}`,\n          severity: 'ERROR',\n          tripId: trip.id\n        })\n      }\n      seenIds.add(trip.id)\n\n      // Required fields\n      if (!trip.id || trip.id.trim() === '') {\n        errors.push({\n          field: 'id',\n          message: `Trip at index ${index} is missing an ID`,\n          severity: 'ERROR'\n        })\n      }\n\n      if (!trip.country || trip.country.trim() === '') {\n        errors.push({\n          field: 'country',\n          message: 'Country is required',\n          severity: 'ERROR',\n          tripId: trip.id\n        })\n      }\n\n      if (!trip.startDate) {\n        errors.push({\n          field: 'startDate',\n          message: 'Start date is required',\n          severity: 'ERROR',\n          tripId: trip.id\n        })\n      }\n\n      if (!trip.endDate) {\n        errors.push({\n          field: 'endDate',\n          message: 'End date is required',\n          severity: 'ERROR',\n          tripId: trip.id\n        })\n      }\n\n      // Date validation\n      if (trip.startDate && trip.endDate) {\n        if (trip.startDate > trip.endDate) {\n          errors.push({\n            field: 'dates',\n            message: 'Start date must be before or equal to end date',\n            severity: 'ERROR',\n            tripId: trip.id\n          })\n        }\n\n        const duration = differenceInDays(trip.endDate, trip.startDate) + 1\n        \n        if (duration > this.MAX_DAYS_IN_PERIOD) {\n          errors.push({\n            field: 'duration',\n            message: `Trip duration (${duration} days) exceeds maximum allowed consecutive stay (${this.MAX_DAYS_IN_PERIOD} days)`,\n            severity: 'ERROR',\n            tripId: trip.id\n          })\n        }\n\n        if (duration < 1) {\n          errors.push({\n            field: 'duration',\n            message: 'Trip must be at least 1 day long',\n            severity: 'ERROR',\n            tripId: trip.id\n          })\n        }\n\n        // Check for unreasonable dates\n        const now = new Date()\n        const tenYearsAgo = subDays(now, 365 * 10)\n        const fiveYearsFromNow = addDays(now, 365 * 5)\n\n        if (trip.startDate < tenYearsAgo) {\n          warnings.push({\n            field: 'startDate',\n            message: 'Start date seems unreasonably far in the past',\n            severity: 'WARNING',\n            tripId: trip.id\n          })\n        }\n\n        if (trip.endDate > fiveYearsFromNow) {\n          warnings.push({\n            field: 'endDate',\n            message: 'End date seems unreasonably far in the future',\n            severity: 'WARNING',\n            tripId: trip.id\n          })\n        }\n\n        // Check for consistency with days field\n        if (trip.days && Math.abs(trip.days - duration) > 0) {\n          warnings.push({\n            field: 'days',\n            message: `Days field (${trip.days}) doesn't match calculated duration (${duration})`,\n            severity: 'WARNING',\n            tripId: trip.id\n          })\n        }\n      }\n    })\n\n    // Check for overlapping trips (same dates)\n    for (let i = 0; i < trips.length; i++) {\n      for (let j = i + 1; j < trips.length; j++) {\n        const trip1 = trips[i]\n        const trip2 = trips[j]\n        \n        if (!trip1.startDate || !trip1.endDate || !trip2.startDate || !trip2.endDate) continue\n\n        // Check if trips overlap\n        const overlap = !(trip1.endDate < trip2.startDate || trip2.endDate < trip1.startDate)\n        \n        if (overlap) {\n          warnings.push({\n            field: 'dates',\n            message: `Trip ${trip1.id} overlaps with trip ${trip2.id}. This may be intentional for same-day travel between countries.`,\n            severity: 'WARNING',\n            tripId: trip1.id\n          })\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    }\n  }\n\n  /**\n   * Get next date when days will \"roll off\" the window\n   */\n  static getNextResetDate(trips: Trip[], referenceDate: Date = new Date()): Date | null {\n    const normalizedRefDate = startOfDay(referenceDate)\n    const currentWindow = subDays(normalizedRefDate, this.ROLLING_PERIOD_DAYS - 1)\n    \n    // Find the earliest trip day that affects the current window\n    let earliestRelevantDate: Date | null = null\n    \n    for (const trip of trips) {\n      let checkDate = startOfDay(trip.startDate)\n      const endDate = startOfDay(trip.endDate)\n      \n      while (checkDate <= endDate) {\n        if (checkDate >= currentWindow && checkDate <= normalizedRefDate) {\n          if (!earliestRelevantDate || checkDate < earliestRelevantDate) {\n            earliestRelevantDate = checkDate\n          }\n        }\n        checkDate = addDays(checkDate, 1)\n      }\n    }\n    \n    if (!earliestRelevantDate) return null\n    \n    // The reset date is 180 days after the earliest relevant date\n    return addDays(earliestRelevantDate, this.ROLLING_PERIOD_DAYS)\n  }\n\n  /**\n   * Debug function to visualize rolling window calculations\n   */\n  static debugRollingWindow(trips: Trip[], referenceDate: Date): any {\n    const result = this.calculateExactCompliance(trips, referenceDate)\n    \n    return {\n      summary: {\n        totalDaysUsed: result.totalDaysUsed,\n        daysRemaining: result.daysRemaining,\n        isCompliant: result.isCompliant,\n        overstayDays: result.overstayDays,\n        periodStart: result.periodStart,\n        periodEnd: result.periodEnd\n      },\n      tripsInPeriod: trips.filter(trip => \n        trip.endDate >= result.periodStart && trip.startDate <= result.periodEnd\n      ),\n      dailyBreakdown: result.detailedBreakdown.filter(day => day.daysUsedOnDate > 0),\n      violations: result.detailedBreakdown.filter(day => day.isViolation),\n      nextResetDate: this.getNextResetDate(trips, referenceDate)\n    }\n  }\n\n  /**\n   * Validate and normalize trip data with error handling\n   */\n  private static validateAndNormalizeTrips(trips: Trip[]): Trip[] {\n    // Run validation but proceed with filtering\n    const validationResult = this.validateTrips(trips)\n    const criticalErrors = validationResult.errors\n    \n    if (criticalErrors.length > 0) {\n      console.warn('Critical validation errors found:', criticalErrors)\n    }\n\n    return trips\n      .filter(trip => {\n        // Only include trips that pass basic validation\n        if (!trip.startDate || !trip.endDate || !trip.country) return false\n        \n        // Enhanced date validation\n        if (!isValid(trip.startDate) || !isValid(trip.endDate)) {\n          console.warn(`Trip ${trip.id} has invalid dates`)\n          return false\n        }\n        \n        if (trip.startDate > trip.endDate) return false\n        \n        // Filter out trips with excessive duration\n        const duration = differenceInDays(trip.endDate, trip.startDate) + 1\n        if (duration > this.MAX_DAYS_IN_PERIOD) return false\n        \n        // Filter out trips with unreasonable dates\n        const now = new Date()\n        const veryOld = subDays(now, 365 * 20) // 20 years ago\n        const veryFuture = addDays(now, 365 * 10) // 10 years in future\n        \n        if (trip.endDate < veryOld || trip.startDate > veryFuture) {\n          console.warn(`Trip ${trip.id} has unreasonable dates`)\n          return false\n        }\n        \n        return true\n      })\n      .map(trip => {\n        try {\n          const normalizedTrip = {\n            ...trip,\n            startDate: this.normalizeToStartOfDay(trip.startDate),\n            endDate: this.normalizeToStartOfDay(trip.endDate),\n            days: differenceInDays(trip.endDate, trip.startDate) + 1\n          }\n          \n          // Validate normalized dates\n          if (!isValid(normalizedTrip.startDate) || !isValid(normalizedTrip.endDate)) {\n            console.error(`Invalid dates after normalization for trip ${trip.id}`)\n            return null\n          }\n          \n          // Check for leap year edge cases in trip duration\n          const hasLeapDay = this.tripCrossesLeapDay(normalizedTrip.startDate, normalizedTrip.endDate)\n          if (hasLeapDay) {\n            console.debug(`Trip ${trip.id} crosses leap day`)\n          }\n          \n          return normalizedTrip\n        } catch (error) {\n          console.error(`Error normalizing trip ${trip.id}:`, error)\n          return null\n        }\n      })\n      .filter((trip): trip is Trip => trip !== null)\n      .sort((a, b) => a.startDate.getTime() - b.startDate.getTime())\n  }\n\n  /**\n   * Create a map of daily stays for efficient lookup\n   */\n  private static createDailyStayMap(\n    trips: Trip[],\n    periodStart: Date,\n    periodEnd: Date\n  ): Map<string, string[]> {\n    const dailyStays = new Map<string, string[]>()\n    \n    for (const trip of trips) {\n      // Only consider trips that overlap with our period\n      if (trip.endDate < periodStart || trip.startDate > periodEnd) continue\n      \n      // Calculate the actual overlap\n      const overlapStart = trip.startDate > periodStart ? trip.startDate : periodStart\n      const overlapEnd = trip.endDate < periodEnd ? trip.endDate : periodEnd\n      \n      // Add each day of the trip\n      let currentDate = new Date(overlapStart)\n      while (currentDate <= overlapEnd) {\n        const dateKey = currentDate.toISOString().split('T')[0]\n        \n        if (!dailyStays.has(dateKey)) {\n          dailyStays.set(dateKey, [])\n        }\n        dailyStays.get(dateKey)!.push(trip.id)\n        \n        currentDate = addDays(currentDate, 1)\n      }\n    }\n    \n    return dailyStays\n  }\n\n  /**\n   * Calculate rolling compliance check for every day in the period\n   */\n  private static calculateRollingComplianceForAllDays(\n    dailyStays: Map<string, string[]>,\n    periodStart: Date,\n    periodEnd: Date\n  ): RollingWindowCheck[] {\n    const checks: RollingWindowCheck[] = []\n    \n    let currentDate = new Date(periodStart)\n    while (currentDate <= periodEnd) {\n      const windowStart = subDays(currentDate, this.ROLLING_PERIOD_DAYS - 1)\n      const windowEnd = new Date(currentDate)\n      \n      // Count days in this 180-day window\n      let daysInWindow = 0\n      let checkDate = new Date(windowStart)\n      \n      while (checkDate <= windowEnd) {\n        const dateKey = checkDate.toISOString().split('T')[0]\n        if (dailyStays.has(dateKey)) {\n          daysInWindow++\n        }\n        checkDate = addDays(checkDate, 1)\n      }\n      \n      const overstayDays = Math.max(0, daysInWindow - this.MAX_DAYS_IN_PERIOD)\n      \n      checks.push({\n        date: new Date(currentDate),\n        windowStart: new Date(windowStart),\n        windowEnd: new Date(windowEnd),\n        daysInWindow,\n        isCompliant: overstayDays === 0,\n        overstayDays\n      })\n      \n      currentDate = addDays(currentDate, 1)\n    }\n    \n    return checks\n  }\n\n  /**\n   * Generate detailed day-by-day breakdown\n   */\n  private static generateDetailedBreakdown(\n    dailyStays: Map<string, string[]>,\n    rollingChecks: RollingWindowCheck[],\n    periodStart: Date,\n    periodEnd: Date\n  ): DayBreakdown[] {\n    const breakdown: DayBreakdown[] = []\n    \n    let currentDate = new Date(periodStart)\n    let checkIndex = 0\n    \n    while (currentDate <= periodEnd) {\n      const dateKey = currentDate.toISOString().split('T')[0]\n      const staysOnDate = dailyStays.get(dateKey) || []\n      const daysUsedOnDate = staysOnDate.length > 0 ? 1 : 0\n      \n      const rollingCheck = rollingChecks[checkIndex]\n      \n      breakdown.push({\n        date: new Date(currentDate),\n        daysUsedOnDate,\n        cumulativeDaysInWindow: rollingCheck.daysInWindow,\n        isViolation: !rollingCheck.isCompliant,\n        contributingTrips: staysOnDate\n      })\n      \n      currentDate = addDays(currentDate, 1)\n      checkIndex++\n    }\n    \n    return breakdown\n  }\n\n  /**\n   * Enhanced date normalization with timezone-agnostic handling\n   */\n  private static normalizeToStartOfDay(date: Date): Date {\n    // Use startOfDay but ensure we're working with local time consistently\n    const normalized = startOfDay(date)\n    \n    // Additional validation for edge cases\n    if (!isValid(normalized)) {\n      throw new Error(`Failed to normalize date: ${date}`)\n    }\n    \n    return normalized\n  }\n\n  /**\n   * Calculate period start with leap year awareness\n   */\n  private static calculatePeriodStart(referenceDate: Date): Date {\n    // Standard 180-day window calculation\n    const periodStart = subDays(referenceDate, this.ROLLING_PERIOD_DAYS - 1)\n    \n    // Validate the calculated period start\n    if (!isValid(periodStart)) {\n      throw new Error(`Invalid period start calculated from reference date: ${format(referenceDate, 'yyyy-MM-dd')}`)\n    }\n    \n    // Check if we're crossing leap year boundaries and log for awareness\n    const refYear = referenceDate.getFullYear()\n    const startYear = periodStart.getFullYear()\n    \n    if (refYear !== startYear) {\n      const crossesLeapYear = isLeapYear(refYear) || isLeapYear(startYear)\n      if (crossesLeapYear) {\n        console.debug(`180-day window crosses leap year boundary: ${startYear}-${refYear}`)\n      }\n    }\n    \n    return periodStart\n  }\n\n  /**\n   * Check if a trip crosses February 29th in a leap year\n   */\n  private static tripCrossesLeapDay(startDate: Date, endDate: Date): boolean {\n    const startYear = startDate.getFullYear()\n    const endYear = endDate.getFullYear()\n    \n    // Check each year the trip spans\n    for (let year = startYear; year <= endYear; year++) {\n      if (isLeapYear(year)) {\n        const leapDay = new Date(year, 1, 29) // February 29th\n        if (leapDay >= startDate && leapDay <= endDate) {\n          return true\n        }\n      }\n    }\n    \n    return false\n  }\n}","import { isValid, startOfDay, endOfDay, areIntervalsOverlapping, differenceInDays } from \"date-fns\"\nimport type { Trip, ValidationError } from '../types'\n\nexport interface DateRange {\n  start: Date\n  end: Date\n}\n\nexport interface ValidationResult {\n  isValid: boolean\n  conflicts: ConflictDetail[]\n  message: string\n  occupiedDates: Date[]\n}\n\nexport interface ConflictDetail {\n  tripId: string\n  tripCountry: string\n  conflictStart: Date\n  conflictEnd: Date\n  overlapDays: number\n}\n\nexport interface OverlapPreventionConfig {\n  allowSameDayTravel: boolean\n  allowBorderTransitions: boolean\n  strictMode: boolean\n}\n\n/**\n * Date Overlap Validator - Prevents selection of already occupied dates\n * \n * Core Features:\n * 1. Detects date conflicts between new and existing trips\n * 2. Provides visual indicators for occupied dates (grey + strikethrough)\n * 3. Returns specific conflict details for user feedback\n * 4. Handles edge cases: same-day travel, border transitions\n * 5. Mobile-optimized with larger touch targets\n */\nexport class DateOverlapValidator {\n  private config: OverlapPreventionConfig\n\n  constructor(config: Partial<OverlapPreventionConfig> = {}) {\n    this.config = {\n      allowSameDayTravel: true,\n      allowBorderTransitions: true,\n      strictMode: false,\n      ...config\n    }\n  }\n\n  /**\n   * Validate if a date range conflicts with existing trips (alias for validateDateSpan)\n   */\n  validateDateRange(newRange: DateRange, existingTrips: Trip[]): ValidationResult {\n    return this.validateDateSpan(newRange, existingTrips)\n  }\n\n  /**\n   * Validate if a date range conflicts with existing trips\n   */\n  validateDateSpan(newRange: DateRange, existingTrips: Trip[]): ValidationResult {\n    // Input validation\n    if (!this.isValidDateRange(newRange)) {\n      return {\n        isValid: false,\n        conflicts: [],\n        message: 'Invalid date range provided',\n        occupiedDates: []\n      }\n    }\n\n    // Normalize dates to start/end of day for consistent comparison\n    const normalizedNewRange = {\n      start: startOfDay(newRange.start),\n      end: endOfDay(newRange.end)\n    }\n\n    const conflicts: ConflictDetail[] = []\n    const occupiedDates: Date[] = []\n\n    // Check each existing trip for conflicts\n    for (const trip of existingTrips) {\n      if (!this.isValidTrip(trip)) continue\n\n      const tripRange = {\n        start: startOfDay(trip.startDate),\n        end: endOfDay(trip.endDate)\n      }\n\n      // Check for overlap\n      const hasOverlap = this.rangesOverlap(normalizedNewRange, tripRange)\n      \n      if (hasOverlap) {\n        const conflictDetail = this.calculateConflictDetail(\n          normalizedNewRange,\n          tripRange,\n          trip\n        )\n\n        // Apply configuration rules\n        if (this.shouldReportConflict(conflictDetail, normalizedNewRange, tripRange)) {\n          conflicts.push(conflictDetail)\n        }\n\n        // Add occupied dates for visual indicators\n        this.addOccupiedDatesFromTrip(trip, occupiedDates)\n      }\n    }\n\n    // Get all occupied dates for calendar marking (regardless of conflicts)\n    const allOccupiedDates = this.getAllOccupiedDates(existingTrips)\n\n    return {\n      isValid: conflicts.length === 0,\n      conflicts,\n      message: this.generateValidationMessage(conflicts),\n      occupiedDates: allOccupiedDates\n    }\n  }\n\n  /**\n   * Get all occupied dates from existing trips for calendar display\n   */\n  getAllOccupiedDates(trips: Trip[]): Date[] {\n    const occupiedDates: Date[] = []\n\n    for (const trip of trips) {\n      if (!this.isValidTrip(trip)) continue\n      this.addOccupiedDatesFromTrip(trip, occupiedDates)\n    }\n\n    // Remove duplicates and sort\n    return [...new Set(occupiedDates.map(d => d.getTime()))]\n      .map(time => new Date(time))\n      .sort((a, b) => a.getTime() - b.getTime())\n  }\n\n  /**\n   * Check if a specific date is occupied by existing trips\n   */\n  isDateOccupied(date: Date, existingTrips: Trip[]): boolean {\n    const normalizedDate = startOfDay(date)\n    \n    return existingTrips.some(trip => {\n      if (!this.isValidTrip(trip)) return false\n      \n      const tripStart = startOfDay(trip.startDate)\n      const tripEnd = startOfDay(trip.endDate)\n      \n      return normalizedDate >= tripStart && normalizedDate <= tripEnd\n    })\n  }\n\n  /**\n   * Get trips that occupy a specific date\n   */\n  getTripsOnDate(date: Date, existingTrips: Trip[]): Trip[] {\n    const normalizedDate = startOfDay(date)\n    \n    return existingTrips.filter(trip => {\n      if (!this.isValidTrip(trip)) return false\n      \n      const tripStart = startOfDay(trip.startDate)\n      const tripEnd = startOfDay(trip.endDate)\n      \n      return normalizedDate >= tripStart && normalizedDate <= tripEnd\n    })\n  }\n\n  /**\n   * Find next available date range of specified length\n   */\n  findNextAvailableDateSpan(\n    preferredStart: Date,\n    lengthInDays: number,\n    existingTrips: Trip[],\n    searchLimit: number = 365\n  ): DateRange | null {\n    let testDate = startOfDay(preferredStart)\n    const maxSearchDate = new Date(testDate.getTime() + (searchLimit * 24 * 60 * 60 * 1000))\n\n    while (testDate <= maxSearchDate) {\n      const testRange: DateRange = {\n        start: testDate,\n        end: new Date(testDate.getTime() + ((lengthInDays - 1) * 24 * 60 * 60 * 1000))\n      }\n\n      const validation = this.validateDateSpan(testRange, existingTrips)\n      if (validation.isValid) {\n        return testRange\n      }\n\n      // Move to next day\n      testDate = new Date(testDate.getTime() + (24 * 60 * 60 * 1000))\n    }\n\n    return null\n  }\n\n  /**\n   * Suggest alternative dates when conflicts exist\n   */\n  suggestAlternativeDates(\n    conflictedRange: DateRange,\n    lengthInDays: number,\n    existingTrips: Trip[]\n  ): DateRange[] {\n    const suggestions: DateRange[] = []\n    const duration = lengthInDays || differenceInDays(conflictedRange.end, conflictedRange.start) + 1\n\n    // Try earlier dates\n    const earlierDate = new Date(conflictedRange.start.getTime() - (30 * 24 * 60 * 60 * 1000))\n    const earlierRange = this.findNextAvailableDateSpan(earlierDate, duration, existingTrips, 60)\n    if (earlierRange && earlierRange.start < conflictedRange.start) {\n      suggestions.push(earlierRange)\n    }\n\n    // Try later dates\n    const laterDate = new Date(conflictedRange.end.getTime() + (24 * 60 * 60 * 1000))\n    const laterRange = this.findNextAvailableDateSpan(laterDate, duration, existingTrips, 60)\n    if (laterRange) {\n      suggestions.push(laterRange)\n    }\n\n    return suggestions.slice(0, 3) // Return max 3 suggestions\n  }\n\n  /**\n   * Batch validation for multiple date ranges\n   */\n  validateMultipleDateSpans(\n    newRanges: DateRange[],\n    existingTrips: Trip[]\n  ): { [index: number]: ValidationResult } {\n    const results: { [index: number]: ValidationResult } = {}\n\n    // Create a combined list of existing trips plus validated new trips\n    let combinedTrips = [...existingTrips]\n\n    newRanges.forEach((range, index) => {\n      // Validate against existing trips and previously validated new trips\n      const result = this.validateDateSpan(range, combinedTrips)\n      results[index] = result\n\n      // If valid, add to combined trips for next validations\n      if (result.isValid) {\n        combinedTrips.push({\n          id: `temp-${index}`,\n          country: 'TEMP',\n          startDate: range.start,\n          endDate: range.end,\n          days: differenceInDays(range.end, range.start) + 1\n        })\n      }\n    })\n\n    return results\n  }\n\n  /**\n   * Private: Check if two date ranges overlap\n   */\n  private rangesOverlap(range1: DateRange, range2: DateRange): boolean {\n    return areIntervalsOverlapping(\n      { start: range1.start, end: range1.end },\n      { start: range2.start, end: range2.end }\n    )\n  }\n\n  /**\n   * Private: Calculate detailed conflict information\n   */\n  private calculateConflictDetail(\n    newRange: DateRange,\n    tripRange: DateRange,\n    trip: Trip\n  ): ConflictDetail {\n    // Calculate the actual overlap period\n    const conflictStart = newRange.start > tripRange.start ? newRange.start : tripRange.start\n    const conflictEnd = newRange.end < tripRange.end ? newRange.end : tripRange.end\n    const overlapDays = differenceInDays(conflictEnd, conflictStart) + 1\n\n    return {\n      tripId: trip.id,\n      tripCountry: trip.country,\n      conflictStart,\n      conflictEnd,\n      overlapDays: Math.max(0, overlapDays)\n    }\n  }\n\n  /**\n   * Private: Determine if conflict should be reported based on configuration\n   */\n  private shouldReportConflict(\n    conflict: ConflictDetail,\n    newRange: DateRange,\n    tripRange: DateRange\n  ): boolean {\n    // In strict mode, report all conflicts\n    if (this.config.strictMode) return true\n\n    // Same-day travel exception\n    if (this.config.allowSameDayTravel) {\n      const isSameDayTransition = \n        (newRange.start.getTime() === tripRange.end.getTime()) ||\n        (newRange.end.getTime() === tripRange.start.getTime())\n      \n      if (isSameDayTransition) return false\n    }\n\n    // Border transition exception\n    if (this.config.allowBorderTransitions && conflict.overlapDays <= 1) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Private: Add occupied dates from a trip to the occupied dates array\n   */\n  private addOccupiedDatesFromTrip(trip: Trip, occupiedDates: Date[]): void {\n    const start = startOfDay(trip.startDate)\n    const end = startOfDay(trip.endDate)\n    \n    let currentDate = new Date(start)\n    while (currentDate <= end) {\n      occupiedDates.push(new Date(currentDate))\n      currentDate = new Date(currentDate.getTime() + (24 * 60 * 60 * 1000))\n    }\n  }\n\n  /**\n   * Private: Generate human-readable validation message\n   */\n  private generateValidationMessage(conflicts: ConflictDetail[]): string {\n    if (conflicts.length === 0) {\n      return 'Dates are available'\n    }\n\n    if (conflicts.length === 1) {\n      const conflict = conflicts[0]\n      return `Dates overlap with existing trip to ${conflict.tripCountry} (${conflict.overlapDays} day${conflict.overlapDays !== 1 ? 's' : ''})`\n    }\n\n    return `Dates conflict with ${conflicts.length} existing trips`\n  }\n\n  /**\n   * Private: Validate date range input\n   */\n  private isValidDateRange(range: DateRange): boolean {\n    if (!range || !range.start || !range.end) return false\n    if (!isValid(range.start) || !isValid(range.end)) return false\n    if (range.start > range.end) return false\n    return true\n  }\n\n  /**\n   * Private: Validate trip data\n   */\n  private isValidTrip(trip: Trip): boolean {\n    if (!trip || !trip.startDate || !trip.endDate) return false\n    if (!isValid(trip.startDate) || !isValid(trip.endDate)) return false\n    if (trip.startDate > trip.endDate) return false\n    return true\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<OverlapPreventionConfig>): void {\n    this.config = { ...this.config, ...newConfig }\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): OverlapPreventionConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * Find the next available date range starting from a preferred date\n   */\n  findNextAvailableDateRange(\n    preferredStart: Date,\n    lengthInDays: number,\n    existingTrips: Trip[],\n    searchLimitDays: number = 365\n  ): DateRange | null {\n    const searchLimit = new Date(preferredStart.getTime() + searchLimitDays * 24 * 60 * 60 * 1000)\n    \n    for (let searchDate = new Date(preferredStart); searchDate <= searchLimit; searchDate.setDate(searchDate.getDate() + 1)) {\n      const proposedRange: DateRange = {\n        start: new Date(searchDate),\n        end: new Date(searchDate.getTime() + (lengthInDays - 1) * 24 * 60 * 60 * 1000)\n      }\n      \n      const validation = this.validateDateRange(proposedRange, existingTrips)\n      if (validation.isValid) {\n        return proposedRange\n      }\n    }\n    \n    return null\n  }\n\n  /**\n   * Validate multiple date ranges at once\n   */\n  validateMultipleDateRanges(\n    dateRanges: DateRange[],\n    existingTrips: Trip[]\n  ): { [index: number]: ValidationResult } {\n    const results: { [index: number]: ValidationResult } = {}\n    const allProposedTrips: Trip[] = [...existingTrips]\n    \n    dateRanges.forEach((range, index) => {\n      const validation = this.validateDateRange(range, allProposedTrips)\n      results[index] = validation\n      \n      // If this range is valid, add it to the list for subsequent validations\n      if (validation.isValid) {\n        allProposedTrips.push({\n          id: `temp-${index}`,\n          country: `temp-${index}`,\n          startDate: range.start,\n          endDate: range.end,\n          days: Math.ceil((range.end.getTime() - range.start.getTime()) / (1000 * 60 * 60 * 24)) + 1\n        })\n      }\n    })\n    \n    return results\n  }\n}","/**\n * Schengen Area Countries Data\n * Complete list of all 27 Schengen countries with flags and metadata\n * Updated as of 2024 - includes all current member states\n */\n\nexport interface SchengenCountry {\n  code: string\n  name: string\n  flag: string\n  joinedSchengen: string\n  isEUMember: boolean\n  capital: string\n  timezone: string\n  currency: string\n}\n\nexport const SCHENGEN_COUNTRIES: SchengenCountry[] = [\n  {\n    code: 'AT',\n    name: 'Austria',\n    flag: '🇦🇹',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Vienna',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'BE',\n    name: 'Belgium',\n    flag: '🇧🇪',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Brussels',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'BG',\n    name: 'Bulgaria',\n    flag: '🇧🇬',\n    joinedSchengen: '2024',\n    isEUMember: true,\n    capital: 'Sofia',\n    timezone: 'EET',\n    currency: 'BGN'\n  },\n  {\n    code: 'HR',\n    name: 'Croatia',\n    flag: '🇭🇷',\n    joinedSchengen: '2023',\n    isEUMember: true,\n    capital: 'Zagreb',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'CZ',\n    name: 'Czech Republic',\n    flag: '🇨🇿',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Prague',\n    timezone: 'CET',\n    currency: 'CZK'\n  },\n  {\n    code: 'DK',\n    name: 'Denmark',\n    flag: '🇩🇰',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Copenhagen',\n    timezone: 'CET',\n    currency: 'DKK'\n  },\n  {\n    code: 'EE',\n    name: 'Estonia',\n    flag: '🇪🇪',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Tallinn',\n    timezone: 'EET',\n    currency: 'EUR'\n  },\n  {\n    code: 'FI',\n    name: 'Finland',\n    flag: '🇫🇮',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Helsinki',\n    timezone: 'EET',\n    currency: 'EUR'\n  },\n  {\n    code: 'FR',\n    name: 'France',\n    flag: '🇫🇷',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Paris',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'DE',\n    name: 'Germany',\n    flag: '🇩🇪',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Berlin',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'GR',\n    name: 'Greece',\n    flag: '🇬🇷',\n    joinedSchengen: '2000',\n    isEUMember: true,\n    capital: 'Athens',\n    timezone: 'EET',\n    currency: 'EUR'\n  },\n  {\n    code: 'HU',\n    name: 'Hungary',\n    flag: '🇭🇺',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Budapest',\n    timezone: 'CET',\n    currency: 'HUF'\n  },\n  {\n    code: 'IS',\n    name: 'Iceland',\n    flag: '🇮🇸',\n    joinedSchengen: '1996',\n    isEUMember: false,\n    capital: 'Reykjavik',\n    timezone: 'GMT',\n    currency: 'ISK'\n  },\n  {\n    code: 'IT',\n    name: 'Italy',\n    flag: '🇮🇹',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Rome',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'LV',\n    name: 'Latvia',\n    flag: '🇱🇻',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Riga',\n    timezone: 'EET',\n    currency: 'EUR'\n  },\n  {\n    code: 'LI',\n    name: 'Liechtenstein',\n    flag: '🇱🇮',\n    joinedSchengen: '2011',\n    isEUMember: false,\n    capital: 'Vaduz',\n    timezone: 'CET',\n    currency: 'CHF'\n  },\n  {\n    code: 'LT',\n    name: 'Lithuania',\n    flag: '🇱🇹',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Vilnius',\n    timezone: 'EET',\n    currency: 'EUR'\n  },\n  {\n    code: 'LU',\n    name: 'Luxembourg',\n    flag: '🇱🇺',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Luxembourg',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'MT',\n    name: 'Malta',\n    flag: '🇲🇹',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Valletta',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'NL',\n    name: 'Netherlands',\n    flag: '🇳🇱',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Amsterdam',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'NO',\n    name: 'Norway',\n    flag: '🇳🇴',\n    joinedSchengen: '1996',\n    isEUMember: false,\n    capital: 'Oslo',\n    timezone: 'CET',\n    currency: 'NOK'\n  },\n  {\n    code: 'PL',\n    name: 'Poland',\n    flag: '🇵🇱',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Warsaw',\n    timezone: 'CET',\n    currency: 'PLN'\n  },\n  {\n    code: 'PT',\n    name: 'Portugal',\n    flag: '🇵🇹',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Lisbon',\n    timezone: 'WET',\n    currency: 'EUR'\n  },\n  {\n    code: 'RO',\n    name: 'Romania',\n    flag: '🇷🇴',\n    joinedSchengen: '2024',\n    isEUMember: true,\n    capital: 'Bucharest',\n    timezone: 'EET',\n    currency: 'RON'\n  },\n  {\n    code: 'SK',\n    name: 'Slovakia',\n    flag: '🇸🇰',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Bratislava',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'SI',\n    name: 'Slovenia',\n    flag: '🇸🇮',\n    joinedSchengen: '2007',\n    isEUMember: true,\n    capital: 'Ljubljana',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'ES',\n    name: 'Spain',\n    flag: '🇪🇸',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Madrid',\n    timezone: 'CET',\n    currency: 'EUR'\n  },\n  {\n    code: 'SE',\n    name: 'Sweden',\n    flag: '🇸🇪',\n    joinedSchengen: '1995',\n    isEUMember: true,\n    capital: 'Stockholm',\n    timezone: 'CET',\n    currency: 'SEK'\n  },\n  {\n    code: 'CH',\n    name: 'Switzerland',\n    flag: '🇨🇭',\n    joinedSchengen: '2008',\n    isEUMember: false,\n    capital: 'Bern',\n    timezone: 'CET',\n    currency: 'CHF'\n  }\n]\n\n// Utility functions for working with countries\nexport const getCountryByCode = (code: string): SchengenCountry | undefined => {\n  return SCHENGEN_COUNTRIES.find(country => country.code === code)\n}\n\nexport const getCountryByName = (name: string): SchengenCountry | undefined => {\n  return SCHENGEN_COUNTRIES.find(country => \n    country.name.toLowerCase() === name.toLowerCase()\n  )\n}\n\nexport const getCountriesForSelect = () => {\n  return SCHENGEN_COUNTRIES.map(country => ({\n    value: country.code,\n    label: `${country.flag} ${country.name}`,\n    country\n  })).sort((a, b) => a.country.name.localeCompare(b.country.name))\n}\n\nexport const getEUMemberCountries = (): SchengenCountry[] => {\n  return SCHENGEN_COUNTRIES.filter(country => country.isEUMember)\n}\n\nexport const getNonEUSchengenCountries = (): SchengenCountry[] => {\n  return SCHENGEN_COUNTRIES.filter(country => !country.isEUMember)\n}\n\n// Export count for validation\nexport const SCHENGEN_COUNTRIES_COUNT = SCHENGEN_COUNTRIES.length"],"names":["RobustSchengenCalculator","calculateExactCompliance","trips","referenceDate","Date","Array","isArray","Error","isValid","now","tenYearsAgo","subDays","fiveYearsFromNow","addDays","console","warn","format","normalizedRefDate","normalizeToStartOfDay","periodStart","calculatePeriodStart","validTrips","validateAndNormalizeTrips","length","totalDaysUsed","daysRemaining","MAX_DAYS_IN_PERIOD","isCompliant","overstayDays","periodEnd","detailedBreakdown","dailyStays","createDailyStayMap","rollingChecks","calculateRollingComplianceForAllDays","maxViolation","Math","max","map","check","currentCompliance","generateDetailedBreakdown","result","daysInWindow","error","startOfDay","ROLLING_PERIOD_DAYS","calculateDaysInWindow","endDate","normalizedEndDate","windowStart","totalDays","trip","startDate","id","tripStart","tripEnd","overlapStart","overlapEnd","daysInOverlap","differenceInDays","validatePlannedTrip","existingTrips","plannedTrip","allTrips","currentDate","violationDate","overstay","violationDays","findLatestValidStartDate","tripLength","earliestStart","latestStart","testDate","minDate","testTrip","country","days","validation","calculateMaxConsecutiveDays","maxDays","testLength","maxTestLength","min","validateTrips","errors","warnings","seenIds","Set","forEach","index","has","push","field","message","severity","tripId","add","trim","duration","abs","i","j","trip1","trip2","overlap","getNextResetDate","currentWindow","earliestRelevantDate","checkDate","debugRollingWindow","summary","tripsInPeriod","filter","dailyBreakdown","day","daysUsedOnDate","violations","isViolation","nextResetDate","validationResult","criticalErrors","veryOld","veryFuture","normalizedTrip","hasLeapDay","tripCrossesLeapDay","debug","sort","a","b","getTime","Map","dateKey","toISOString","split","set","get","checks","windowEnd","date","breakdown","checkIndex","staysOnDate","rollingCheck","cumulativeDaysInWindow","contributingTrips","normalized","refYear","getFullYear","startYear","crossesLeapYear","isLeapYear","endYear","year","leapDay","DateOverlapValidator","validateDateRange","newRange","validateDateSpan","isValidDateRange","conflicts","occupiedDates","normalizedNewRange","start","end","endOfDay","isValidTrip","tripRange","hasOverlap","rangesOverlap","conflictDetail","calculateConflictDetail","shouldReportConflict","addOccupiedDatesFromTrip","allOccupiedDates","getAllOccupiedDates","generateValidationMessage","d","time","isDateOccupied","normalizedDate","some","getTripsOnDate","findNextAvailableDateSpan","preferredStart","lengthInDays","searchLimit","maxSearchDate","testRange","suggestAlternativeDates","conflictedRange","suggestions","earlierDate","earlierRange","laterDate","laterRange","slice","validateMultipleDateSpans","newRanges","results","combinedTrips","range","range1","range2","areIntervalsOverlapping","conflictStart","conflictEnd","overlapDays","tripCountry","conflict","config","strictMode","allowSameDayTravel","isSameDayTransition","allowBorderTransitions","updateConfig","newConfig","getConfig","findNextAvailableDateRange","searchLimitDays","searchDate","setDate","getDate","proposedRange","validateMultipleDateRanges","dateRanges","allProposedTrips","ceil","SCHENGEN_COUNTRIES","code","name","flag","joinedSchengen","isEUMember","capital","timezone","currency","getCountryByCode","find","getCountryByName","toLowerCase","getCountriesForSelect","value","label","localeCompare","getEUMemberCountries","getNonEUSchengenCountries","SCHENGEN_COUNTRIES_COUNT"],"mappings":"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"}