!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?a(exports,require("date-fns")):"function"==typeof define&&define.amd?define(["exports","date-fns"],a):a((e="undefined"!=typeof globalThis?globalThis:e||self).SchengenCalculator={},e.dateFns)}(this,function(e,a){"use strict";class t{static calculateExactCompliance(e,t=new Date){try{if(!Array.isArray(e))throw new Error("Trips must be an array");if(!t||!a.isValid(t))throw new Error("Reference date must be a valid Date object");const n=new Date,r=a.subDays(n,3650),i=a.addDays(n,1825);(t<r||t>i)&&console.warn(`Reference date ${a.format(t,"yyyy-MM-dd")} is outside reasonable range`);const o=this.normalizeToStartOfDay(t),s=this.calculatePeriodStart(o),c=this.validateAndNormalizeTrips(e);if(0===c.length)return{totalDaysUsed:0,daysRemaining:this.MAX_DAYS_IN_PERIOD,isCompliant:!0,overstayDays:0,referenceDate:o,periodStart:s,periodEnd:o,detailedBreakdown:[]};const d=this.createDailyStayMap(c,s,o),l=this.calculateRollingComplianceForAllDays(d,s,o);if(0===l.length)throw new Error("Failed to generate rolling compliance checks");const g=Math.max(...l.map(e=>e.overstayDays)),f=l[l.length-1];if(!f)throw new Error("Failed to get current compliance status");const u=this.generateDetailedBreakdown(d,l,s,o),y={totalDaysUsed:f.daysInWindow,daysRemaining:Math.max(0,this.MAX_DAYS_IN_PERIOD-f.daysInWindow),isCompliant:0===g,overstayDays:g,referenceDate:o,periodStart:s,periodEnd:o,detailedBreakdown:u};if(y.totalDaysUsed<0||y.daysRemaining<0)throw console.error("Invalid calculation result:",y),new Error("Calculation produced invalid negative values");return y}catch(e){console.error("Error in calculateExactCompliance:",e);const n=a.startOfDay(t);return{totalDaysUsed:0,daysRemaining:this.MAX_DAYS_IN_PERIOD,isCompliant:!0,overstayDays:0,referenceDate:n,periodStart:a.subDays(n,this.ROLLING_PERIOD_DAYS-1),periodEnd:n,detailedBreakdown:[]}}}static calculateDaysInWindow(e,t){if(!a.isValid(t))throw new Error("End date must be valid");const n=this.normalizeToStartOfDay(t),r=this.calculatePeriodStart(n);let i=0;for(const t of e){if(!a.isValid(t.startDate)||!a.isValid(t.endDate)){console.warn(`Skipping trip ${t.id} with invalid dates`);continue}const e=this.normalizeToStartOfDay(t.startDate),o=this.normalizeToStartOfDay(t.endDate),s=e>r?e:r,c=o<n?o:n;if(s<=c){const e=a.differenceInDays(c,s)+1;if(e<0){console.error(`Negative days calculated for trip ${t.id}`);continue}i+=e}}return i}static validatePlannedTrip(e,t){const n=[...e,t];let r=a.startOfDay(t.startDate);const i=a.startOfDay(t.endDate);let o=0,s=null;for(;r<=i;){const e=this.calculateDaysInWindow(n,r),t=Math.max(0,e-this.MAX_DAYS_IN_PERIOD);t>o&&(o=t,s=new Date(r)),r=a.addDays(r,1)}return{isValid:0===o,violationDays:o,violationDate:s}}static findLatestValidStartDate(e,t,n,r){let i=a.startOfDay(r);const o=a.startOfDay(n);for(;i>=o;){const n={id:"test",country:"TEST",startDate:i,endDate:a.addDays(i,t-1),days:t};if(this.validatePlannedTrip(e,n).isValid)return i;i=a.subDays(i,1)}return null}static calculateMaxConsecutiveDays(e,t){let n=0,r=1;for(;r<=100;){const i={id:"test",country:"TEST",startDate:a.startOfDay(t),endDate:a.addDays(a.startOfDay(t),r-1),days:r};if(!this.validatePlannedTrip(e,i).isValid)break;n=r,r++}return Math.min(n,this.MAX_DAYS_IN_PERIOD)}static validateTrips(e){const t=[],n=[],r=new Set;e.forEach((e,i)=>{if(r.has(e.id)&&t.push({field:"id",message:`Duplicate trip ID: ${e.id}`,severity:"ERROR",tripId:e.id}),r.add(e.id),e.id&&""!==e.id.trim()||t.push({field:"id",message:`Trip at index ${i} is missing an ID`,severity:"ERROR"}),e.country&&""!==e.country.trim()||t.push({field:"country",message:"Country is required",severity:"ERROR",tripId:e.id}),e.startDate||t.push({field:"startDate",message:"Start date is required",severity:"ERROR",tripId:e.id}),e.endDate||t.push({field:"endDate",message:"End date is required",severity:"ERROR",tripId:e.id}),e.startDate&&e.endDate){e.startDate>e.endDate&&t.push({field:"dates",message:"Start date must be before or equal to end date",severity:"ERROR",tripId:e.id});const r=a.differenceInDays(e.endDate,e.startDate)+1;r>this.MAX_DAYS_IN_PERIOD&&t.push({field:"duration",message:`Trip duration (${r} days) exceeds maximum allowed consecutive stay (${this.MAX_DAYS_IN_PERIOD} days)`,severity:"ERROR",tripId:e.id}),r<1&&t.push({field:"duration",message:"Trip must be at least 1 day long",severity:"ERROR",tripId:e.id});const i=new Date,o=a.subDays(i,3650),s=a.addDays(i,1825);e.startDate<o&&n.push({field:"startDate",message:"Start date seems unreasonably far in the past",severity:"WARNING",tripId:e.id}),e.endDate>s&&n.push({field:"endDate",message:"End date seems unreasonably far in the future",severity:"WARNING",tripId:e.id}),e.days&&Math.abs(e.days-r)>0&&n.push({field:"days",message:`Days field (${e.days}) doesn't match calculated duration (${r})`,severity:"WARNING",tripId:e.id})}});for(let a=0;a<e.length;a++)for(let t=a+1;t<e.length;t++){const r=e[a],i=e[t];if(!(r.startDate&&r.endDate&&i.startDate&&i.endDate))continue;!(r.endDate<i.startDate||i.endDate<r.startDate)&&n.push({field:"dates",message:`Trip ${r.id} overlaps with trip ${i.id}. This may be intentional for same-day travel between countries.`,severity:"WARNING",tripId:r.id})}return{isValid:0===t.length,errors:t,warnings:n}}static getNextResetDate(e,t=new Date){const n=a.startOfDay(t),r=a.subDays(n,this.ROLLING_PERIOD_DAYS-1);let i=null;for(const t of e){let e=a.startOfDay(t.startDate);const o=a.startOfDay(t.endDate);for(;e<=o;)e>=r&&e<=n&&(!i||e<i)&&(i=e),e=a.addDays(e,1)}return i?a.addDays(i,this.ROLLING_PERIOD_DAYS):null}static debugRollingWindow(e,a){const t=this.calculateExactCompliance(e,a);return{summary:{totalDaysUsed:t.totalDaysUsed,daysRemaining:t.daysRemaining,isCompliant:t.isCompliant,overstayDays:t.overstayDays,periodStart:t.periodStart,periodEnd:t.periodEnd},tripsInPeriod:e.filter(e=>e.endDate>=t.periodStart&&e.startDate<=t.periodEnd),dailyBreakdown:t.detailedBreakdown.filter(e=>e.daysUsedOnDate>0),violations:t.detailedBreakdown.filter(e=>e.isViolation),nextResetDate:this.getNextResetDate(e,a)}}static validateAndNormalizeTrips(e){const t=this.validateTrips(e).errors;return t.length>0&&console.warn("Critical validation errors found:",t),e.filter(e=>{if(!e.startDate||!e.endDate||!e.country)return!1;if(!a.isValid(e.startDate)||!a.isValid(e.endDate))return console.warn(`Trip ${e.id} has invalid dates`),!1;if(e.startDate>e.endDate)return!1;if(a.differenceInDays(e.endDate,e.startDate)+1>this.MAX_DAYS_IN_PERIOD)return!1;const t=new Date,n=a.subDays(t,7300),r=a.addDays(t,3650);return!(e.endDate<n||e.startDate>r)||(console.warn(`Trip ${e.id} has unreasonable dates`),!1)}).map(e=>{try{const t={...e,startDate:this.normalizeToStartOfDay(e.startDate),endDate:this.normalizeToStartOfDay(e.endDate),days:a.differenceInDays(e.endDate,e.startDate)+1};if(!a.isValid(t.startDate)||!a.isValid(t.endDate))return console.error(`Invalid dates after normalization for trip ${e.id}`),null;return this.tripCrossesLeapDay(t.startDate,t.endDate)&&console.debug(`Trip ${e.id} crosses leap day`),t}catch(a){return console.error(`Error normalizing trip ${e.id}:`,a),null}}).filter(e=>null!==e).sort((e,a)=>e.startDate.getTime()-a.startDate.getTime())}static createDailyStayMap(e,t,n){const r=new Map;for(const i of e){if(i.endDate<t||i.startDate>n)continue;const e=i.startDate>t?i.startDate:t,o=i.endDate<n?i.endDate:n;let s=new Date(e);for(;s<=o;){const e=this.formatDateKey(s);r.has(e)||r.set(e,[]),r.get(e).push(i.id),s=a.addDays(s,1)}}return r}static formatDateKey(e){return`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,"0")}-${e.getDate().toString().padStart(2,"0")}`}static calculateRollingComplianceForAllDays(e,t,n){const r=[];let i=new Date(t);for(;i<=n;){const t=a.subDays(i,this.ROLLING_PERIOD_DAYS-1),n=new Date(i);let o=0,s=new Date(t);for(;s<=n;){const t=this.formatDateKey(s);e.has(t)&&o++,s=a.addDays(s,1)}const c=Math.max(0,o-this.MAX_DAYS_IN_PERIOD);r.push({date:new Date(i),windowStart:new Date(t),windowEnd:new Date(n),daysInWindow:o,isCompliant:0===c,overstayDays:c}),i=a.addDays(i,1)}return r}static generateDetailedBreakdown(e,a,t,n){const r=[],i=864e5,o=t.getTime(),s=n.getTime(),c=Math.floor((s-o)/i)+1;r.length=c;for(let t=0;t<c;t++){const n=new Date(o+t*i),s=this.formatDateKey(n),c=e.get(s)||[],d=c.length>0?1:0,l=a[t];r[t]={date:n,daysUsedOnDate:d,cumulativeDaysInWindow:l.daysInWindow,isViolation:!l.isCompliant,contributingTrips:c}}return r}static normalizeToStartOfDay(e){const t=a.startOfDay(e);if(!a.isValid(t))throw new Error(`Failed to normalize date: ${e}`);return t}static calculatePeriodStart(e){const t=a.subDays(e,this.ROLLING_PERIOD_DAYS-1);if(!a.isValid(t))throw new Error(`Invalid period start calculated from reference date: ${a.format(e,"yyyy-MM-dd")}`);const n=e.getFullYear(),r=t.getFullYear();if(n!==r){(a.isLeapYear(n)||a.isLeapYear(r))&&console.debug(`180-day window crosses leap year boundary: ${r}-${n}`)}return t}static tripCrossesLeapDay(e,t){const n=e.getFullYear(),r=t.getFullYear();for(let i=n;i<=r;i++)if(a.isLeapYear(i)){const a=new Date(i,1,29);if(a>=e&&a<=t)return!0}return!1}}t.MAX_DAYS_IN_PERIOD=90,t.ROLLING_PERIOD_DAYS=180;function n(e,a,n){try{if(a<0||a>=e.length)return{isValid:!1,expectedResult:r(),errorMessage:`Invalid row index: ${a}. Must be between 0 and ${e.length-1}`,validationDetails:{rowIndex:a,tripsCount:e.length,referenceDate:"invalid",totalDaysUsed:0,daysRemaining:90}};const i=e.slice(0,a+1),o=e[a].endDate,s=t.calculateExactCompliance(i,o),c={rowIndex:a,tripsCount:i.length,referenceDate:o.toISOString(),totalDaysUsed:s.totalDaysUsed,daysRemaining:s.daysRemaining};if(!n)return{isValid:!0,expectedResult:s,validationDetails:c};return n.totalDaysUsed===s.totalDaysUsed&&n.daysRemaining===s.daysRemaining&&n.isCompliant===s.isCompliant&&n.overstayDays===s.overstayDays?{isValid:!0,expectedResult:s,actualResult:n,validationDetails:c}:{isValid:!1,expectedResult:s,actualResult:n,errorMessage:`Cumulative calculation mismatch at row ${a}. Expected: ${s.totalDaysUsed} used, ${s.daysRemaining} remaining. Actual: ${n.totalDaysUsed} used, ${n.daysRemaining} remaining.`,validationDetails:c}}catch(t){return{isValid:!1,expectedResult:r(),errorMessage:`Validation error: ${t instanceof Error?t.message:"Unknown error"}`,validationDetails:{rowIndex:a,tripsCount:e.length,referenceDate:"error",totalDaysUsed:0,daysRemaining:90}}}}function r(){const e=new Date;return{totalDaysUsed:0,daysRemaining:90,isCompliant:!0,overstayDays:0,referenceDate:e,periodStart:new Date(e.getTime()-154656e5),periodEnd:e,detailedBreakdown:[]}}const i=[{code:"AT",name:"Austria",flag:"🇦🇹",joinedSchengen:"1995",isEUMember:!0,capital:"Vienna",timezone:"CET",currency:"EUR"},{code:"BE",name:"Belgium",flag:"🇧🇪",joinedSchengen:"1995",isEUMember:!0,capital:"Brussels",timezone:"CET",currency:"EUR"},{code:"BG",name:"Bulgaria",flag:"🇧🇬",joinedSchengen:"2024",isEUMember:!0,capital:"Sofia",timezone:"EET",currency:"BGN"},{code:"HR",name:"Croatia",flag:"🇭🇷",joinedSchengen:"2023",isEUMember:!0,capital:"Zagreb",timezone:"CET",currency:"EUR"},{code:"CZ",name:"Czech Republic",flag:"🇨🇿",joinedSchengen:"2007",isEUMember:!0,capital:"Prague",timezone:"CET",currency:"CZK"},{code:"DK",name:"Denmark",flag:"🇩🇰",joinedSchengen:"1995",isEUMember:!0,capital:"Copenhagen",timezone:"CET",currency:"DKK"},{code:"EE",name:"Estonia",flag:"🇪🇪",joinedSchengen:"2007",isEUMember:!0,capital:"Tallinn",timezone:"EET",currency:"EUR"},{code:"FI",name:"Finland",flag:"🇫🇮",joinedSchengen:"1995",isEUMember:!0,capital:"Helsinki",timezone:"EET",currency:"EUR"},{code:"FR",name:"France",flag:"🇫🇷",joinedSchengen:"1995",isEUMember:!0,capital:"Paris",timezone:"CET",currency:"EUR"},{code:"DE",name:"Germany",flag:"🇩🇪",joinedSchengen:"1995",isEUMember:!0,capital:"Berlin",timezone:"CET",currency:"EUR"},{code:"GR",name:"Greece",flag:"🇬🇷",joinedSchengen:"2000",isEUMember:!0,capital:"Athens",timezone:"EET",currency:"EUR"},{code:"HU",name:"Hungary",flag:"🇭🇺",joinedSchengen:"2007",isEUMember:!0,capital:"Budapest",timezone:"CET",currency:"HUF"},{code:"IS",name:"Iceland",flag:"🇮🇸",joinedSchengen:"1996",isEUMember:!1,capital:"Reykjavik",timezone:"GMT",currency:"ISK"},{code:"IT",name:"Italy",flag:"🇮🇹",joinedSchengen:"1995",isEUMember:!0,capital:"Rome",timezone:"CET",currency:"EUR"},{code:"LV",name:"Latvia",flag:"🇱🇻",joinedSchengen:"2007",isEUMember:!0,capital:"Riga",timezone:"EET",currency:"EUR"},{code:"LI",name:"Liechtenstein",flag:"🇱🇮",joinedSchengen:"2011",isEUMember:!1,capital:"Vaduz",timezone:"CET",currency:"CHF"},{code:"LT",name:"Lithuania",flag:"🇱🇹",joinedSchengen:"2007",isEUMember:!0,capital:"Vilnius",timezone:"EET",currency:"EUR"},{code:"LU",name:"Luxembourg",flag:"🇱🇺",joinedSchengen:"1995",isEUMember:!0,capital:"Luxembourg",timezone:"CET",currency:"EUR"},{code:"MT",name:"Malta",flag:"🇲🇹",joinedSchengen:"2007",isEUMember:!0,capital:"Valletta",timezone:"CET",currency:"EUR"},{code:"NL",name:"Netherlands",flag:"🇳🇱",joinedSchengen:"1995",isEUMember:!0,capital:"Amsterdam",timezone:"CET",currency:"EUR"},{code:"NO",name:"Norway",flag:"🇳🇴",joinedSchengen:"1996",isEUMember:!1,capital:"Oslo",timezone:"CET",currency:"NOK"},{code:"PL",name:"Poland",flag:"🇵🇱",joinedSchengen:"2007",isEUMember:!0,capital:"Warsaw",timezone:"CET",currency:"PLN"},{code:"PT",name:"Portugal",flag:"🇵🇹",joinedSchengen:"1995",isEUMember:!0,capital:"Lisbon",timezone:"WET",currency:"EUR"},{code:"RO",name:"Romania",flag:"🇷🇴",joinedSchengen:"2024",isEUMember:!0,capital:"Bucharest",timezone:"EET",currency:"RON"},{code:"SK",name:"Slovakia",flag:"🇸🇰",joinedSchengen:"2007",isEUMember:!0,capital:"Bratislava",timezone:"CET",currency:"EUR"},{code:"SI",name:"Slovenia",flag:"🇸🇮",joinedSchengen:"2007",isEUMember:!0,capital:"Ljubljana",timezone:"CET",currency:"EUR"},{code:"ES",name:"Spain",flag:"🇪🇸",joinedSchengen:"1995",isEUMember:!0,capital:"Madrid",timezone:"CET",currency:"EUR"},{code:"SE",name:"Sweden",flag:"🇸🇪",joinedSchengen:"1995",isEUMember:!0,capital:"Stockholm",timezone:"CET",currency:"SEK"},{code:"CH",name:"Switzerland",flag:"🇨🇭",joinedSchengen:"2008",isEUMember:!1,capital:"Bern",timezone:"CET",currency:"CHF"}],o=i.length,s=[{code:"AG",name:"Antigua and Barbuda",flag:"🇦🇬",category:"affected_by_90_180",region:"Caribbean"},{code:"AR",name:"Argentina",flag:"🇦🇷",category:"affected_by_90_180",region:"South America"},{code:"BS",name:"Bahamas",flag:"🇧🇸",category:"affected_by_90_180",region:"Caribbean"},{code:"BB",name:"Barbados",flag:"🇧🇧",category:"affected_by_90_180",region:"Caribbean"},{code:"BR",name:"Brazil",flag:"🇧🇷",category:"affected_by_90_180",region:"South America"},{code:"CA",name:"Canada",flag:"🇨🇦",category:"affected_by_90_180",region:"North America"},{code:"CL",name:"Chile",flag:"🇨🇱",category:"affected_by_90_180",region:"South America"},{code:"CO",name:"Colombia",flag:"🇨🇴",category:"affected_by_90_180",region:"South America"},{code:"CR",name:"Costa Rica",flag:"🇨🇷",category:"affected_by_90_180",region:"Central America"},{code:"DM",name:"Dominica",flag:"🇩🇲",category:"affected_by_90_180",region:"Caribbean"},{code:"SV",name:"El Salvador",flag:"🇸🇻",category:"affected_by_90_180",region:"Central America"},{code:"GD",name:"Grenada",flag:"🇬🇩",category:"affected_by_90_180",region:"Caribbean"},{code:"GT",name:"Guatemala",flag:"🇬🇹",category:"affected_by_90_180",region:"Central America"},{code:"HN",name:"Honduras",flag:"🇭🇳",category:"affected_by_90_180",region:"Central America"},{code:"MX",name:"Mexico",flag:"🇲🇽",category:"affected_by_90_180",region:"North America"},{code:"NI",name:"Nicaragua",flag:"🇳🇮",category:"affected_by_90_180",region:"Central America"},{code:"PA",name:"Panama",flag:"🇵🇦",category:"affected_by_90_180",region:"Central America"},{code:"PY",name:"Paraguay",flag:"🇵🇾",category:"affected_by_90_180",region:"South America"},{code:"PE",name:"Peru",flag:"🇵🇪",category:"affected_by_90_180",region:"South America"},{code:"KN",name:"Saint Kitts and Nevis",flag:"🇰🇳",category:"affected_by_90_180",region:"Caribbean"},{code:"LC",name:"Saint Lucia",flag:"🇱🇨",category:"affected_by_90_180",region:"Caribbean"},{code:"VC",name:"Saint Vincent and the Grenadines",flag:"🇻🇨",category:"affected_by_90_180",region:"Caribbean"},{code:"TT",name:"Trinidad and Tobago",flag:"🇹🇹",category:"affected_by_90_180",region:"Caribbean"},{code:"US",name:"United States",flag:"🇺🇸",category:"affected_by_90_180",region:"North America"},{code:"UY",name:"Uruguay",flag:"🇺🇾",category:"affected_by_90_180",region:"South America"},{code:"VE",name:"Venezuela",flag:"🇻🇪",category:"affected_by_90_180",region:"South America"},{code:"AU",name:"Australia",flag:"🇦🇺",category:"affected_by_90_180",region:"Oceania"},{code:"BN",name:"Brunei",flag:"🇧🇳",category:"affected_by_90_180",region:"Asia"},{code:"HK",name:"Hong Kong SAR",flag:"🇭🇰",category:"affected_by_90_180",region:"Asia"},{code:"JP",name:"Japan",flag:"🇯🇵",category:"affected_by_90_180",region:"Asia"},{code:"KI",name:"Kiribati",flag:"🇰🇮",category:"affected_by_90_180",region:"Oceania"},{code:"KR",name:"South Korea",flag:"🇰🇷",category:"affected_by_90_180",region:"Asia"},{code:"MO",name:"Macao SAR",flag:"🇲🇴",category:"affected_by_90_180",region:"Asia"},{code:"MY",name:"Malaysia",flag:"🇲🇾",category:"affected_by_90_180",region:"Asia"},{code:"MH",name:"Marshall Islands",flag:"🇲🇭",category:"affected_by_90_180",region:"Oceania"},{code:"FM",name:"Micronesia",flag:"🇫🇲",category:"affected_by_90_180",region:"Oceania"},{code:"NR",name:"Nauru",flag:"🇳🇷",category:"affected_by_90_180",region:"Oceania"},{code:"NZ",name:"New Zealand",flag:"🇳🇿",category:"affected_by_90_180",region:"Oceania"},{code:"PW",name:"Palau",flag:"🇵🇼",category:"affected_by_90_180",region:"Oceania"},{code:"WS",name:"Samoa",flag:"🇼🇸",category:"affected_by_90_180",region:"Oceania"},{code:"SG",name:"Singapore",flag:"🇸🇬",category:"affected_by_90_180",region:"Asia"},{code:"SB",name:"Solomon Islands",flag:"🇸🇧",category:"affected_by_90_180",region:"Oceania"},{code:"TW",name:"Taiwan",flag:"🇹🇼",category:"affected_by_90_180",region:"Asia"},{code:"TL",name:"Timor-Leste",flag:"🇹🇱",category:"affected_by_90_180",region:"Asia"},{code:"TO",name:"Tonga",flag:"🇹🇴",category:"affected_by_90_180",region:"Oceania"},{code:"TV",name:"Tuvalu",flag:"🇹🇻",category:"affected_by_90_180",region:"Oceania"},{code:"VU",name:"Vanuatu",flag:"🇻🇺",category:"affected_by_90_180",region:"Oceania"},{code:"AL",name:"Albania",flag:"🇦🇱",category:"affected_by_90_180",region:"Europe"},{code:"AD",name:"Andorra",flag:"🇦🇩",category:"affected_by_90_180",region:"Europe"},{code:"BA",name:"Bosnia and Herzegovina",flag:"🇧🇦",category:"affected_by_90_180",region:"Europe"},{code:"GE",name:"Georgia",flag:"🇬🇪",category:"affected_by_90_180",region:"Europe"},{code:"MD",name:"Moldova",flag:"🇲🇩",category:"affected_by_90_180",region:"Europe"},{code:"MC",name:"Monaco",flag:"🇲🇨",category:"affected_by_90_180",region:"Europe"},{code:"ME",name:"Montenegro",flag:"🇲🇪",category:"affected_by_90_180",region:"Europe"},{code:"MK",name:"North Macedonia",flag:"🇲🇰",category:"affected_by_90_180",region:"Europe"},{code:"SM",name:"San Marino",flag:"🇸🇲",category:"affected_by_90_180",region:"Europe"},{code:"RS",name:"Serbia",flag:"🇷🇸",category:"affected_by_90_180",region:"Europe"},{code:"UA",name:"Ukraine",flag:"🇺🇦",category:"affected_by_90_180",region:"Europe"},{code:"VA",name:"Holy See (Vatican)",flag:"🇻🇦",category:"affected_by_90_180",region:"Europe"},{code:"GB",name:"United Kingdom",flag:"🇬🇧",category:"affected_by_90_180",region:"Europe"},{code:"AE",name:"United Arab Emirates",flag:"🇦🇪",category:"affected_by_90_180",region:"Middle East"},{code:"IL",name:"Israel",flag:"🇮🇱",category:"affected_by_90_180",region:"Middle East"},{code:"MU",name:"Mauritius",flag:"🇲🇺",category:"affected_by_90_180",region:"Africa"},{code:"SC",name:"Seychelles",flag:"🇸🇨",category:"affected_by_90_180",region:"Africa"}],c=[{code:"AT",name:"Austria",flag:"🇦🇹",category:"eu_eea_swiss",region:"Europe"},{code:"BE",name:"Belgium",flag:"🇧🇪",category:"eu_eea_swiss",region:"Europe"},{code:"BG",name:"Bulgaria",flag:"🇧🇬",category:"eu_eea_swiss",region:"Europe"},{code:"HR",name:"Croatia",flag:"🇭🇷",category:"eu_eea_swiss",region:"Europe"},{code:"CY",name:"Cyprus",flag:"🇨🇾",category:"eu_eea_swiss",region:"Europe"},{code:"CZ",name:"Czech Republic",flag:"🇨🇿",category:"eu_eea_swiss",region:"Europe"},{code:"DK",name:"Denmark",flag:"🇩🇰",category:"eu_eea_swiss",region:"Europe"},{code:"EE",name:"Estonia",flag:"🇪🇪",category:"eu_eea_swiss",region:"Europe"},{code:"FI",name:"Finland",flag:"🇫🇮",category:"eu_eea_swiss",region:"Europe"},{code:"FR",name:"France",flag:"🇫🇷",category:"eu_eea_swiss",region:"Europe"},{code:"DE",name:"Germany",flag:"🇩🇪",category:"eu_eea_swiss",region:"Europe"},{code:"GR",name:"Greece",flag:"🇬🇷",category:"eu_eea_swiss",region:"Europe"},{code:"HU",name:"Hungary",flag:"🇭🇺",category:"eu_eea_swiss",region:"Europe"},{code:"IE",name:"Ireland",flag:"🇮🇪",category:"eu_eea_swiss",region:"Europe"},{code:"IT",name:"Italy",flag:"🇮🇹",category:"eu_eea_swiss",region:"Europe"},{code:"LV",name:"Latvia",flag:"🇱🇻",category:"eu_eea_swiss",region:"Europe"},{code:"LT",name:"Lithuania",flag:"🇱🇹",category:"eu_eea_swiss",region:"Europe"},{code:"LU",name:"Luxembourg",flag:"🇱🇺",category:"eu_eea_swiss",region:"Europe"},{code:"MT",name:"Malta",flag:"🇲🇹",category:"eu_eea_swiss",region:"Europe"},{code:"NL",name:"Netherlands",flag:"🇳🇱",category:"eu_eea_swiss",region:"Europe"},{code:"PL",name:"Poland",flag:"🇵🇱",category:"eu_eea_swiss",region:"Europe"},{code:"PT",name:"Portugal",flag:"🇵🇹",category:"eu_eea_swiss",region:"Europe"},{code:"RO",name:"Romania",flag:"🇷🇴",category:"eu_eea_swiss",region:"Europe"},{code:"SK",name:"Slovakia",flag:"🇸🇰",category:"eu_eea_swiss",region:"Europe"},{code:"SI",name:"Slovenia",flag:"🇸🇮",category:"eu_eea_swiss",region:"Europe"},{code:"ES",name:"Spain",flag:"🇪🇸",category:"eu_eea_swiss",region:"Europe"},{code:"SE",name:"Sweden",flag:"🇸🇪",category:"eu_eea_swiss",region:"Europe"},{code:"IS",name:"Iceland",flag:"🇮🇸",category:"eu_eea_swiss",region:"Europe"},{code:"LI",name:"Liechtenstein",flag:"🇱🇮",category:"eu_eea_swiss",region:"Europe"},{code:"NO",name:"Norway",flag:"🇳🇴",category:"eu_eea_swiss",region:"Europe"},{code:"CH",name:"Switzerland",flag:"🇨🇭",category:"eu_eea_swiss",region:"Europe"}],d=[...s,...c,{code:"CN",name:"China",flag:"🇨🇳",category:"requires_visa",region:"Asia"},{code:"IN",name:"India",flag:"🇮🇳",category:"requires_visa",region:"Asia"},{code:"RU",name:"Russia",flag:"🇷🇺",category:"requires_visa",region:"Europe"},{code:"TR",name:"Turkey",flag:"🇹🇷",category:"requires_visa",region:"Europe"},{code:"ZA",name:"South Africa",flag:"🇿🇦",category:"requires_visa",region:"Africa"},{code:"EG",name:"Egypt",flag:"🇪🇬",category:"requires_visa",region:"Africa"},{code:"NG",name:"Nigeria",flag:"🇳🇬",category:"requires_visa",region:"Africa"},{code:"PK",name:"Pakistan",flag:"🇵🇰",category:"requires_visa",region:"Asia"},{code:"BD",name:"Bangladesh",flag:"🇧🇩",category:"requires_visa",region:"Asia"},{code:"PH",name:"Philippines",flag:"🇵🇭",category:"requires_visa",region:"Asia"},{code:"VN",name:"Vietnam",flag:"🇻🇳",category:"requires_visa",region:"Asia"},{code:"TH",name:"Thailand",flag:"🇹🇭",category:"requires_visa",region:"Asia"},{code:"ID",name:"Indonesia",flag:"🇮🇩",category:"requires_visa",region:"Asia"},{code:"SA",name:"Saudi Arabia",flag:"🇸🇦",category:"requires_visa",region:"Middle East"},{code:"IR",name:"Iran",flag:"🇮🇷",category:"requires_visa",region:"Middle East"},{code:"IQ",name:"Iraq",flag:"🇮🇶",category:"requires_visa",region:"Middle East"}].sort((e,a)=>e.name.localeCompare(a.name)),l=s.length,g=c.length,f=d.length;e.AFFECTED_COUNTRIES_COUNT=l,e.ALL_COUNTRIES_FOR_CITIZENSHIP=d,e.COUNTRIES_AFFECTED_BY_90_180=s,e.DateOverlapValidator=class{validateDateRange(e,a){return this.validateDateSpan(e,a)}validateDateSpan(e,t){if(!this.isValidDateRange(e))return{isValid:!1,conflicts:[],message:"Invalid date range provided",occupiedDates:[]};const n={start:a.startOfDay(e.start),end:a.endOfDay(e.end)},r=[],i=[];for(const e of t){if(!this.isValidTrip(e))continue;const t={start:a.startOfDay(e.startDate),end:a.endOfDay(e.endDate)};if(this.rangesOverlap(n,t)){const a=this.calculateConflictDetail(n,t,e);this.shouldReportConflict(a,n,t)&&r.push(a),this.addOccupiedDatesFromTrip(e,i)}}const o=this.getAllOccupiedDates(t);return{isValid:0===r.length,conflicts:r,message:this.generateValidationMessage(r),occupiedDates:o}}getAllOccupiedDates(e){const a=[];for(const t of e)this.isValidTrip(t)&&this.addOccupiedDatesFromTrip(t,a);return[...new Set(a.map(e=>e.getTime()))].map(e=>new Date(e)).sort((e,a)=>e.getTime()-a.getTime())}isDateOccupied(e,t){const n=a.startOfDay(e);return t.some(e=>{if(!this.isValidTrip(e))return!1;const t=a.startOfDay(e.startDate),r=a.startOfDay(e.endDate);return n>=t&&n<=r})}getTripsOnDate(e,t){const n=a.startOfDay(e);return t.filter(e=>{if(!this.isValidTrip(e))return!1;const t=a.startOfDay(e.startDate),r=a.startOfDay(e.endDate);return n>=t&&n<=r})}findNextAvailableDateSpan(e,t,n,r=365){let i=a.startOfDay(e);const o=new Date(i.getTime()+24*r*60*60*1e3);for(;i<=o;){const e={start:i,end:new Date(i.getTime()+24*(t-1)*60*60*1e3)};if(this.validateDateSpan(e,n).isValid)return e;i=new Date(i.getTime()+864e5)}return null}suggestAlternativeDates(e,t,n){const r=[],i=t||a.differenceInDays(e.end,e.start)+1,o=new Date(e.start.getTime()-2592e6),s=this.findNextAvailableDateSpan(o,i,n,60);s&&s.start<e.start&&r.push(s);const c=new Date(e.end.getTime()+864e5),d=this.findNextAvailableDateSpan(c,i,n,60);return d&&r.push(d),r.slice(0,3)}validateMultipleDateSpans(e,t){const n={};let r=[...t];return e.forEach((e,t)=>{const i=this.validateDateSpan(e,r);n[t]=i,i.isValid&&r.push({id:`temp-${t}`,country:"TEMP",startDate:e.start,endDate:e.end,days:a.differenceInDays(e.end,e.start)+1})}),n}rangesOverlap(e,t){return a.areIntervalsOverlapping({start:e.start,end:e.end},{start:t.start,end:t.end})}calculateConflictDetail(e,t,n){const r=e.start>t.start?e.start:t.start,i=e.end<t.end?e.end:t.end,o=a.differenceInDays(i,r)+1;return{tripId:n.id,tripCountry:n.country,conflictStart:r,conflictEnd:i,overlapDays:Math.max(0,o)}}shouldReportConflict(e,a,t){if(this.config.strictMode)return!0;if(this.config.allowSameDayTravel){if(a.start.getTime()===t.end.getTime()||a.end.getTime()===t.start.getTime())return!1}return!(this.config.allowBorderTransitions&&e.overlapDays<=1)}addOccupiedDatesFromTrip(e,t){const n=a.startOfDay(e.startDate),r=a.startOfDay(e.endDate);let i=new Date(n);for(;i<=r;)t.push(new Date(i)),i=new Date(i.getTime()+864e5)}generateValidationMessage(e){if(0===e.length)return"Dates are available";if(1===e.length){const a=e[0];return`Dates overlap with existing trip to ${a.tripCountry} (${a.overlapDays} day${1!==a.overlapDays?"s":""})`}return`Dates conflict with ${e.length} existing trips`}isValidDateRange(e){return!!(e&&e.start&&e.end)&&(!(!a.isValid(e.start)||!a.isValid(e.end))&&!(e.start>e.end))}isValidTrip(e){return!!(e&&e.startDate&&e.endDate)&&(!(!a.isValid(e.startDate)||!a.isValid(e.endDate))&&!(e.startDate>e.endDate))}updateConfig(e){this.config={...this.config,...e}}getConfig(){return{...this.config}}findNextAvailableDateRange(e,a,t,n=365){const r=new Date(e.getTime()+24*n*60*60*1e3);for(let n=new Date(e);n<=r;n.setDate(n.getDate()+1)){const e={start:new Date(n),end:new Date(n.getTime()+24*(a-1)*60*60*1e3)};if(this.validateDateRange(e,t).isValid)return e}return null}validateMultipleDateRanges(e,a){const t={},n=[...a];return e.forEach((e,a)=>{const r=this.validateDateRange(e,n);t[a]=r,r.isValid&&n.push({id:`temp-${a}`,country:`temp-${a}`,startDate:e.start,endDate:e.end,days:Math.ceil((e.end.getTime()-e.start.getTime())/864e5)+1})}),t}constructor(e={}){this.config={allowSameDayTravel:!0,allowBorderTransitions:!0,strictMode:!1,...e}}},e.EU_EEA_SWISS_COUNT=g,e.EU_EEA_SWISS_COUNTRIES=c,e.RobustSchengenCalculator=t,e.SCHENGEN_COUNTRIES=i,e.SCHENGEN_COUNTRIES_COUNT=o,e.TOTAL_COUNTRIES_COUNT=f,e.benchmarkPerformance=function(e){if(0===e.length)return{avgTimePerCalculation:0,maxTime:0,isWithinBenchmark:!0};const a=[];e.forEach((t,r)=>{const i=performance.now();n(e,r);const o=performance.now();a.push(o-i)});const t=a.reduce((e,a)=>e+a,0)/a.length,r=Math.max(...a);return{avgTimePerCalculation:t,maxTime:r,isWithinBenchmark:t<50&&r<100}},e.getCountriesForCitizenshipSelect=()=>d.map(e=>({value:e.code,label:`${e.flag} ${e.name}`,country:e,category:e.category,region:e.region})),e.getCountriesForSelect=()=>i.map(e=>({value:e.code,label:`${e.flag} ${e.name}`,country:e})).sort((e,a)=>e.country.name.localeCompare(a.country.name)),e.getCountryByCode=e=>i.find(a=>a.code===e),e.getCountryByName=e=>i.find(a=>a.name.toLowerCase()===e.toLowerCase()),e.getCountryClassification=e=>d.find(a=>a.code===e),e.getEUMemberCountries=()=>i.filter(e=>e.isEUMember),e.getNonEUSchengenCountries=()=>i.filter(e=>!e.isEUMember),e.getRuleApplicability=e=>{const a=e.some(e=>c.some(a=>a.code===e)),t=e.some(e=>s.some(a=>a.code===e));return a?{isSubjectToRule:!1,exemptionReason:"eu_citizen",message:"The 90/180 rule doesn't apply to you as an EU/EEA/Swiss citizen, but you can still use our travel tracker!"}:t?{isSubjectToRule:!0,exemptionReason:null,message:"Track your Schengen compliance with our 90/180 day calculator"}:{isSubjectToRule:!1,exemptionReason:"requires_visa",message:"You'll need a Schengen visa to travel to Europe. Our calculator can help you plan your applications."}},e.isSubjectTo90180Rule=e=>{if(e.some(e=>c.some(a=>a.code===e)))return!1;return e.some(e=>s.some(a=>a.code===e))},e.validateCumulative=n,e.validateMobile=function(e,a,t){const r=n(e,a,t);return console.log(`📱 Mobile validation for row ${a}:`,{isValid:r.isValid,tripsCount:r.validationDetails.tripsCount,totalDaysUsed:r.validationDetails.totalDaysUsed,daysRemaining:r.validationDetails.daysRemaining,errorMessage:r.errorMessage||"No errors"}),r},e.validateSequence=function(e){const a=[],t=[];if(0===e.length)return{isValid:!0,errors:a,warnings:t};let r=null;for(let i=0;i<e.length;i++){const o=n(e,i);if(!o.isValid){a.push(`Row ${i}: ${o.errorMessage}`);continue}const s=o.expectedResult;if(r&&s){const e=Math.abs(r.referenceDate.getTime()-s.referenceDate.getTime())/864e5;e<180&&s.totalDaysUsed<r.totalDaysUsed&&t.push(`Row ${i}: Cumulative total decreased from ${r.totalDaysUsed} to ${s.totalDaysUsed} within ${Math.round(e)} days. This may indicate trips falling outside rolling window.`)}r=s}return{isValid:0===a.length,errors:a,warnings:t}}});
//# sourceMappingURL=index.umd.min.js.map
