{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["// Payments module\nexport const PaymentProvider = {\n  init: () => {},\n}\n\nexport enum SubscriptionTier {\n  FREE = 'free',\n  PREMIUM = 'premium',\n  PRO = 'pro',\n  BUSINESS = 'business'\n}\n\nexport interface SubscriptionTierData {\n  id: string\n  name: string\n  price: number\n  features: string[]\n}\n\nexport const SUBSCRIPTION_TIERS: SubscriptionTierData[] = [\n  { id: 'free', name: 'Free', price: 0, features: ['basic_calculator'] },\n  { id: 'premium', name: 'Premium', price: 9.99, features: ['basic_calculator', 'unlimited_lists', 'pdf_export'] },\n  { id: 'pro', name: 'Pro', price: 19.99, features: ['basic_calculator', 'unlimited_lists', 'pdf_export', 'api_access'] },\n]\n\nexport function checkFeatureAccess(userTier: string, feature: string): boolean {\n  const tier = SUBSCRIPTION_TIERS.find(t => t.id === userTier)\n  return tier ? tier.features.includes(feature) : false\n}\n\nexport function getTierComparison(currentTier: string, targetTier: string) {\n  const current = SUBSCRIPTION_TIERS.find(t => t.id === currentTier)\n  const target = SUBSCRIPTION_TIERS.find(t => t.id === targetTier)\n  \n  if (!current || !target) return null\n  \n  return {\n    current,\n    target,\n    savings: target.price - current.price,\n    newFeatures: target.features.filter(f => !current.features.includes(f))\n  }\n}\n\nexport function formatPrice(price: number): string {\n  return price === 0 ? 'Free' : `$${price}/month`\n}\n\n// Stripe integration types\nexport interface StripeSession {\n  sessionId: string\n  url: string\n  tier: string\n  billingCycle: string\n  amount: number\n}\n\nexport interface CreateCheckoutSessionRequest {\n  tier: 'premium' | 'pro' | 'business'\n  billingCycle?: 'monthly' | 'yearly'\n  userId: string\n  userEmail: string\n  successUrl?: string\n  cancelUrl?: string\n  metadata?: Record<string, string>\n}\n\n// Real Stripe integration functions\nexport async function createCheckoutSession(request: CreateCheckoutSessionRequest): Promise<StripeSession> {\n  try {\n    const response = await fetch('/api/stripe/create-checkout-session', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request),\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json()\n      throw new Error(errorData.error || 'Failed to create checkout session')\n    }\n\n    const data = await response.json()\n    return {\n      sessionId: data.sessionId,\n      url: data.url,\n      tier: data.tier,\n      billingCycle: data.billingCycle,\n      amount: data.amount\n    }\n  } catch (error) {\n    console.error('‚ùå Failed to create Stripe checkout session:', error)\n    throw error\n  }\n}\n\nexport async function getSubscriptionStatus(userId: string): Promise<string> {\n  try {\n    // TODO: Implement actual subscription status check via API\n    // This would query your database for the user's current subscription\n    const response = await fetch(`/api/subscription/status?userId=${userId}`)\n    \n    if (!response.ok) {\n      console.warn('Failed to fetch subscription status, defaulting to free')\n      return 'free'\n    }\n    \n    const data = await response.json()\n    return data.status || 'free'\n  } catch (error) {\n    console.error('Error fetching subscription status:', error)\n    return 'free'\n  }\n}\n\n// Additional types and functions for payment modal\nexport enum BillingCycle {\n  MONTHLY = 'monthly',\n  YEARLY = 'yearly'\n}\n\nexport function calculateYearlySavings(monthlyPrice: number): number {\n  const yearlyPrice = monthlyPrice * 10 // 20% discount\n  const monthlyCost = monthlyPrice * 12\n  return monthlyCost - yearlyPrice\n}\n\nexport function getStripe() {\n  // Client-side Stripe initialization\n  if (typeof window !== 'undefined' && process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY) {\n    try {\n      // Dynamic import for client-side only\n      const { loadStripe } = require('@stripe/stripe-js')\n      return loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY)\n    } catch (error) {\n      console.error('Failed to load Stripe:', error)\n      return null\n    }\n  }\n  return null\n}\n\nexport function getTierFeatures(tierId: string): string[] {\n  const tier = SUBSCRIPTION_TIERS.find(t => t.id === tierId)\n  return tier ? tier.features : []\n}\n\nexport const TIER_PRICING = {\n  free: { monthly: 0, yearly: 0 },\n  premium: { monthly: 9.99, yearly: 99 },\n  pro: { monthly: 19.99, yearly: 199 },\n  business: { monthly: 49.99, yearly: 499 }\n}\n\n// Additional subscription management functions\nexport interface SubscriptionData {\n  id: string\n  status: 'active' | 'inactive' | 'cancelled' | 'past_due'\n  tier: SubscriptionTier\n  billingCycle: BillingCycle\n  currentPeriodEnd: Date\n  customerId: string\n  priceId?: string\n}\n\nexport function redirectToStripeCheckout(sessionUrl: string) {\n  if (typeof window !== 'undefined') {\n    window.location.href = sessionUrl\n  }\n}\n\nexport function formatSubscriptionPrice(tier: string, billingCycle: BillingCycle): string {\n  const pricing = TIER_PRICING[tier as keyof typeof TIER_PRICING]\n  if (!pricing) return 'Free'\n  \n  const price = billingCycle === BillingCycle.YEARLY ? pricing.yearly : pricing.monthly\n  const period = billingCycle === BillingCycle.YEARLY ? 'year' : 'month'\n  \n  return price === 0 ? 'Free' : `$${price}/${period}`\n}\n\nexport function getUpgradeDiscount(tier: string): number {\n  // 20% discount for yearly subscriptions\n  const pricing = TIER_PRICING[tier as keyof typeof TIER_PRICING]\n  if (!pricing) return 0\n  \n  const monthlyTotal = pricing.monthly * 12\n  const yearlyPrice = pricing.yearly\n  \n  return monthlyTotal - yearlyPrice\n}\n\nexport function getTierDisplayName(tier: string): string {\n  switch (tier.toLowerCase()) {\n    case 'premium':\n      return 'Premium'\n    case 'pro':\n      return 'Pro'\n    case 'business':\n      return 'Business'\n    case 'free':\n    default:\n      return 'Free'\n  }\n}"],"names":["PaymentProvider","init","SubscriptionTier","SUBSCRIPTION_TIERS","id","name","price","features","checkFeatureAccess","userTier","feature","tier","find","t","includes","getTierComparison","currentTier","targetTier","current","target","savings","newFeatures","filter","f","formatPrice","createCheckoutSession","request","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","data","sessionId","url","billingCycle","amount","console","getSubscriptionStatus","userId","warn","status","BillingCycle","calculateYearlySavings","monthlyPrice","yearlyPrice","monthlyCost","getStripe","window","process","env","NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY","loadStripe","require","getTierFeatures","tierId","TIER_PRICING","free","monthly","yearly","premium","pro","business","redirectToStripeCheckout","sessionUrl","location","href","formatSubscriptionPrice","pricing","period","getUpgradeDiscount","monthlyTotal","getTierDisplayName","toLowerCase"],"mappings":"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"}