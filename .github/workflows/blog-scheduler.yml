name: Automated Blog Publishing

# Run every hour to check for posts that need to be published
on:
  schedule:
    # Run every hour at 15 minutes past the hour
    - cron: '15 * * * *'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  publish-scheduled-posts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Trigger Blog Publisher
      run: |
        echo "üïí Running automated blog publishing job..."
        
        # Call the cron endpoint with authentication
        response=$(curl -s -w "\n%{http_code}" \
          -X POST \
          -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
          -H "Content-Type: application/json" \
          "${{ secrets.APP_URL }}/api/blog-scheduler/cron")
        
        # Extract response body and status code
        body=$(echo "$response" | head -n -1)
        status_code=$(echo "$response" | tail -n 1)
        
        echo "Response: $body"
        echo "Status Code: $status_code"
        
        # Check if request was successful
        if [ "$status_code" -eq 200 ]; then
          echo "‚úÖ Blog publishing completed successfully"
        else
          echo "‚ùå Blog publishing failed with status code: $status_code"
          echo "Response body: $body"
          exit 1
        fi

  monitor-health:
    runs-on: ubuntu-latest
    needs: publish-scheduled-posts
    if: always()
    
    steps:
    - name: Check System Health
      run: |
        echo "üè• Checking blog scheduler health..."
        
        # Check health endpoint
        health_response=$(curl -s -w "\n%{http_code}" \
          "${{ secrets.APP_URL }}/api/blog-scheduler/cron")
        
        health_body=$(echo "$health_response" | head -n -1)
        health_status=$(echo "$health_response" | tail -n 1)
        
        echo "Health Response: $health_body"
        
        if [ "$health_status" -eq 200 ]; then
          echo "‚úÖ System health check passed"
          
          # Parse JSON response to get key metrics
          if command -v jq &> /dev/null; then
            next_post=$(echo "$health_body" | jq -r '.nextScheduledPost // "None"')
            pending_count=$(echo "$health_body" | jq -r '.pendingPosts // 0')
            recent_count=$(echo "$health_body" | jq -r '.recentlyPublished // 0')
            
            echo "üìä Metrics:"
            echo "  - Next scheduled post: $next_post"
            echo "  - Pending posts: $pending_count"
            echo "  - Recently published: $recent_count"
          fi
        else
          echo "‚ö†Ô∏è System health check failed"
          echo "Health status: $health_status"
        fi

    - name: Notify on Failure
      if: failure()
      run: |
        echo "üö® Blog scheduler workflow failed!"
        echo "Please check the system status and logs."
        
        # In a real setup, you might want to send notifications here
        # Examples:
        # - Send Slack notification
        # - Send email alert
        # - Create GitHub issue
        # - Call webhook
        
        # Example webhook notification (replace with your webhook URL)
        # curl -X POST \
        #   -H "Content-Type: application/json" \
        #   -d '{"text": "üö® Blog scheduler failed", "timestamp": "'$(date -u)'"}' \
        #   "${{ secrets.WEBHOOK_URL }}"